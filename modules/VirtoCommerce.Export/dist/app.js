!function(e){var t={};function r(o){if(t[o])return t[o].exports;var a=t[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(o,a,function(t){return e[t]}.bind(null,a));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){r(1),r(2),r(3),r(4),r(5),r(6),r(7),r(8),r(9),e.exports=r(10)},function(e,t){void 0!==AppDependencies&&AppDependencies.push("virtoCommerce.exportModule"),angular.module("virtoCommerce.exportModule",["ui.grid.cellNav","ui.grid.edit","ui.grid.validate"]).config(["$stateProvider",function(e){e.state("workspace.exportModule",{url:"/generic-export",templateUrl:"$(Platform)/Scripts/common/templates/home.tpl.html",controller:["$scope","platformWebApp.bladeNavigationService",function(e,t){t.showBlade({id:"exportSettings",title:"export.blades.export-settings.title",subtitle:"export.blades.export-settings.subtitle",controller:"virtoCommerce.exportModule.exportSettingsController",template:"Modules/$(VirtoCommerce.Export)/Scripts/blades/export-settings.tpl.html",exportDataRequest:{},isClosingDisabled:!0})}]})}]).run(["$http","$compile","platformWebApp.mainMenuService","platformWebApp.widgetService","$state","platformWebApp.authService",function(e,t,r,o,a,i){var n={path:"configuration/generic-export",icon:"fa fa-database",title:"export.main-menu-title",priority:30,action:function(){a.go("workspace.exportModule")},permission:"export:access"};r.addMenuItem(n)}])},function(e,t){angular.module("virtoCommerce.exportModule").controller("virtoCommerce.exportModule.exportGenericViewerFilterController",["$scope","$localStorage","platformWebApp.metaFormsService","$translate",function(e,t,r,o){var a,i=e.blade;function n(e){i.currentEntity=angular.copy(e),i.origEntity=e,i.isLoading=!1,i.title=i.isNew?"export.blades.generic-filter.new-title":e.name,i.subtitle=i.isNew?"export.blades.generic-filter.new-subtitle":"export.blades.generic-filter.subtitle"}i.exportTypeName=i.exportTypeName||"NotSpecified",i.metaFields=r.getMetaFields(i.metafieldsId)||[],e.apply=function(e){if(i.onBeforeApply&&i.onBeforeApply(),angular.copy(i.currentEntity,i.origEntity),e){t.exportSearchFilterIds[i.exportTypeName]=i.origEntity.id;var r=_.findIndex(t.exportSearchFilters[i.exportTypeName],{id:i.origEntity.id});-1!==r?t.exportSearchFilters[i.exportTypeName][r]=i.origEntity:t.exportSearchFilters[i.exportTypeName].push(i.origEntity)}i.isNew&&(e||(t.exportSearchFilterIds[i.exportTypeName]=void 0),i.parentBlade.filter.current=i.origEntity,i.isNew=!1),n(i.origEntity),i.parentBlade.filter.current.objectIds=[],i.parentBlade.filter.criteriaChanged()},e.setForm=function(e){a=e},i.headIcon="fa fa-filter",i.toolbarCommands=[{name:"export.blades.generic-filter.commands.apply",icon:"fa fa-filter",executeMethod:function(){e.apply(!1)},canExecuteMethod:function(){return!(i.origEntity&&i.origEntity.id&&t.exportSearchFilterIds[i.exportTypeName]===i.origEntity.id)}},{name:"core.commands.apply-filter",icon:"fa fa-filter",executeMethod:function(){e.apply(!0)},canExecuteMethod:function(){return a&&a.$valid}},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(i.origEntity,i.currentEntity)},canExecuteMethod:function(){return!angular.equals(i.currentEntity,i.origEntity)}},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){i.parentBlade.filter.current=null,t.exportSearchFilters[i.exportTypeName].splice(t.exportSearchFilters[i.exportTypeName].indexOf(i.origEntity),1),t.exportSearchFilterIds[i.exportTypeName]=void 0,i.parentBlade.refresh(),e.bladeClose()},canExecuteMethod:function(){return!i.isNew}}],i.isNew?n({id:(new Date).getTime()}):(i.data.id||angular.extend(i.data,{id:(new Date).getTime()}),n(i.data))}])},function(e,t){angular.module("virtoCommerce.exportModule").controller("virtoCommerce.exportModule.exportGenericViewerController",["$localStorage","$timeout","$scope","platformWebApp.bladeUtils","platformWebApp.uiGridHelper","virtoCommerce.exportModule.exportModuleApi","virtoCommerce.exportModule.genericViewerItemService",function(e,t,r,o,a,i,n){r.uiGridConstants=a.uiGridConstants,r.hasMore=!0,r.items=[],r.blade.headIcon="fa fa-upload",r.exportSearchFilters=[],r.exportSearchFilterIds=[];var l=r.blade,p=o.bladeNavigationService;l.isLoading=!0,l.isExpanded=!0;var s=l.filter=r.filter={};function c(e){l.isLoading=!0;var o=u(),a={skip:(r.pageSettings.currentPage-1)*r.pageSettings.itemsPerPageCount,take:r.pageSettings.itemsPerPageCount},n={dataQuery:a,exportTypeName:l.exportDataRequest.exportTypeName};delete o.skip,delete o.take,angular.extend(a,o),i.getData(n,(function(o){l.isLoading=!1,r.pageSettings.totalItems=o.totalCount,r.items=r.items.concat(o.results),r.hasMore=o.results.length===r.pageSettings.itemsPerPageCount,t((function(){r.gridApi&&(a.objectIds&&a.objectIds.length?_.each(a.objectIds,(function(e){var t=_.findWhere(r.items,{id:e});r.gridApi.selection.selectRow(t)})):a.isAllSelected&&r.gridApi.selection.selectAllRows())})),e&&e()}))}function d(){r.hasMore&&(++r.pageSettings.currentPage,r.gridApi.infiniteScroll.saveScrollPercentage(),c((function(){r.gridApi.infiniteScroll.dataLoaded(),t((function(){r.gridApi.selection.getSelectAllState()&&r.gridApi.selection.selectAllRows()}))})))}function u(){var e=x();return angular.extend(e,function(){var e={},t=!!s.current||s.keyword;e.isAnyFilterApplied=t,angular.extend(e,s.current);var r=l.exportDataRequest.dataQuery;r.objectIds&&r.length&&angular.extend(e,{objectIds:r.objectIds});s.keyword&&angular.extend(e,{keyword:s.keyword});return e}()),e}function x(){return{IsPreview:!0,exportTypeName:l.exportDataRequest.dataQuery.exportTypeName,includedProperties:l.exportDataRequest.dataQuery.includedProperties,sort:a.getSortExpression(r)}}(l.exportDataRequest=l.exportDataRequest?angular.copy(l.exportDataRequest):{exportTypeName:"NotSpecified"},l.exportDataRequest.dataQuery&&l.exportDataRequest.dataQuery.keyword&&(s.keyword=l.exportDataRequest.dataQuery.keyword),r.$localStorage=e,l.refresh=function(){r.items=[],1!==r.pageSettings.currentPage&&(r.pageSettings.currentPage=1),c(),r.gridApi&&(r.items=[],r.gridApi.selection.clearSelectedRows(),r.gridApi.infiniteScroll.resetScroll(!0,!0),r.gridApi.infiniteScroll.dataLoaded())},l.resetFiltering=function(){s.resetKeyword(),l.resetRequestCustomFilter()},l.resetRequestCustomFilter=function(){l.exportDataRequest.dataQuery=x()},l.setSelectedItem=function(e){r.selectedNodeId=e.id},r.selectItem=function(e,t){l.setSelectedItem(t);var r=n.getViewer(t.type);r&&p.showBlade(r(t),l)},e.exportSearchFilters||(e.exportSearchFilters={}),e.exportSearchFilters[l.exportDataRequest.exportTypeName]||(e.exportSearchFilters[l.exportDataRequest.exportTypeName]=[{name:"export.blades.export-generic-viewer.labels.new-filter"}]),r.exportSearchFilters=e.exportSearchFilters[l.exportDataRequest.exportTypeName],e.exportSearchFilterIds||(e.exportSearchFilterIds={}),r.exportSearchFilterId=e.exportSearchFilterIds[l.exportDataRequest.exportTypeName],r.exportSearchFilterId&&(s.current=_.findWhere(r.exportSearchFilters,{id:r.exportSearchFilterId})),l.exportDataRequest.dataQuery)&&(l.exportDataRequest.dataQuery.name&&(s.current||(s.current={}),angular.extend(s.current,l.exportDataRequest.dataQuery)));function m(e){var t={id:"exportGenericViewerFilter",controller:"virtoCommerce.exportModule.exportGenericViewerFilterController",template:"Modules/$(VirtoCommerce.Export)/Scripts/blades/export-generic-viewer-filter.tpl.html",onBeforeApply:l.resetRequestCustomFilter};angular.extend(t,e),p.showBlade(t,l)}s.change=function(){var t=s.current?s.current.id:null,r=l.exportDataRequest.exportTypeName+"ExportFilter";e.exportSearchFilterIds[l.exportDataRequest.exportTypeName]=t,s.current&&!s.current.id?(s.current=null,m({isNew:!0,metafieldsId:r,exportTypeName:l.exportDataRequest.exportTypeName})):(p.closeBlade({id:"exportGenericViewerFilter"}),s.current||l.resetRequestCustomFilter(),s.criteriaChanged())},s.edit=function(){var e=l.exportDataRequest.exportTypeName+"ExportFilter",t={data:s.current,metafieldsId:e,exportTypeName:l.exportDataRequest.exportTypeName};s.current?angular.extend(t,{data:s.current}):angular.extend(t,{isNew:!0}),m(t)},s.criteriaChanged=function(){l.refresh()},s.resetKeyword=function(){s.keyword=void 0,s.current&&(s.current.keyword=void 0),l.exportDataRequest.dataQuery&&(l.exportDataRequest.dataQuery.keyword=void 0)},l.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:function(){l.resetFiltering(),l.refresh()},canExecuteMethod:function(){return!0}}],r.setGridOptions=function(e){o.initializePagination(r,!0),r.pageSettings.itemsPerPageCount=20,e.enableRowSelection=e.enableSelectAll=!l.exportDataRequest.restrictDataSelectivity,e.isRowSelectable=function(e){return!l.exportDataRequest.restrictDataSelectivity},a.initialize(r,e,(function(e){r.gridApi=e,a.bindRefreshOnSortChanged(r),r.gridApi.infiniteScroll.on.needLoadMoreData(r,d)})),t((function(){l.refresh()}))},r.cancelChanges=function(){p.closeBlade(l)},r.isValid=function(){return r.items&&r.items.length},r.saveChanges=function(){var e=u(),t=r.gridApi.selection.getSelectAllState(),o=_.map(r.gridApi.selection.getSelectedRows(),(function(e){return e.id}));e.isAllSelected=t,(l.exportDataRequest.dataQuery.objectIds&&l.exportDataRequest.dataQuery.objectIds.length||!t)&&(o.length?e.objectIds=o:e.objectIds=[]),l.onCompleted&&l.onCompleted(e),p.closeBlade(l)}}])},function(e,t){angular.module("virtoCommerce.exportModule").controller("virtoCommerce.exportModule.exportProgressController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.exportModule.exportModuleApi",function(e,t,r){var o=e.blade;o.isLoading=!0,e.blade.headIcon="fa fa-upload",e.$on("new-notification-event",(function(e,r){o.notification&&r.id===o.notification.id&&(angular.copy(r,o.notification),r.errorCount>0&&t.setError("Export error",o),o.notification.finished&&o.onCompleted&&o.onCompleted())}));var a={name:"platform.commands.cancel",icon:"fa fa-times",canExecuteMethod:function(){return o.notification&&!o.notification.finished},executeMethod:function(){r.cancel({jobId:o.notification.jobId},(function(e){}))}};o.toolbarCommands=[a],o.isLoading=!1,r.runExport(o.exportDataRequest,(function(e){o.notification=e}))}])},function(e,t){angular.module("virtoCommerce.exportModule").controller("virtoCommerce.exportModule.exportPropertiesSelectorController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var r=e.blade;r.isLoading=!0,e.selectAllInGroup=function(e){r.selectedEntities[e]=r.allEntities[e]},e.clearAllInGroup=function(e){r.selectedEntities[e]=[]},e.sortSelected=function(e){r.selectedEntities[e]=_.sortBy(r.selectedEntities[e],"name")},e.cancelChanges=function(){t.closeBlade(r)},e.isValid=function(){return _.some(r.selectedEntities,(function(e){return e.length}))},e.saveChanges=function(){var e=_.flatten(_.map(r.selectedEntities,_.values));r.onSelected&&(r.onSelected(e),t.closeBlade(r))},function(){r.title="export.blades.export-settings.labels.exported-properties",r.headIcon="fa fa-folder";var e=angular.copy(r.allPropertiesOfType);e=_.sortBy(e,"group","name");var t=angular.copy(r.exportDataRequest.dataQuery.includedProperties);t=_.sortBy(t,"name"),r.allEntities=_.groupBy(e,"group"),r.selectedEntities=_.groupBy(t,"group"),r.isLoading=!1}()}])},function(e,t){angular.module("virtoCommerce.exportModule").controller("virtoCommerce.exportModule.exportSettingsController",["$scope","$translate","platformWebApp.bladeNavigationService","virtoCommerce.exportModule.exportModuleApi","$localStorage",function(e,t,r,o,a){var i=e.blade;function n(){i.allPropertiesOfType=i.selectedProvider&&i.selectedType?i.selectedProvider.isTabular&&i.selectedType.tabularMetaData?i.selectedType.tabularMetaData.propertyInfos:i.selectedType.metaData.propertyInfos:[],i.exportDataRequest.dataQuery.includedProperties=i.allPropertiesOfType,i.isTabularExportSupported=i.selectedType.isTabularExportSupported,i.isExportedTypeSelected=void 0!==i.exportDataRequest.exportTypeName,i.propertySelected=i.allPropertiesOfType.length,i.propertyTotal=i.propertySelected}function l(){if(i.allProviders){var e=i.exportDataRequest.exportTypeName&&!i.isTabularExportSupported,r=i.allProviders;e&&(r=_.filter(r,(function(e){return!e.isTabular}))),i.providers=_.map(r,(function(e){return{id:e.typeName,name:t.instant("export.provider-names."+e.typeName),isTabular:e.isTabular}})),i.selectedProvider&&-1===_.findIndex(i.providers,(function(e){return e.id===i.selectedProvider.id}))&&(i.selectedProvider=void 0)}}function p(e){var t={exportTypeName:i.exportDataRequest.dataQuery.exportTypeName,includedProperties:[],skip:0,take:0};o.getData({exportTypeName:i.exportDataRequest.exportTypeName,dataQuery:t},(function(t){i.dataTotal=t.totalCount,e&&e(t)}))}function s(){var e=angular.copy(i.exportDataRequest.dataQuery);e.includedProperties=[],e.isAllSelected||e.objectIds&&e.objectIds.length||e.isAnyFilterApplied?o.getData({exportTypeName:i.exportDataRequest.exportTypeName,dataQuery:e},(function(e){i.dataSelected=e.totalCount})):i.dataSelected=0}i.canStartProcess=!1,i.isLoading=!0,i.exportDataRequest=i.exportDataRequest||{},i.allPropertiesOfType=[],i.dataSelected=0,i.dataTotal=0,i.propertySelected=0,i.propertyTotal=0,i.defaultProvider=a.defaultExportProvider||"JsonExportProvider",i.isExportedTypeSelected=void 0!==i.exportDataRequest.exportTypeName,i.isTabularExportSupported=i.exportDataRequest.isTabularExportSupported||!1,e.providerChanged=function(){a.defaultExportProvider=i.selectedProvider.id,i.isExportedTypeSelected&&n()},e.startExport=function(){if(e.validateExportParameters()){i.exportDataRequest.providerName=i.selectedProvider.id,delete i.exportDataRequest.dataQuery.skip,delete i.exportDataRequest.dataQuery.take,delete i.exportDataRequest.dataQuery.IsPreview,i.isExporting=!0;var t={id:"exportProgress",title:"export.blades.export-progress.title",controller:"virtoCommerce.exportModule.exportProgressController",template:"Modules/$(VirtoCommerce.Export)/Scripts/blades/export-progress.tpl.html",exportDataRequest:i.exportDataRequest,onCompleted:function(){i.isExporting=!1}};r.showBlade(t,i)}},e.selectExportedType=function(){var e={id:"exportedTypeSelector",title:"export.blades.export-type-selector.title",subtitle:"export.blades.export-type-selector.subtitle",controller:"virtoCommerce.exportModule.exportTypeSelectorController",template:"Modules/$(VirtoCommerce.Export)/Scripts/blades/export-type-selector.tpl.html",isClosingDisabled:!1,knownTypes:i.knownTypes,exportDataRequest:i.exportDataRequest,selectedProvider:i.selectedProvider,onSelected:function(e){i.selectedType&&i.selectedType.name==e.selectedType.name||(i.exportDataRequest=angular.extend(i.exportDataRequest,e.exportDataRequest),i.exportDataRequest.dataQuery=angular.copy(e.exportDataRequest.dataQuery),i.selectedType=e.selectedType,n(),l(),p((function(e){i.dataSelected=e.totalCount})))}};r.showBlade(e,i)},e.selectExportedProperties=function(){var e={id:"exportedPropertiesSelector",controller:"virtoCommerce.exportModule.exportPropertiesSelectorController",template:"Modules/$(VirtoCommerce.Export)/Scripts/blades/export-properties-selector.tpl.html",isClosingDisabled:!1,exportDataRequest:i.exportDataRequest,allPropertiesOfType:i.allPropertiesOfType,onSelected:function(e){i.exportDataRequest.dataQuery.includedProperties=e,i.propertySelected=e.length}};r.showBlade(e,i)},e.selectExportedData=function(){var e={id:"exportedDataSelector",title:"export.blades.export-generic-viewer.title",subtitle:"export.blades.export-generic-viewer.subtitle",controller:"virtoCommerce.exportModule.exportGenericViewerController",template:"Modules/$(VirtoCommerce.Export)/Scripts/blades/export-generic-viewer.tpl.html",isClosingDisabled:!1,exportDataRequest:i.exportDataRequest,onCompleted:function(e){i.exportDataRequest.dataQuery=e,s()}};r.showBlade(e,i)},e.validateExportParameters=function(){return!i.isExporting&&i.exportDataRequest&&i.exportDataRequest.exportTypeName&&i.selectedProvider&&i.exportDataRequest.dataQuery&&i.dataSelected},e.blade.headIcon="fa fa-upload",o.getProviders((function(e){var r;e&&e.length&&(i.allProviders=e,l(),i.selectedProvider=_.find(i.providers,(function(e){return e.id===i.defaultProvider})),i.isExportedTypeSelected&&(r=l,o.getKnownTypes((function(e){i.knownTypes=e;var o=_.find(e,(function(e){return e.typeName===i.exportDataRequest.exportTypeName}));o&&(i.selectedType=o,i.selectedType.localizedName=t.instant("export.types."+i.exportDataRequest.exportTypeName+".name"),n(),p(),s()),angular.isFunction(r)&&r()}))))})),i.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.exportModule").controller("virtoCommerce.exportModule.exportTypeSelectorController",["$scope","$translate","platformWebApp.bladeNavigationService","virtoCommerce.exportModule.exportModuleApi",function(e,t,r,o){var a,i=e.blade;function n(r){if(i.breadcrumbs.splice(1,i.breadcrumbs.length-1),r.groupName){var o="",n=a,l=r.groupName.split("|");_.each(l,(function(r){n=n[r].children;var a={id:(o+="|"+r).substring(1),name:t.instant("export.groups."+r+".name"),children:n,navigate:function(){e.selectNode({groupName:this.id,children:this.children})}};i.breadcrumbs.push(a)}))}}i.title="export.blades.export-settings.labels.exported-type",i.headIcon="fa fa-folder",i.knownTypesTree={},i.refresh=function(e){i.isLoading=!0,i.knownTypes?(i.knownTypesTree=angular.copy(i.knownTypes),i.prepareTypes()):o.getKnownTypes((function(e){i.knownTypesTree=e,i.prepareTypes()}),(function(e){r.setError("Error "+e.status,i)}))},e.selectNode=function(t,o){r.closeChildrenBlades(i,(function(){if(e.selectedNodeId=t.groupName,t.children)i.searchText=null,i.currentEntities=t.children,n(t);else{var o=_.filter(i.allGroups,(function(e){return e.groupName===t.groupName||"General"===t.groupName&&!e.groupName}))[0],a={exportDataRequest:{exportTypeName:o.typeName,dataQuery:{exportTypeName:o.exportDataQueryType,isAllSelected:!0},restrictDataSelectivity:o.restrictDataSelectivity},selectedType:o};i.onSelected&&(i.onSelected(a),r.closeBlade(i))}}))},i.prepareTypes=function(){if(_.each(i.knownTypesTree,(function(e){e.localizedName=t.instant("export.types."+e.typeName+".name"),e.localizedNameDescription=t.instant("export.types."+e.typeName+".description"),e.localizedGroup=t.instant("export.groups."+e.group+".name"),e.localizedGroupDescription=t.instant("export.groups."+e.group+".description"),e.groupName=e.group+"|"+e.typeName,e.localizedGroupName=e.localizedGroup+"|"+e.localizedName;var r=e.typeName.lastIndexOf(".");e.name=e.typeName.substring(r+1)})),i.allGroups=i.knownTypesTree,a={},_.each(i.knownTypesTree,(function(e){var t=(e.groupName?e.groupName:"General").split("|"),r=a,o="";_.each(t,(function(a,n){if(o+="|"+a,!r[a]){var l=a.lastIndexOf("."),p={name:a.substring(l+1),localizedName:e.localizedName,localizedDescription:e.localizedNameDescription,groupName:o.substring(1)};r[a]=p,e.groupName&&_.all(i.allGroups,(function(e){return e.groupName!==p.groupName}))&&(p.localizedName=e.localizedGroup,p.localizedDescription=e.localizedGroupDescription,i.allGroups.push(p))}n<t.length-1&&(r[a].children||(r[a].children={}),r=r[a].children)}))})),i.isLoading=!1,i.searchText)i.currentEntities=a;else{for(var r=a,o=1;o<i.breadcrumbs.length;o++)r=r[i.breadcrumbs[o].name].children;i.currentEntities=r}e.selectedNodeId&&e.selectNode({groupName:e.selectedNodeId},disableOpenAnimation)},i.breadcrumbs=[{id:null,name:"export.blades.export-type-selector.bread-crumb-top",navigate:function(){e.selectNode({groupName:null,children:a})}}],e.$watch("blade.searchText",(function(e){e&&(i.currentEntities=a,n({groupName:null}))})),i.refresh()}])},function(e,t){angular.module("virtoCommerce.exportModule").factory("virtoCommerce.exportModule.exportModuleApi",["$resource",function(e){return e("",null,{getProviders:{method:"GET",isArray:!0,url:"api/export/providers"},getKnownTypes:{method:"GET",isArray:!0,url:"api/export/knowntypes"},runExport:{method:"POST",url:"api/export/run"},getData:{method:"POST",url:"api/export/data"},cancel:{method:"POST",url:"api/export/task/cancel"}})}])},function(e,t){angular.module("virtoCommerce.exportModule").factory("virtoCommerce.exportModule.genericViewerItemService",(function(){var e={};return this.registerViewer=function(t,r){e[t]=r},this.getViewer=function(t){return e[t]},this}))},function(e,t,r){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,