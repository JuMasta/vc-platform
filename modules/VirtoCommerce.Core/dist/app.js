!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){var r,o,i;
/*!
 * jQuery JavaScript Library v2.2.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:23Z
 */o="undefined"!=typeof window?window:this,i=function(n,o){var i=[],a=n.document,s=i.slice,l=i.concat,c=i.push,u=i.indexOf,d={},p=d.toString,f=d.hasOwnProperty,h={},m=function(e,t){return new m.fn.init(e,t)},g=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,y=/^-ms-/,v=/-([\da-z])/gi,b=function(e,t){return t.toUpperCase()};function x(e){var t=!!e&&"length"in e&&e.length,n=m.type(e);return"function"!==n&&!m.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}m.fn=m.prototype={jquery:"2.2.4",constructor:m,selector:"",length:0,toArray:function(){return s.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:s.call(this)},pushStack:function(e){var t=m.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return m.each(this,e)},map:function(e){return this.pushStack(m.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:i.sort,splice:i.splice},m.extend=m.fn.extend=function(){var e,t,n,r,o,i,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||m.isFunction(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&&(c&&r&&(m.isPlainObject(r)||(o=m.isArray(r)))?(o?(o=!1,i=n&&m.isArray(n)?n:[]):i=n&&m.isPlainObject(n)?n:{},a[t]=m.extend(c,i,r)):void 0!==r&&(a[t]=r));return a},m.extend({expando:"jQuery"+("2.2.4"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===m.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=e&&e.toString();return!m.isArray(e)&&t-parseFloat(t)+1>=0},isPlainObject:function(e){var t;if("object"!==m.type(e)||e.nodeType||m.isWindow(e))return!1;if(e.constructor&&!f.call(e,"constructor")&&!f.call(e.constructor.prototype||{},"isPrototypeOf"))return!1;for(t in e);return void 0===t||f.call(e,t)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[p.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;(e=m.trim(e))&&(1===e.indexOf("use strict")?((t=a.createElement("script")).text=e,a.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(y,"ms-").replace(v,b)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var n,r=0;if(x(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(g,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(x(Object(e))?m.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,a=!n;o<i;o++)!t(e[o],o)!==a&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,a=[];if(x(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&a.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&a.push(o);return l.apply([],a)},guid:1,proxy:function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),m.isFunction(e))return r=s.call(arguments,2),(o=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||m.guid++,o},now:Date.now,support:h}),"function"==typeof Symbol&&(m.fn[Symbol.iterator]=i[Symbol.iterator]),m.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var C=
/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
function(e){var t,n,r,o,i,a,s,l,c,u,d,p,f,h,m,g,y,v,b,x="sizzle"+1*new Date,C=e.document,w=0,E=0,T=ie(),N=ie(),S=ie(),k=function(e,t){return e===t&&(d=!0),0},M=1<<31,A={}.hasOwnProperty,D=[],I=D.pop,j=D.push,L=D.push,q=D.slice,O=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",$="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",P="\\["+$+"*("+F+")(?:"+$+"*([*^$|!~]?=)"+$+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+$+"*\\]",H=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+P+")*)|.*)\\)|)",W=new RegExp($+"+","g"),B=new RegExp("^"+$+"+|((?:^|[^\\\\])(?:\\\\.)*)"+$+"+$","g"),U=new RegExp("^"+$+"*,"+$+"*"),_=new RegExp("^"+$+"*([>+~]|"+$+")"+$+"*"),V=new RegExp("="+$+"*([^\\]'\"]*?)"+$+"*\\]","g"),G=new RegExp(H),z=new RegExp("^"+F+"$"),X={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+H),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+$+"*(even|odd|(([+-]|)(\\d*)n|)"+$+"*(?:([+-]|)"+$+"*(\\d+)|))"+$+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+$+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+$+"*((?:-\\d)?\\d*)"+$+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,K=/[+~]/,ee=/'|\\/g,te=new RegExp("\\\\([\\da-f]{1,6}"+$+"?|("+$+")|.)","ig"),ne=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},re=function(){p()};try{L.apply(D=q.call(C.childNodes),C.childNodes),D[C.childNodes.length].nodeType}catch(e){L={apply:D.length?function(e,t){j.apply(e,q.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function oe(e,t,r,o){var i,s,c,u,d,h,y,v,w=t&&t.ownerDocument,E=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==E&&9!==E&&11!==E)return r;if(!o&&((t?t.ownerDocument||t:C)!==f&&p(t),t=t||f,m)){if(11!==E&&(h=J.exec(e)))if(i=h[1]){if(9===E){if(!(c=t.getElementById(i)))return r;if(c.id===i)return r.push(c),r}else if(w&&(c=w.getElementById(i))&&b(t,c)&&c.id===i)return r.push(c),r}else{if(h[2])return L.apply(r,t.getElementsByTagName(e)),r;if((i=h[3])&&n.getElementsByClassName&&t.getElementsByClassName)return L.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!S[e+" "]&&(!g||!g.test(e))){if(1!==E)w=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((u=t.getAttribute("id"))?u=u.replace(ee,"\\$&"):t.setAttribute("id",u=x),s=(y=a(e)).length,d=z.test(u)?"#"+u:"[id='"+u+"']";s--;)y[s]=d+" "+me(y[s]);v=y.join(","),w=K.test(e)&&fe(t.parentNode)||t}if(v)try{return L.apply(r,w.querySelectorAll(v)),r}catch(e){}finally{u===x&&t.removeAttribute("id")}}}return l(e.replace(B,"$1"),t,r,o)}function ie(){var e=[];return function t(n,o){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function ae(e){return e[x]=!0,e}function se(e){var t=f.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function le(e,t){for(var n=e.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=t}function ce(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||M)-(~e.sourceIndex||M);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ue(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function de(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function pe(e){return ae((function(t){return t=+t,ae((function(n,r){for(var o,i=e([],n.length,t),a=i.length;a--;)n[o=i[a]]&&(n[o]=!(r[o]=n[o]))}))}))}function fe(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},i=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},p=oe.setDocument=function(e){var t,o,a=e?e.ownerDocument||e:C;return a!==f&&9===a.nodeType&&a.documentElement?(h=(f=a).documentElement,m=!i(f),(o=f.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",re,!1):o.attachEvent&&o.attachEvent("onunload",re)),n.attributes=se((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=se((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Z.test(f.getElementsByClassName),n.getById=se((function(e){return h.appendChild(e).id=x,!f.getElementsByName||!f.getElementsByName(x).length})),n.getById?(r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}},r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}}):(delete r.find.ID,r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},y=[],g=[],(n.qsa=Z.test(f.querySelectorAll))&&(se((function(e){h.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+$+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+$+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+x+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||g.push(".#.+[+~]")})),se((function(e){var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+$+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")}))),(n.matchesSelector=Z.test(v=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&se((function(e){n.disconnectedMatch=v.call(e,"div"),v.call(e,"[s!='']:x"),y.push("!=",H)})),g=g.length&&new RegExp(g.join("|")),y=y.length&&new RegExp(y.join("|")),t=Z.test(h.compareDocumentPosition),b=t||Z.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},k=t?function(e,t){if(e===t)return d=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===f||e.ownerDocument===C&&b(C,e)?-1:t===f||t.ownerDocument===C&&b(C,t)?1:u?O(u,e)-O(u,t):0:4&r?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,a=[e],s=[t];if(!o||!i)return e===f?-1:t===f?1:o?-1:i?1:u?O(u,e)-O(u,t):0;if(o===i)return ce(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?ce(a[r],s[r]):a[r]===C?-1:s[r]===C?1:0},f):f},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==f&&p(e),t=t.replace(V,"='$1']"),n.matchesSelector&&m&&!S[t+" "]&&(!y||!y.test(t))&&(!g||!g.test(t)))try{var r=v.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return oe(t,f,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==f&&p(e),b(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==f&&p(e);var o=r.attrHandle[t.toLowerCase()],i=o&&A.call(r.attrHandle,t.toLowerCase())?o(e,t,!m):void 0;return void 0!==i?i:n.attributes||!m?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,r=[],o=0,i=0;if(d=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(k),d){for(;t=e[i++];)t===e[i]&&(o=r.push(i));for(;o--;)e.splice(r[o],1)}return u=null,e},o=oe.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(r=oe.selectors={cacheLength:50,createPseudo:ae,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return X.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&G.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=T[e+" "];return t||(t=new RegExp("(^|"+$+")"+e+"("+$+"|$)"))&&T(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var o=oe.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(W," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,p,f,h,m=i!==a?"nextSibling":"previousSibling",g=t.parentNode,y=s&&t.nodeName.toLowerCase(),v=!l&&!s,b=!1;if(g){if(i){for(;m;){for(p=t;p=p[m];)if(s?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&v){for(b=(f=(c=(u=(d=(p=g)[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===w&&c[1])&&c[2],p=f&&g.childNodes[f];p=++f&&p&&p[m]||(b=f=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){u[e]=[w,f,b];break}}else if(v&&(b=f=(c=(u=(d=(p=t)[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===w&&c[1]),!1===b)for(;(p=++f&&p&&p[m]||(b=f=0)||h.pop())&&((s?p.nodeName.toLowerCase()!==y:1!==p.nodeType)||!++b||(v&&((u=(d=p[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]=[w,b]),p!==t)););return(b-=o)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,o=r.pseudos[e]||r.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return o[x]?o(t):o.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ae((function(e,n){for(var r,i=o(e,t),a=i.length;a--;)e[r=O(e,i[a])]=!(n[r]=i[a])})):function(e){return o(e,0,n)}):o}},pseudos:{not:ae((function(e){var t=[],n=[],r=s(e.replace(B,"$1"));return r[x]?ae((function(e,t,n,o){for(var i,a=r(e,null,o,[]),s=e.length;s--;)(i=a[s])&&(e[s]=!(t[s]=i))})):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}})),has:ae((function(e){return function(t){return oe(e,t).length>0}})),contains:ae((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}})),lang:ae((function(e){return z.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return!1===e.disabled},disabled:function(e){return!0===e.disabled},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return Y.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:pe((function(){return[0]})),last:pe((function(e,t){return[t-1]})),eq:pe((function(e,t,n){return[n<0?n+t:n]})),even:pe((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:pe((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:pe((function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e})),gt:pe((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=ue(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=de(t);function he(){}function me(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ge(e,t,n){var r=t.dir,o=n&&"parentNode"===r,i=E++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||o)return e(t,n,i)}:function(t,n,a){var s,l,c,u=[w,i];if(a){for(;t=t[r];)if((1===t.nodeType||o)&&e(t,n,a))return!0}else for(;t=t[r];)if(1===t.nodeType||o){if((s=(l=(c=t[x]||(t[x]={}))[t.uniqueID]||(c[t.uniqueID]={}))[r])&&s[0]===w&&s[1]===i)return u[2]=s[2];if(l[r]=u,u[2]=e(t,n,a))return!0}}}function ye(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function ve(e,t,n,r,o){for(var i,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(i=e[s])&&(n&&!n(i,r,o)||(a.push(i),c&&t.push(s)));return a}function be(e,t,n,r,o,i){return r&&!r[x]&&(r=be(r)),o&&!o[x]&&(o=be(o,i)),ae((function(i,a,s,l){var c,u,d,p=[],f=[],h=a.length,m=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)oe(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),g=!e||!i&&t?m:ve(m,p,e,s,l),y=n?o||(i?e:h||r)?[]:a:g;if(n&&n(g,y,s,l),r)for(c=ve(y,f),r(c,[],s,l),u=c.length;u--;)(d=c[u])&&(y[f[u]]=!(g[f[u]]=d));if(i){if(o||e){if(o){for(c=[],u=y.length;u--;)(d=y[u])&&c.push(g[u]=d);o(null,y=[],c,l)}for(u=y.length;u--;)(d=y[u])&&(c=o?O(i,d):p[u])>-1&&(i[c]=!(a[c]=d))}}else y=ve(y===a?y.splice(h,y.length):y),o?o(null,a,y,l):L.apply(a,y)}))}function xe(e){for(var t,n,o,i=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],l=a?1:0,u=ge((function(e){return e===t}),s,!0),d=ge((function(e){return O(t,e)>-1}),s,!0),p=[function(e,n,r){var o=!a&&(r||n!==c)||((t=n).nodeType?u(e,n,r):d(e,n,r));return t=null,o}];l<i;l++)if(n=r.relative[e[l].type])p=[ge(ye(p),n)];else{if((n=r.filter[e[l].type].apply(null,e[l].matches))[x]){for(o=++l;o<i&&!r.relative[e[o].type];o++);return be(l>1&&ye(p),l>1&&me(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(B,"$1"),n,l<o&&xe(e.slice(l,o)),o<i&&xe(e=e.slice(o)),o<i&&me(e))}p.push(n)}return ye(p)}return he.prototype=r.filters=r.pseudos,r.setFilters=new he,a=oe.tokenize=function(e,t){var n,o,i,a,s,l,c,u=N[e+" "];if(u)return t?0:u.slice(0);for(s=e,l=[],c=r.preFilter;s;){for(a in n&&!(o=U.exec(s))||(o&&(s=s.slice(o[0].length)||s),l.push(i=[])),n=!1,(o=_.exec(s))&&(n=o.shift(),i.push({value:n,type:o[0].replace(B," ")}),s=s.slice(n.length)),r.filter)!(o=X[a].exec(s))||c[a]&&!(o=c[a](o))||(n=o.shift(),i.push({value:n,type:a,matches:o}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):N(e,l).slice(0)},s=oe.compile=function(e,t){var n,o=[],i=[],s=S[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=xe(t[n]))[x]?o.push(s):i.push(s);(s=S(e,function(e,t){var n=t.length>0,o=e.length>0,i=function(i,a,s,l,u){var d,h,g,y=0,v="0",b=i&&[],x=[],C=c,E=i||o&&r.find.TAG("*",u),T=w+=null==C?1:Math.random()||.1,N=E.length;for(u&&(c=a===f||a||u);v!==N&&null!=(d=E[v]);v++){if(o&&d){for(h=0,a||d.ownerDocument===f||(p(d),s=!m);g=e[h++];)if(g(d,a||f,s)){l.push(d);break}u&&(w=T)}n&&((d=!g&&d)&&y--,i&&b.push(d))}if(y+=v,n&&v!==y){for(h=0;g=t[h++];)g(b,x,a,s);if(i){if(y>0)for(;v--;)b[v]||x[v]||(x[v]=I.call(l));x=ve(x)}L.apply(l,x),u&&!i&&x.length>0&&y+t.length>1&&oe.uniqueSort(l)}return u&&(w=T,c=C),b};return n?ae(i):i}(i,o))).selector=e}return s},l=oe.select=function(e,t,o,i){var l,c,u,d,p,f="function"==typeof e&&e,h=!i&&a(e=f.selector||e);if(o=o||[],1===h.length){if((c=h[0]=h[0].slice(0)).length>2&&"ID"===(u=c[0]).type&&n.getById&&9===t.nodeType&&m&&r.relative[c[1].type]){if(!(t=(r.find.ID(u.matches[0].replace(te,ne),t)||[])[0]))return o;f&&(t=t.parentNode),e=e.slice(c.shift().value.length)}for(l=X.needsContext.test(e)?0:c.length;l--&&(u=c[l],!r.relative[d=u.type]);)if((p=r.find[d])&&(i=p(u.matches[0].replace(te,ne),K.test(c[0].type)&&fe(t.parentNode)||t))){if(c.splice(l,1),!(e=i.length&&me(c)))return L.apply(o,i),o;break}}return(f||s(e,h))(i,t,!m,o,!t||K.test(e)&&fe(t.parentNode)||t),o},n.sortStable=x.split("").sort(k).join("")===x,n.detectDuplicates=!!d,p(),n.sortDetached=se((function(e){return 1&e.compareDocumentPosition(f.createElement("div"))})),se((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||le("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&se((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||le("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),se((function(e){return null==e.getAttribute("disabled")}))||le(R,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),oe}(n);m.find=C,m.expr=C.selectors,m.expr[":"]=m.expr.pseudos,m.uniqueSort=m.unique=C.uniqueSort,m.text=C.getText,m.isXMLDoc=C.isXML,m.contains=C.contains;var w=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&m(e).is(n))break;r.push(e)}return r},E=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},T=m.expr.match.needsContext,N=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,S=/^.[^:#\[\.,]*$/;function k(e,t,n){if(m.isFunction(t))return m.grep(e,(function(e,r){return!!t.call(e,r,e)!==n}));if(t.nodeType)return m.grep(e,(function(e){return e===t!==n}));if("string"==typeof t){if(S.test(t))return m.filter(t,e,n);t=m.filter(t,e)}return m.grep(e,(function(e){return u.call(t,e)>-1!==n}))}m.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?m.find.matchesSelector(r,e)?[r]:[]:m.find.matches(e,m.grep(t,(function(e){return 1===e.nodeType})))},m.fn.extend({find:function(e){var t,n=this.length,r=[],o=this;if("string"!=typeof e)return this.pushStack(m(e).filter((function(){for(t=0;t<n;t++)if(m.contains(o[t],this))return!0})));for(t=0;t<n;t++)m.find(e,o[t],r);return(r=this.pushStack(n>1?m.unique(r):r)).selector=this.selector?this.selector+" "+e:e,r},filter:function(e){return this.pushStack(k(this,e||[],!1))},not:function(e){return this.pushStack(k(this,e||[],!0))},is:function(e){return!!k(this,"string"==typeof e&&T.test(e)?m(e):e||[],!1).length}});var M,A=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(m.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||M,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:A.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof m?t[0]:t,m.merge(this,m.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:a,!0)),N.test(r[1])&&m.isPlainObject(t))for(r in t)m.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=a.getElementById(r[2]))&&o.parentNode&&(this.length=1,this[0]=o),this.context=a,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):m.isFunction(e)?void 0!==n.ready?n.ready(e):e(m):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),m.makeArray(e,this))}).prototype=m.fn,M=m(a);var D=/^(?:parents|prev(?:Until|All))/,I={children:!0,contents:!0,next:!0,prev:!0};function j(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}m.fn.extend({has:function(e){var t=m(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(m.contains(this,t[e]))return!0}))},closest:function(e,t){for(var n,r=0,o=this.length,i=[],a=T.test(e)||"string"!=typeof e?m(e,t||this.context):0;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&m.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?m.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?u.call(m(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(m.uniqueSort(m.merge(this.get(),m(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),m.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return w(e,"parentNode")},parentsUntil:function(e,t,n){return w(e,"parentNode",n)},next:function(e){return j(e,"nextSibling")},prev:function(e){return j(e,"previousSibling")},nextAll:function(e){return w(e,"nextSibling")},prevAll:function(e){return w(e,"previousSibling")},nextUntil:function(e,t,n){return w(e,"nextSibling",n)},prevUntil:function(e,t,n){return w(e,"previousSibling",n)},siblings:function(e){return E((e.parentNode||{}).firstChild,e)},children:function(e){return E(e.firstChild)},contents:function(e){return e.contentDocument||m.merge([],e.childNodes)}},(function(e,t){m.fn[e]=function(n,r){var o=m.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=m.filter(r,o)),this.length>1&&(I[e]||m.uniqueSort(o),D.test(e)&&o.reverse()),this.pushStack(o)}}));var L,q=/\S+/g;function O(){a.removeEventListener("DOMContentLoaded",O),n.removeEventListener("load",O),m.ready()}m.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return m.each(e.match(q)||[],(function(e,n){t[n]=!0})),t}(e):m.extend({},e);var t,n,r,o,i=[],a=[],s=-1,l=function(){for(o=e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<i.length;)!1===i[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:"")},c={add:function(){return i&&(n&&!t&&(s=i.length-1,a.push(n)),function t(n){m.each(n,(function(n,r){m.isFunction(r)?e.unique&&c.has(r)||i.push(r):r&&r.length&&"string"!==m.type(r)&&t(r)}))}(arguments),n&&!t&&l()),this},remove:function(){return m.each(arguments,(function(e,t){for(var n;(n=m.inArray(t,i,n))>-1;)i.splice(n,1),n<=s&&s--})),this},has:function(e){return e?m.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=a=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=a=[],n||(i=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},m.extend({Deferred:function(e){var t=[["resolve","done",m.Callbacks("once memory"),"resolved"],["reject","fail",m.Callbacks("once memory"),"rejected"],["notify","progress",m.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},then:function(){var e=arguments;return m.Deferred((function(n){m.each(t,(function(t,i){var a=m.isFunction(e[t])&&e[t];o[i[1]]((function(){var e=a&&a.apply(this,arguments);e&&m.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this===r?n.promise():this,a?[e]:arguments)}))})),e=null})).promise()},promise:function(e){return null!=e?m.extend(e,r):r}},o={};return r.pipe=r.then,m.each(t,(function(e,i){var a=i[2],s=i[3];r[i[1]]=a.add,s&&a.add((function(){n=s}),t[1^e][2].disable,t[2][2].lock),o[i[0]]=function(){return o[i[0]+"With"](this===o?r:this,arguments),this},o[i[0]+"With"]=a.fireWith})),r.promise(o),e&&e.call(o,o),o},when:function(e){var t,n,r,o=0,i=s.call(arguments),a=i.length,l=1!==a||e&&m.isFunction(e.promise)?a:0,c=1===l?e:m.Deferred(),u=function(e,n,r){return function(o){n[e]=this,r[e]=arguments.length>1?s.call(arguments):o,r===t?c.notifyWith(n,r):--l||c.resolveWith(n,r)}};if(a>1)for(t=new Array(a),n=new Array(a),r=new Array(a);o<a;o++)i[o]&&m.isFunction(i[o].promise)?i[o].promise().progress(u(o,n,t)).done(u(o,r,i)).fail(c.reject):--l;return l||c.resolveWith(r,i),c.promise()}}),m.fn.ready=function(e){return m.ready.promise().done(e),this},m.extend({isReady:!1,readyWait:1,holdReady:function(e){e?m.readyWait++:m.ready(!0)},ready:function(e){(!0===e?--m.readyWait:m.isReady)||(m.isReady=!0,!0!==e&&--m.readyWait>0||(L.resolveWith(a,[m]),m.fn.triggerHandler&&(m(a).triggerHandler("ready"),m(a).off("ready"))))}}),m.ready.promise=function(e){return L||(L=m.Deferred(),"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(m.ready):(a.addEventListener("DOMContentLoaded",O),n.addEventListener("load",O))),L.promise(e)},m.ready.promise();var R=function(e,t,n,r,o,i,a){var s=0,l=e.length,c=null==n;if("object"===m.type(n))for(s in o=!0,n)R(e,t,s,n[s],!0,i,a);else if(void 0!==r&&(o=!0,m.isFunction(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(m(e),n)})),t))for(;s<l;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return o?e:c?t.call(e):l?t(e[0],n):i},$=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function F(){this.expando=m.expando+F.uid++}F.uid=1,F.prototype={register:function(e,t){var n=t||{};return e.nodeType?e[this.expando]=n:Object.defineProperty(e,this.expando,{value:n,writable:!0,configurable:!0}),e[this.expando]},cache:function(e){if(!$(e))return{};var t=e[this.expando];return t||(t={},$(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[t]=n;else for(r in t)o[r]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][t]},access:function(e,t,n){var r;return void 0===t||t&&"string"==typeof t&&void 0===n?void 0!==(r=this.get(e,t))?r:this.get(e,m.camelCase(t)):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r,o,i=e[this.expando];if(void 0!==i){if(void 0===t)this.register(e);else{m.isArray(t)?r=t.concat(t.map(m.camelCase)):(o=m.camelCase(t),r=t in i?[t,o]:(r=o)in i?[r]:r.match(q)||[]),n=r.length;for(;n--;)delete i[r[n]]}(void 0===t||m.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!m.isEmptyObject(t)}};var P=new F,H=new F,W=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,B=/[A-Z]/g;function U(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(B,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:W.test(n)?m.parseJSON(n):n)}catch(e){}H.set(e,t,n)}else n=void 0;return n}m.extend({hasData:function(e){return H.hasData(e)||P.hasData(e)},data:function(e,t,n){return H.access(e,t,n)},removeData:function(e,t){H.remove(e,t)},_data:function(e,t,n){return P.access(e,t,n)},_removeData:function(e,t){P.remove(e,t)}}),m.fn.extend({data:function(e,t){var n,r,o,i=this[0],a=i&&i.attributes;if(void 0===e){if(this.length&&(o=H.get(i),1===i.nodeType&&!P.get(i,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=m.camelCase(r.slice(5)),U(i,r,o[r]));P.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each((function(){H.set(this,e)})):R(this,(function(t){var n,r;if(i&&void 0===t)return void 0!==(n=H.get(i,e)||H.get(i,e.replace(B,"-$&").toLowerCase()))?n:(r=m.camelCase(e),void 0!==(n=H.get(i,r))?n:void 0!==(n=U(i,r,void 0))?n:void 0);r=m.camelCase(e),this.each((function(){var n=H.get(this,r);H.set(this,r,t),e.indexOf("-")>-1&&void 0!==n&&H.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){H.remove(this,e)}))}}),m.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=P.get(e,t),n&&(!r||m.isArray(n)?r=P.access(e,t,m.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=m.queue(e,t),r=n.length,o=n.shift(),i=m._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,(function(){m.dequeue(e,t)}),i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return P.get(e,n)||P.access(e,n,{empty:m.Callbacks("once memory").add((function(){P.remove(e,[t+"queue",n])}))})}}),m.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?m.queue(this[0],e):void 0===t?this:this.each((function(){var n=m.queue(this,e,t);m._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&m.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){m.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=m.Deferred(),i=this,a=this.length,s=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=P.get(i[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),o.promise(t)}});var _=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,V=new RegExp("^(?:([+-])=|)("+_+")([a-z%]*)$","i"),G=["Top","Right","Bottom","Left"],z=function(e,t){return e=t||e,"none"===m.css(e,"display")||!m.contains(e.ownerDocument,e)};function X(e,t,n,r){var o,i=1,a=20,s=r?function(){return r.cur()}:function(){return m.css(e,t,"")},l=s(),c=n&&n[3]||(m.cssNumber[t]?"":"px"),u=(m.cssNumber[t]||"px"!==c&&+l)&&V.exec(m.css(e,t));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do{u/=i=i||".5",m.style(e,t,u+c)}while(i!==(i=s()/l)&&1!==i&&--a)}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=u,r.end=o)),o}var Y=/^(?:checkbox|radio)$/i,Q=/<([\w:-]+)/,Z=/^$|\/(?:java|ecma)script/i,J={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function K(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&m.nodeName(e,t)?m.merge([e],n):n}function ee(e,t){for(var n=0,r=e.length;n<r;n++)P.set(e[n],"globalEval",!t||P.get(t[n],"globalEval"))}J.optgroup=J.option,J.tbody=J.tfoot=J.colgroup=J.caption=J.thead,J.th=J.td;var te,ne,re=/<|&#?\w+;/;function oe(e,t,n,r,o){for(var i,a,s,l,c,u,d=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((i=e[f])||0===i)if("object"===m.type(i))m.merge(p,i.nodeType?[i]:i);else if(re.test(i)){for(a=a||d.appendChild(t.createElement("div")),s=(Q.exec(i)||["",""])[1].toLowerCase(),l=J[s]||J._default,a.innerHTML=l[1]+m.htmlPrefilter(i)+l[2],u=l[0];u--;)a=a.lastChild;m.merge(p,a.childNodes),(a=d.firstChild).textContent=""}else p.push(t.createTextNode(i));for(d.textContent="",f=0;i=p[f++];)if(r&&m.inArray(i,r)>-1)o&&o.push(i);else if(c=m.contains(i.ownerDocument,i),a=K(d.appendChild(i),"script"),c&&ee(a),n)for(u=0;i=a[u++];)Z.test(i.type||"")&&n.push(i);return d}te=a.createDocumentFragment().appendChild(a.createElement("div")),(ne=a.createElement("input")).setAttribute("type","radio"),ne.setAttribute("checked","checked"),ne.setAttribute("name","t"),te.appendChild(ne),h.checkClone=te.cloneNode(!0).cloneNode(!0).lastChild.checked,te.innerHTML="<textarea>x</textarea>",h.noCloneChecked=!!te.cloneNode(!0).lastChild.defaultValue;var ie=/^key/,ae=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,se=/^([^.]*)(?:\.(.+)|)/;function le(){return!0}function ce(){return!1}function ue(){try{return a.activeElement}catch(e){}}function de(e,t,n,r,o,i){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)de(e,s,n,r,t[s],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=ce;else if(!o)return e;return 1===i&&(a=o,(o=function(e){return m().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=m.guid++)),e.each((function(){m.event.add(this,t,o,r,n)}))}m.event={global:{},add:function(e,t,n,r,o){var i,a,s,l,c,u,d,p,f,h,g,y=P.get(e);if(y)for(n.handler&&(n=(i=n).handler,o=i.selector),n.guid||(n.guid=m.guid++),(l=y.events)||(l=y.events={}),(a=y.handle)||(a=y.handle=function(t){return void 0!==m&&m.event.triggered!==t.type?m.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(q)||[""]).length;c--;)f=g=(s=se.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),f&&(d=m.event.special[f]||{},f=(o?d.delegateType:d.bindType)||f,d=m.event.special[f]||{},u=m.extend({type:f,origType:g,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&m.expr.match.needsContext.test(o),namespace:h.join(".")},i),(p=l[f])||((p=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(f,a)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,u):p.push(u),m.event.global[f]=!0)},remove:function(e,t,n,r,o){var i,a,s,l,c,u,d,p,f,h,g,y=P.hasData(e)&&P.get(e);if(y&&(l=y.events)){for(c=(t=(t||"").match(q)||[""]).length;c--;)if(f=g=(s=se.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),f){for(d=m.event.special[f]||{},p=l[f=(r?d.delegateType:d.bindType)||f]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=p.length;i--;)u=p[i],!o&&g!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||r&&r!==u.selector&&("**"!==r||!u.selector)||(p.splice(i,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));a&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,y.handle)||m.removeEvent(e,f,y.handle),delete l[f])}else for(f in l)m.event.remove(e,f+t[c],n,r,!0);m.isEmptyObject(l)&&P.remove(e,"handle events")}},dispatch:function(e){e=m.event.fix(e);var t,n,r,o,i,a=[],l=s.call(arguments),c=(P.get(this,"events")||{})[e.type]||[],u=m.event.special[e.type]||{};if(l[0]=e,e.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,e)){for(a=m.event.handlers.call(this,e,c),t=0;(o=a[t++])&&!e.isPropagationStopped();)for(e.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(i.namespace)||(e.handleObj=i,e.data=i.data,void 0!==(r=((m.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,l))&&!1===(e.result=r)&&(e.preventDefault(),e.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,o,i,a=[],s=t.delegateCount,l=e.target;if(s&&l.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==e.type)){for(r=[],n=0;n<s;n++)void 0===r[o=(i=t[n]).selector+" "]&&(r[o]=i.needsContext?m(o,this).index(l)>-1:m.find(o,this,null,[l]).length),r[o]&&r.push(i);r.length&&a.push({elem:l,handlers:r})}return s<t.length&&a.push({elem:this,handlers:t.slice(s)}),a},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,o,i=t.button;return null==e.pageX&&null!=t.clientX&&(r=(n=e.target.ownerDocument||a).documentElement,o=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||o&&o.scrollLeft||0)-(r&&r.clientLeft||o&&o.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||o&&o.scrollTop||0)-(r&&r.clientTop||o&&o.clientTop||0)),e.which||void 0===i||(e.which=1&i?1:2&i?3:4&i?2:0),e}},fix:function(e){if(e[m.expando])return e;var t,n,r,o=e.type,i=e,s=this.fixHooks[o];for(s||(this.fixHooks[o]=s=ae.test(o)?this.mouseHooks:ie.test(o)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new m.Event(i),t=r.length;t--;)e[n=r[t]]=i[n];return e.target||(e.target=a),3===e.target.nodeType&&(e.target=e.target.parentNode),s.filter?s.filter(e,i):e},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==ue()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===ue()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&m.nodeName(this,"input"))return this.click(),!1},_default:function(e){return m.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},m.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},m.Event=function(e,t){if(!(this instanceof m.Event))return new m.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?le:ce):this.type=e,t&&m.extend(this,t),this.timeStamp=e&&e.timeStamp||m.now(),this[m.expando]=!0},m.Event.prototype={constructor:m.Event,isDefaultPrevented:ce,isPropagationStopped:ce,isImmediatePropagationStopped:ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=le,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=le,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=le,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},m.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){m.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,o=e.relatedTarget,i=e.handleObj;return o&&(o===r||m.contains(r,o))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),m.fn.extend({on:function(e,t,n,r){return de(this,e,t,n,r)},one:function(e,t,n,r){return de(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,m(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ce),this.each((function(){m.event.remove(this,e,n,t)}))}});var pe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,fe=/<script|<style|<link/i,he=/checked\s*(?:[^=]|=\s*.checked.)/i,me=/^true\/(.*)/,ge=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function ye(e,t){return m.nodeName(e,"table")&&m.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function ve(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function be(e){var t=me.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function xe(e,t){var n,r,o,i,a,s,l,c;if(1===t.nodeType){if(P.hasData(e)&&(i=P.access(e),a=P.set(t,i),c=i.events))for(o in delete a.handle,a.events={},c)for(n=0,r=c[o].length;n<r;n++)m.event.add(t,o,c[o][n]);H.hasData(e)&&(s=H.access(e),l=m.extend({},s),H.set(t,l))}}function Ce(e,t,n,r){t=l.apply([],t);var o,i,a,s,c,u,d=0,p=e.length,f=p-1,g=t[0],y=m.isFunction(g);if(y||p>1&&"string"==typeof g&&!h.checkClone&&he.test(g))return e.each((function(o){var i=e.eq(o);y&&(t[0]=g.call(this,o,i.html())),Ce(i,t,n,r)}));if(p&&(i=(o=oe(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(s=(a=m.map(K(o,"script"),ve)).length;d<p;d++)c=o,d!==f&&(c=m.clone(c,!0,!0),s&&m.merge(a,K(c,"script"))),n.call(e[d],c,d);if(s)for(u=a[a.length-1].ownerDocument,m.map(a,be),d=0;d<s;d++)c=a[d],Z.test(c.type||"")&&!P.access(c,"globalEval")&&m.contains(u,c)&&(c.src?m._evalUrl&&m._evalUrl(c.src):m.globalEval(c.textContent.replace(ge,"")))}return e}function we(e,t,n){for(var r,o=t?m.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||m.cleanData(K(r)),r.parentNode&&(n&&m.contains(r.ownerDocument,r)&&ee(K(r,"script")),r.parentNode.removeChild(r));return e}m.extend({htmlPrefilter:function(e){return e.replace(pe,"<$1></$2>")},clone:function(e,t,n){var r,o,i,a,s,l,c,u=e.cloneNode(!0),d=m.contains(e.ownerDocument,e);if(!(h.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||m.isXMLDoc(e)))for(a=K(u),r=0,o=(i=K(e)).length;r<o;r++)s=i[r],l=a[r],c=void 0,"input"===(c=l.nodeName.toLowerCase())&&Y.test(s.type)?l.checked=s.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=s.defaultValue);if(t)if(n)for(i=i||K(e),a=a||K(u),r=0,o=i.length;r<o;r++)xe(i[r],a[r]);else xe(e,u);return(a=K(u,"script")).length>0&&ee(a,!d&&K(e,"script")),u},cleanData:function(e){for(var t,n,r,o=m.event.special,i=0;void 0!==(n=e[i]);i++)if($(n)){if(t=n[P.expando]){if(t.events)for(r in t.events)o[r]?m.event.remove(n,r):m.removeEvent(n,r,t.handle);n[P.expando]=void 0}n[H.expando]&&(n[H.expando]=void 0)}}}),m.fn.extend({domManip:Ce,detach:function(e){return we(this,e,!0)},remove:function(e){return we(this,e)},text:function(e){return R(this,(function(e){return void 0===e?m.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ce(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||ye(this,e).appendChild(e)}))},prepend:function(){return Ce(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=ye(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Ce(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ce(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(m.cleanData(K(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return m.clone(this,e,t)}))},html:function(e){return R(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!fe.test(e)&&!J[(Q.exec(e)||["",""])[1].toLowerCase()]){e=m.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(m.cleanData(K(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ce(this,arguments,(function(t){var n=this.parentNode;m.inArray(this,e)<0&&(m.cleanData(K(this)),n&&n.replaceChild(t,this))}),e)}}),m.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){m.fn[e]=function(e){for(var n,r=[],o=m(e),i=o.length-1,a=0;a<=i;a++)n=a===i?this:this.clone(!0),m(o[a])[t](n),c.apply(r,n.get());return this.pushStack(r)}}));var Ee,Te={HTML:"block",BODY:"block"};function Ne(e,t){var n=m(t.createElement(e)).appendTo(t.body),r=m.css(n[0],"display");return n.detach(),r}function Se(e){var t=a,n=Te[e];return n||("none"!==(n=Ne(e,t))&&n||((t=(Ee=(Ee||m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement))[0].contentDocument).write(),t.close(),n=Ne(e,t),Ee.detach()),Te[e]=n),n}var ke=/^margin/,Me=new RegExp("^("+_+")(?!px)[a-z%]+$","i"),Ae=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},De=function(e,t,n,r){var o,i,a={};for(i in t)a[i]=e.style[i],e.style[i]=t[i];for(i in o=n.apply(e,r||[]),t)e.style[i]=a[i];return o},Ie=a.documentElement;function je(e,t,n){var r,o,i,a,s=e.style;return""!==(a=(n=n||Ae(e))?n.getPropertyValue(t)||n[t]:void 0)&&void 0!==a||m.contains(e.ownerDocument,e)||(a=m.style(e,t)),n&&!h.pixelMarginRight()&&Me.test(a)&&ke.test(t)&&(r=s.width,o=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=o,s.maxWidth=i),void 0!==a?a+"":a}function Le(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){var e,t,r,o,i=a.createElement("div"),s=a.createElement("div");function l(){s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Ie.appendChild(i);var a=n.getComputedStyle(s);e="1%"!==a.top,o="2px"===a.marginLeft,t="4px"===a.width,s.style.marginRight="50%",r="4px"===a.marginRight,Ie.removeChild(i)}s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===s.style.backgroundClip,i.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",i.appendChild(s),m.extend(h,{pixelPosition:function(){return l(),e},boxSizingReliable:function(){return null==t&&l(),t},pixelMarginRight:function(){return null==t&&l(),r},reliableMarginLeft:function(){return null==t&&l(),o},reliableMarginRight:function(){var e,t=s.appendChild(a.createElement("div"));return t.style.cssText=s.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",t.style.marginRight=t.style.width="0",s.style.width="1px",Ie.appendChild(i),e=!parseFloat(n.getComputedStyle(t).marginRight),Ie.removeChild(i),s.removeChild(t),e}}))}();var qe=/^(none|table(?!-c[ea]).+)/,Oe={position:"absolute",visibility:"hidden",display:"block"},Re={letterSpacing:"0",fontWeight:"400"},$e=["Webkit","O","Moz","ms"],Fe=a.createElement("div").style;function Pe(e){if(e in Fe)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=$e.length;n--;)if((e=$e[n]+t)in Fe)return e}function He(e,t,n){var r=V.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function We(e,t,n,r,o){for(var i=n===(r?"border":"content")?4:"width"===t?1:0,a=0;i<4;i+=2)"margin"===n&&(a+=m.css(e,n+G[i],!0,o)),r?("content"===n&&(a-=m.css(e,"padding"+G[i],!0,o)),"margin"!==n&&(a-=m.css(e,"border"+G[i]+"Width",!0,o))):(a+=m.css(e,"padding"+G[i],!0,o),"padding"!==n&&(a+=m.css(e,"border"+G[i]+"Width",!0,o)));return a}function Be(e,t,n){var r=!0,o="width"===t?e.offsetWidth:e.offsetHeight,i=Ae(e),a="border-box"===m.css(e,"boxSizing",!1,i);if(o<=0||null==o){if(((o=je(e,t,i))<0||null==o)&&(o=e.style[t]),Me.test(o))return o;r=a&&(h.boxSizingReliable()||o===e.style[t]),o=parseFloat(o)||0}return o+We(e,t,n||(a?"border":"content"),r,i)+"px"}function Ue(e,t){for(var n,r,o,i=[],a=0,s=e.length;a<s;a++)(r=e[a]).style&&(i[a]=P.get(r,"olddisplay"),n=r.style.display,t?(i[a]||"none"!==n||(r.style.display=""),""===r.style.display&&z(r)&&(i[a]=P.access(r,"olddisplay",Se(r.nodeName)))):(o=z(r),"none"===n&&o||P.set(r,"olddisplay",o?n:m.css(r,"display"))));for(a=0;a<s;a++)(r=e[a]).style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?i[a]||"":"none"));return e}function _e(e,t,n,r,o){return new _e.prototype.init(e,t,n,r,o)}m.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=je(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,a,s=m.camelCase(t),l=e.style;if(t=m.cssProps[s]||(m.cssProps[s]=Pe(s)||s),a=m.cssHooks[t]||m.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,r))?o:l[t];"string"==(i=typeof n)&&(o=V.exec(n))&&o[1]&&(n=X(e,t,o),i="number"),null!=n&&n==n&&("number"===i&&(n+=o&&o[3]||(m.cssNumber[s]?"":"px")),h.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(l[t]=n))}},css:function(e,t,n,r){var o,i,a,s=m.camelCase(t);return t=m.cssProps[s]||(m.cssProps[s]=Pe(s)||s),(a=m.cssHooks[t]||m.cssHooks[s])&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=je(e,t,r)),"normal"===o&&t in Re&&(o=Re[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),m.each(["height","width"],(function(e,t){m.cssHooks[t]={get:function(e,n,r){if(n)return qe.test(m.css(e,"display"))&&0===e.offsetWidth?De(e,Oe,(function(){return Be(e,t,r)})):Be(e,t,r)},set:function(e,n,r){var o,i=r&&Ae(e),a=r&&We(e,t,r,"border-box"===m.css(e,"boxSizing",!1,i),i);return a&&(o=V.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=m.css(e,t)),He(0,n,a)}}})),m.cssHooks.marginLeft=Le(h.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(je(e,"marginLeft"))||e.getBoundingClientRect().left-De(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),m.cssHooks.marginRight=Le(h.reliableMarginRight,(function(e,t){if(t)return De(e,{display:"inline-block"},je,[e,"marginRight"])})),m.each({margin:"",padding:"",border:"Width"},(function(e,t){m.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+G[r]+t]=i[r]||i[r-2]||i[0];return o}},ke.test(e)||(m.cssHooks[e+t].set=He)})),m.fn.extend({css:function(e,t){return R(this,(function(e,t,n){var r,o,i={},a=0;if(m.isArray(t)){for(r=Ae(e),o=t.length;a<o;a++)i[t[a]]=m.css(e,t[a],!1,r);return i}return void 0!==n?m.style(e,t,n):m.css(e,t)}),e,t,arguments.length>1)},show:function(){return Ue(this,!0)},hide:function(){return Ue(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){z(this)?m(this).show():m(this).hide()}))}}),m.Tween=_e,_e.prototype={constructor:_e,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||m.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(m.cssNumber[n]?"":"px")},cur:function(){var e=_e.propHooks[this.prop];return e&&e.get?e.get(this):_e.propHooks._default.get(this)},run:function(e){var t,n=_e.propHooks[this.prop];return this.options.duration?this.pos=t=m.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):_e.propHooks._default.set(this),this}},_e.prototype.init.prototype=_e.prototype,_e.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=m.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){m.fx.step[e.prop]?m.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[m.cssProps[e.prop]]&&!m.cssHooks[e.prop]?e.elem[e.prop]=e.now:m.style(e.elem,e.prop,e.now+e.unit)}}},_e.propHooks.scrollTop=_e.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},m.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},m.fx=_e.prototype.init,m.fx.step={};var Ve,Ge,ze=/^(?:toggle|show|hide)$/,Xe=/queueHooks$/;function Ye(){return n.setTimeout((function(){Ve=void 0})),Ve=m.now()}function Qe(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=G[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function Ze(e,t,n){for(var r,o=(Je.tweeners[t]||[]).concat(Je.tweeners["*"]),i=0,a=o.length;i<a;i++)if(r=o[i].call(n,t,e))return r}function Je(e,t,n){var r,o,i=0,a=Je.prefilters.length,s=m.Deferred().always((function(){delete l.elem})),l=function(){if(o)return!1;for(var t=Ve||Ye(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),i=0,a=c.tweens.length;i<a;i++)c.tweens[i].run(r);return s.notifyWith(e,[c,r,n]),r<1&&a?n:(s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:m.extend({},t),opts:m.extend(!0,{specialEasing:{},easing:m.easing._default},n),originalProperties:t,originalOptions:n,startTime:Ve||Ye(),duration:n.duration,tweens:[],createTween:function(t,n){var r=m.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),u=c.props;for(function(e,t){var n,r,o,i,a;for(n in e)if(o=t[r=m.camelCase(n)],i=e[n],m.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(a=m.cssHooks[r])&&"expand"in a)for(n in i=a.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(u,c.opts.specialEasing);i<a;i++)if(r=Je.prefilters[i].call(c,e,u,c.opts))return m.isFunction(r.stop)&&(m._queueHooks(c.elem,c.opts.queue).stop=m.proxy(r.stop,r)),r;return m.map(u,Ze,c),m.isFunction(c.opts.start)&&c.opts.start.call(e,c),m.fx.timer(m.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}m.Animation=m.extend(Je,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return X(n.elem,e,V.exec(t),n),n}]},tweener:function(e,t){m.isFunction(e)?(t=e,e=["*"]):e=e.match(q);for(var n,r=0,o=e.length;r<o;r++)n=e[r],Je.tweeners[n]=Je.tweeners[n]||[],Je.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,a,s,l,c,u=this,d={},p=e.style,f=e.nodeType&&z(e),h=P.get(e,"fxshow");for(r in n.queue||(null==(s=m._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,l=s.empty.fire,s.empty.fire=function(){s.unqueued||l()}),s.unqueued++,u.always((function(){u.always((function(){s.unqueued--,m.queue(e,"fx").length||s.empty.fire()}))}))),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],"inline"===("none"===(c=m.css(e,"display"))?P.get(e,"olddisplay")||Se(e.nodeName):c)&&"none"===m.css(e,"float")&&(p.display="inline-block")),n.overflow&&(p.overflow="hidden",u.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),t)if(o=t[r],ze.exec(o)){if(delete t[r],i=i||"toggle"===o,o===(f?"hide":"show")){if("show"!==o||!h||void 0===h[r])continue;f=!0}d[r]=h&&h[r]||m.style(e,r)}else c=void 0;if(m.isEmptyObject(d))"inline"===("none"===c?Se(e.nodeName):c)&&(p.display=c);else for(r in h?"hidden"in h&&(f=h.hidden):h=P.access(e,"fxshow",{}),i&&(h.hidden=!f),f?m(e).show():u.done((function(){m(e).hide()})),u.done((function(){var t;for(t in P.remove(e,"fxshow"),d)m.style(e,t,d[t])})),d)a=Ze(f?h[r]:0,r,u),r in h||(h[r]=a.start,f&&(a.end=a.start,a.start="width"===r||"height"===r?1:0))}],prefilter:function(e,t){t?Je.prefilters.unshift(e):Je.prefilters.push(e)}}),m.speed=function(e,t,n){var r=e&&"object"==typeof e?m.extend({},e):{complete:n||!n&&t||m.isFunction(e)&&e,duration:e,easing:n&&t||t&&!m.isFunction(t)&&t};return r.duration=m.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in m.fx.speeds?m.fx.speeds[r.duration]:m.fx.speeds._default,null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){m.isFunction(r.old)&&r.old.call(this),r.queue&&m.dequeue(this,r.queue)},r},m.fn.extend({fadeTo:function(e,t,n,r){return this.filter(z).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=m.isEmptyObject(e),i=m.speed(t,n,r),a=function(){var t=Je(this,m.extend({},e),i);(o||P.get(this,"finish"))&&t.stop(!0)};return a.finish=a,o||!1===i.queue?this.each(a):this.queue(i.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each((function(){var t=!0,o=null!=e&&e+"queueHooks",i=m.timers,a=P.get(this);if(o)a[o]&&a[o].stop&&r(a[o]);else for(o in a)a[o]&&a[o].stop&&Xe.test(o)&&r(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||m.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=P.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=m.timers,a=r?r.length:0;for(n.finish=!0,m.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),m.each(["toggle","show","hide"],(function(e,t){var n=m.fn[t];m.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(Qe(t,!0),e,r,o)}})),m.each({slideDown:Qe("show"),slideUp:Qe("hide"),slideToggle:Qe("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){m.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),m.timers=[],m.fx.tick=function(){var e,t=0,n=m.timers;for(Ve=m.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||m.fx.stop(),Ve=void 0},m.fx.timer=function(e){m.timers.push(e),e()?m.fx.start():m.timers.pop()},m.fx.interval=13,m.fx.start=function(){Ge||(Ge=n.setInterval(m.fx.tick,m.fx.interval))},m.fx.stop=function(){n.clearInterval(Ge),Ge=null},m.fx.speeds={slow:600,fast:200,_default:400},m.fn.delay=function(e,t){return e=m.fx&&m.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,r){var o=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(o)}}))},function(){var e=a.createElement("input"),t=a.createElement("select"),n=t.appendChild(a.createElement("option"));e.type="checkbox",h.checkOn=""!==e.value,h.optSelected=n.selected,t.disabled=!0,h.optDisabled=!n.disabled,(e=a.createElement("input")).value="t",e.type="radio",h.radioValue="t"===e.value}();var Ke,et=m.expr.attrHandle;m.fn.extend({attr:function(e,t){return R(this,m.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){m.removeAttr(this,e)}))}}),m.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?m.prop(e,t,n):(1===i&&m.isXMLDoc(e)||(t=t.toLowerCase(),o=m.attrHooks[t]||(m.expr.match.bool.test(t)?Ke:void 0)),void 0!==n?null===n?void m.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=m.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&"radio"===t&&m.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r,o=0,i=t&&t.match(q);if(i&&1===e.nodeType)for(;n=i[o++];)r=m.propFix[n]||n,m.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)}}),Ke={set:function(e,t,n){return!1===t?m.removeAttr(e,n):e.setAttribute(n,n),n}},m.each(m.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=et[t]||m.find.attr;et[t]=function(e,t,r){var o,i;return r||(i=et[t],et[t]=o,o=null!=n(e,t,r)?t.toLowerCase():null,et[t]=i),o}}));var tt=/^(?:input|select|textarea|button)$/i,nt=/^(?:a|area)$/i;m.fn.extend({prop:function(e,t){return R(this,m.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[m.propFix[e]||e]}))}}),m.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&m.isXMLDoc(e)||(t=m.propFix[t]||t,o=m.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=m.find.attr(e,"tabindex");return t?parseInt(t,10):tt.test(e.nodeName)||nt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),h.optSelected||(m.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),m.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){m.propFix[this.toLowerCase()]=this}));var rt=/[\t\r\n\f]/g;function ot(e){return e.getAttribute&&e.getAttribute("class")||""}m.fn.extend({addClass:function(e){var t,n,r,o,i,a,s,l=0;if(m.isFunction(e))return this.each((function(t){m(this).addClass(e.call(this,t,ot(this)))}));if("string"==typeof e&&e)for(t=e.match(q)||[];n=this[l++];)if(o=ot(n),r=1===n.nodeType&&(" "+o+" ").replace(rt," ")){for(a=0;i=t[a++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(s=m.trim(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,o,i,a,s,l=0;if(m.isFunction(e))return this.each((function(t){m(this).removeClass(e.call(this,t,ot(this)))}));if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(q)||[];n=this[l++];)if(o=ot(n),r=1===n.nodeType&&(" "+o+" ").replace(rt," ")){for(a=0;i=t[a++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(s=m.trim(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):m.isFunction(e)?this.each((function(n){m(this).toggleClass(e.call(this,n,ot(this),t),t)})):this.each((function(){var t,r,o,i;if("string"===n)for(r=0,o=m(this),i=e.match(q)||[];t=i[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=ot(this))&&P.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":P.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+ot(n)+" ").replace(rt," ").indexOf(t)>-1)return!0;return!1}});var it=/\r/g,at=/[\x20\t\r\n\f]+/g;m.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=m.isFunction(e),this.each((function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,m(this).val()):e)?o="":"number"==typeof o?o+="":m.isArray(o)&&(o=m.map(o,(function(e){return null==e?"":e+""}))),(t=m.valHooks[this.type]||m.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=m.valHooks[o.type]||m.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(it,""):null==n?"":n:void 0}}),m.extend({valHooks:{option:{get:function(e){var t=m.find.attr(e,"value");return null!=t?t:m.trim(m.text(e)).replace(at," ")}},select:{get:function(e){for(var t,n,r=e.options,o=e.selectedIndex,i="select-one"===e.type||o<0,a=i?null:[],s=i?o+1:r.length,l=o<0?s:i?o:0;l<s;l++)if(((n=r[l]).selected||l===o)&&(h.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!m.nodeName(n.parentNode,"optgroup"))){if(t=m(n).val(),i)return t;a.push(t)}return a},set:function(e,t){for(var n,r,o=e.options,i=m.makeArray(t),a=o.length;a--;)((r=o[a]).selected=m.inArray(m.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),m.each(["radio","checkbox"],(function(){m.valHooks[this]={set:function(e,t){if(m.isArray(t))return e.checked=m.inArray(m(e).val(),t)>-1}},h.checkOn||(m.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}));var st=/^(?:focusinfocus|focusoutblur)$/;m.extend(m.event,{trigger:function(e,t,r,o){var i,s,l,c,u,d,p,h=[r||a],g=f.call(e,"type")?e.type:e,y=f.call(e,"namespace")?e.namespace.split("."):[];if(s=l=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!st.test(g+m.event.triggered)&&(g.indexOf(".")>-1&&(y=g.split("."),g=y.shift(),y.sort()),u=g.indexOf(":")<0&&"on"+g,(e=e[m.expando]?e:new m.Event(g,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=y.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+y.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:m.makeArray(t,[e]),p=m.event.special[g]||{},o||!p.trigger||!1!==p.trigger.apply(r,t))){if(!o&&!p.noBubble&&!m.isWindow(r)){for(c=p.delegateType||g,st.test(c+g)||(s=s.parentNode);s;s=s.parentNode)h.push(s),l=s;l===(r.ownerDocument||a)&&h.push(l.defaultView||l.parentWindow||n)}for(i=0;(s=h[i++])&&!e.isPropagationStopped();)e.type=i>1?c:p.bindType||g,(d=(P.get(s,"events")||{})[e.type]&&P.get(s,"handle"))&&d.apply(s,t),(d=u&&s[u])&&d.apply&&$(s)&&(e.result=d.apply(s,t),!1===e.result&&e.preventDefault());return e.type=g,o||e.isDefaultPrevented()||p._default&&!1!==p._default.apply(h.pop(),t)||!$(r)||u&&m.isFunction(r[g])&&!m.isWindow(r)&&((l=r[u])&&(r[u]=null),m.event.triggered=g,r[g](),m.event.triggered=void 0,l&&(r[u]=l)),e.result}},simulate:function(e,t,n){var r=m.extend(new m.Event,n,{type:e,isSimulated:!0});m.event.trigger(r,null,t)}}),m.fn.extend({trigger:function(e,t){return this.each((function(){m.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return m.event.trigger(e,t,n,!0)}}),m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),(function(e,t){m.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}})),m.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),h.focusin="onfocusin"in n,h.focusin||m.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){m.event.simulate(t,e.target,m.event.fix(e))};m.event.special[t]={setup:function(){var r=this.ownerDocument||this,o=P.access(r,t);o||r.addEventListener(e,n,!0),P.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this,o=P.access(r,t)-1;o?P.access(r,t,o):(r.removeEventListener(e,n,!0),P.remove(r,t))}}}));var lt=n.location,ct=m.now(),ut=/\?/;m.parseJSON=function(e){return JSON.parse(e+"")},m.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||m.error("Invalid XML: "+e),t};var dt=/#.*$/,pt=/([?&])_=[^&]*/,ft=/^(.*?):[ \t]*([^\r\n]*)$/gm,ht=/^(?:GET|HEAD)$/,mt=/^\/\//,gt={},yt={},vt="*/".concat("*"),bt=a.createElement("a");function xt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(q)||[];if(m.isFunction(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Ct(e,t,n,r){var o={},i=e===yt;function a(s){var l;return o[s]=!0,m.each(e[s]||[],(function(e,s){var c=s(t,n,r);return"string"!=typeof c||i||o[c]?i?!(l=c):void 0:(t.dataTypes.unshift(c),a(c),!1)})),l}return a(t.dataTypes[0])||!o["*"]&&a("*")}function wt(e,t){var n,r,o=m.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&m.extend(!0,e,r),e}bt.href=lt.href,m.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:lt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(lt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":vt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":m.parseJSON,"text xml":m.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?wt(wt(e,m.ajaxSettings),t):wt(m.ajaxSettings,e)},ajaxPrefilter:xt(gt),ajaxTransport:xt(yt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,o,i,s,l,c,u,d,p=m.ajaxSetup({},t),f=p.context||p,h=p.context&&(f.nodeType||f.jquery)?m(f):m.event,g=m.Deferred(),y=m.Callbacks("once memory"),v=p.statusCode||{},b={},x={},C=0,w="canceled",E={readyState:0,getResponseHeader:function(e){var t;if(2===C){if(!s)for(s={};t=ft.exec(i);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===C?i:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return C||(e=x[n]=x[n]||e,b[e]=t),this},overrideMimeType:function(e){return C||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(C<2)for(t in e)v[t]=[v[t],e[t]];else E.always(e[E.status]);return this},abort:function(e){var t=e||w;return r&&r.abort(t),T(0,t),this}};if(g.promise(E).complete=y.add,E.success=E.done,E.error=E.fail,p.url=((e||p.url||lt.href)+"").replace(dt,"").replace(mt,lt.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=m.trim(p.dataType||"*").toLowerCase().match(q)||[""],null==p.crossDomain){c=a.createElement("a");try{c.href=p.url,c.href=c.href,p.crossDomain=bt.protocol+"//"+bt.host!=c.protocol+"//"+c.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=m.param(p.data,p.traditional)),Ct(gt,p,t,E),2===C)return E;for(d in(u=m.event&&p.global)&&0==m.active++&&m.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!ht.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(ut.test(o)?"&":"?")+p.data,delete p.data),!1===p.cache&&(p.url=pt.test(o)?o.replace(pt,"$1_="+ct++):o+(ut.test(o)?"&":"?")+"_="+ct++)),p.ifModified&&(m.lastModified[o]&&E.setRequestHeader("If-Modified-Since",m.lastModified[o]),m.etag[o]&&E.setRequestHeader("If-None-Match",m.etag[o])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&E.setRequestHeader("Content-Type",p.contentType),E.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+vt+"; q=0.01":""):p.accepts["*"]),p.headers)E.setRequestHeader(d,p.headers[d]);if(p.beforeSend&&(!1===p.beforeSend.call(f,E,p)||2===C))return E.abort();for(d in w="abort",{success:1,error:1,complete:1})E[d](p[d]);if(r=Ct(yt,p,t,E)){if(E.readyState=1,u&&h.trigger("ajaxSend",[E,p]),2===C)return E;p.async&&p.timeout>0&&(l=n.setTimeout((function(){E.abort("timeout")}),p.timeout));try{C=1,r.send(b,T)}catch(e){if(!(C<2))throw e;T(-1,e)}}else T(-1,"No Transport");function T(e,t,a,s){var c,d,b,x,w,T=t;2!==C&&(C=2,l&&n.clearTimeout(l),r=void 0,i=s||"",E.readyState=e>0?4:0,c=e>=200&&e<300||304===e,a&&(x=function(e,t,n){for(var r,o,i,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in s)if(s[o]&&s[o].test(r)){l.unshift(o);break}if(l[0]in n)i=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){i=o;break}a||(a=o)}i=i||a}if(i)return i!==l[0]&&l.unshift(i),n[i]}(p,E,a)),x=function(e,t,n,r){var o,i,a,s,l,c={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(i=u.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=i,i=u.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(a=c[l+" "+i]||c["* "+i]))for(o in c)if((s=o.split(" "))[1]===i&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[o]:!0!==c[o]&&(i=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+i}}}return{state:"success",data:t}}(p,x,E,c),c?(p.ifModified&&((w=E.getResponseHeader("Last-Modified"))&&(m.lastModified[o]=w),(w=E.getResponseHeader("etag"))&&(m.etag[o]=w)),204===e||"HEAD"===p.type?T="nocontent":304===e?T="notmodified":(T=x.state,d=x.data,c=!(b=x.error))):(b=T,!e&&T||(T="error",e<0&&(e=0))),E.status=e,E.statusText=(t||T)+"",c?g.resolveWith(f,[d,T,E]):g.rejectWith(f,[E,T,b]),E.statusCode(v),v=void 0,u&&h.trigger(c?"ajaxSuccess":"ajaxError",[E,p,c?d:b]),y.fireWith(f,[E,T]),u&&(h.trigger("ajaxComplete",[E,p]),--m.active||m.event.trigger("ajaxStop")))}return E},getJSON:function(e,t,n){return m.get(e,t,n,"json")},getScript:function(e,t){return m.get(e,void 0,t,"script")}}),m.each(["get","post"],(function(e,t){m[t]=function(e,n,r,o){return m.isFunction(n)&&(o=o||r,r=n,n=void 0),m.ajax(m.extend({url:e,type:t,dataType:o,data:n,success:r},m.isPlainObject(e)&&e))}})),m._evalUrl=function(e){return m.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},m.fn.extend({wrapAll:function(e){var t;return m.isFunction(e)?this.each((function(t){m(this).wrapAll(e.call(this,t))})):(this[0]&&(t=m(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this)},wrapInner:function(e){return m.isFunction(e)?this.each((function(t){m(this).wrapInner(e.call(this,t))})):this.each((function(){var t=m(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=m.isFunction(e);return this.each((function(n){m(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(){return this.parent().each((function(){m.nodeName(this,"body")||m(this).replaceWith(this.childNodes)})).end()}}),m.expr.filters.hidden=function(e){return!m.expr.filters.visible(e)},m.expr.filters.visible=function(e){return e.offsetWidth>0||e.offsetHeight>0||e.getClientRects().length>0};var Et=/%20/g,Tt=/\[\]$/,Nt=/\r?\n/g,St=/^(?:submit|button|image|reset|file)$/i,kt=/^(?:input|select|textarea|keygen)/i;function Mt(e,t,n,r){var o;if(m.isArray(t))m.each(t,(function(t,o){n||Tt.test(e)?r(e,o):Mt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)}));else if(n||"object"!==m.type(t))r(e,t);else for(o in t)Mt(e+"["+o+"]",t[o],n,r)}m.param=function(e,t){var n,r=[],o=function(e,t){t=m.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=m.ajaxSettings&&m.ajaxSettings.traditional),m.isArray(e)||e.jquery&&!m.isPlainObject(e))m.each(e,(function(){o(this.name,this.value)}));else for(n in e)Mt(n,e[n],t,o);return r.join("&").replace(Et,"+")},m.fn.extend({serialize:function(){return m.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=m.prop(this,"elements");return e?m.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!m(this).is(":disabled")&&kt.test(this.nodeName)&&!St.test(e)&&(this.checked||!Y.test(e))})).map((function(e,t){var n=m(this).val();return null==n?null:m.isArray(n)?m.map(n,(function(e){return{name:t.name,value:e.replace(Nt,"\r\n")}})):{name:t.name,value:n.replace(Nt,"\r\n")}})).get()}}),m.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var At={0:200,1223:204},Dt=m.ajaxSettings.xhr();h.cors=!!Dt&&"withCredentials"in Dt,h.ajax=Dt=!!Dt,m.ajaxTransport((function(e){var t,r;if(h.cors||Dt&&!e.crossDomain)return{send:function(o,i){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)s.setRequestHeader(a,o[a]);t=function(e){return function(){t&&(t=r=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?i(0,"error"):i(s.status,s.statusText):i(At[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),r=s.onerror=t("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){t&&r()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),m.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return m.globalEval(e),e}}}),m.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),m.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain)return{send:function(r,o){t=m("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),a.head.appendChild(t[0])},abort:function(){n&&n()}}}));var It=[],jt=/(=)\?(?=&|$)|\?\?/;m.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=It.pop()||m.expando+"_"+ct++;return this[e]=!0,e}}),m.ajaxPrefilter("json jsonp",(function(e,t,r){var o,i,a,s=!1!==e.jsonp&&(jt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&jt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=m.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(jt,"$1"+o):!1!==e.jsonp&&(e.url+=(ut.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return a||m.error(o+" was not called"),a[0]},e.dataTypes[0]="json",i=n[o],n[o]=function(){a=arguments},r.always((function(){void 0===i?m(n).removeProp(o):n[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,It.push(o)),a&&m.isFunction(i)&&i(a[0]),a=i=void 0})),"script"})),m.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||a;var r=N.exec(e),o=!n&&[];return r?[t.createElement(r[1])]:(r=oe([e],t,o),o&&o.length&&m(o).remove(),m.merge([],r.childNodes))};var Lt=m.fn.load;function qt(e){return m.isWindow(e)?e:9===e.nodeType&&e.defaultView}m.fn.load=function(e,t,n){if("string"!=typeof e&&Lt)return Lt.apply(this,arguments);var r,o,i,a=this,s=e.indexOf(" ");return s>-1&&(r=m.trim(e.slice(s)),e=e.slice(0,s)),m.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),a.length>0&&m.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done((function(e){i=arguments,a.html(r?m("<div>").append(m.parseHTML(e)).find(r):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,i||[e.responseText,t,e])}))}),this},m.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){m.fn[t]=function(e){return this.on(t,e)}})),m.expr.filters.animated=function(e){return m.grep(m.timers,(function(t){return e===t.elem})).length},m.offset={setOffset:function(e,t,n){var r,o,i,a,s,l,c=m.css(e,"position"),u=m(e),d={};"static"===c&&(e.style.position="relative"),s=u.offset(),i=m.css(e,"top"),l=m.css(e,"left"),("absolute"===c||"fixed"===c)&&(i+l).indexOf("auto")>-1?(a=(r=u.position()).top,o=r.left):(a=parseFloat(i)||0,o=parseFloat(l)||0),m.isFunction(t)&&(t=t.call(e,n,m.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+o),"using"in t?t.using.call(e,d):u.css(d)}},m.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){m.offset.setOffset(this,e,t)}));var t,n,r=this[0],o={top:0,left:0},i=r&&r.ownerDocument;return i?(t=i.documentElement,m.contains(t,r)?(o=r.getBoundingClientRect(),n=qt(i),{top:o.top+n.pageYOffset-t.clientTop,left:o.left+n.pageXOffset-t.clientLeft}):o):void 0},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===m.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),m.nodeName(e[0],"html")||(r=e.offset()),r.top+=m.css(e[0],"borderTopWidth",!0),r.left+=m.css(e[0],"borderLeftWidth",!0)),{top:t.top-r.top-m.css(n,"marginTop",!0),left:t.left-r.left-m.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===m.css(e,"position");)e=e.offsetParent;return e||Ie}))}}),m.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;m.fn[e]=function(r){return R(this,(function(e,r,o){var i=qt(e);if(void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o}),e,r,arguments.length)}})),m.each(["top","left"],(function(e,t){m.cssHooks[t]=Le(h.pixelPosition,(function(e,n){if(n)return n=je(e,t),Me.test(n)?m(e).position()[t]+"px":n}))})),m.each({Height:"height",Width:"width"},(function(e,t){m.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){m.fn[r]=function(r,o){var i=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===o?"margin":"border");return R(this,(function(t,n,r){var o;return m.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?m.css(t,n,a):m.style(t,n,r,a)}),t,i?r:void 0,i,null)}}))})),m.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},size:function(){return this.length}}),m.fn.andSelf=m.fn.addBack,void 0===(r=function(){return m}.apply(t,[]))||(e.exports=r);var Ot=n.jQuery,Rt=n.$;return m.noConflict=function(e){return n.$===m&&(n.$=Rt),e&&n.jQuery===m&&(n.jQuery=Ot),m},o||(n.jQuery=n.$=m),m},"object"==typeof e.exports?e.exports=o.document?i(o,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return i(e)}:i(o)},function(e,t,n){n(2),n(3),n(4),n(5),n(6),n(7),n(8),n(9),n(10),n(11),n(12),n(13),n(14),n(15),n(16),n(17),n(18),n(19),n(20),n(21),n(22),n(23),n(24),n(25),n(26),e.exports=n(27)},function(e,t){null!=AppDependencies&&AppDependencies.push("virtoCommerce.coreModule"),angular.module("virtoCommerce.coreModule",["virtoCommerce.coreModule.packageType","virtoCommerce.coreModule.currency","virtoCommerce.coreModule.seo","virtoCommerce.coreModule.common"]).run(["platformWebApp.metaFormsService",function(e){e.registerMetaFields("currencyDetail",[{name:"code",title:"core.blades.currency-detail.labels.code",templateUrl:"currencyDetail-code.html"},{name:"name",title:"core.blades.currency-detail.labels.name",templateUrl:"currencyDetail-name.html"},{name:"isPrimary",title:"core.blades.currency-detail.labels.is-primary",templateUrl:"currencyDetail-isPrimary.html"},{name:"exchangeRate",title:"core.blades.currency-detail.labels.exchange-rate",templateUrl:"currencyDetail-exchangeRate.html"},{name:"symbol",title:"core.blades.currency-detail.labels.symbol",templateUrl:"currencyDetail-symbol.html"},{name:"customFormatting",title:"core.blades.currency-detail.labels.custom-formatting",templateUrl:"currencyDetail-customFormatting.html"},{name:"midpointRounding",title:"core.blades.currency-detail.labels.midpoint-rounding",templateUrl:"currencyDetail-midpointRounding.html"},{name:"roundingType",title:"core.blades.currency-detail.labels.rounding-type",templateUrl:"currencyDetail-roundingType.html"}])}])},function(e,t){angular.module("virtoCommerce.coreModule.packageType",[]).factory("virtoCommerce.coreModule.packageType.packageTypeUtils",["virtoCommerce.coreModule.packageType.packageTypeApi","platformWebApp.bladeNavigationService",function(e,t){var n;return{getPackageTypes:function(){return n=e.query()},editPackageTypes:function(e){var r={id:"packageTypeList",parentRefresh:function(e){angular.copy(e,n)},controller:"virtoCommerce.coreModule.packageType.packageTypeListController",template:"Modules/$(VirtoCommerce.Core)/Scripts/PackageType/blades/package-type-list.tpl.html"};t.showBlade(r,e)}}}])},function(e,t){angular.module("virtoCommerce.coreModule.packageType").controller("virtoCommerce.coreModule.packageType.packageTypeDetailController",["$scope","platformWebApp.dialogService","platformWebApp.bladeNavigationService","virtoCommerce.coreModule.packageType.packageTypeApi","platformWebApp.settings",function(e,t,n,r,o){var i,a,s=e.blade;function l(){return!angular.equals(s.currentEntity,s.origEntity)&&s.hasUpdatePermission()}function c(){return l()&&i&&i.$valid}e.saveChanges=function(){s.isLoading=!0,s.isNew?(s.currentEntity.id=s.currentEntity.name,r.save(s.currentEntity,(function(){angular.copy(s.currentEntity,s.origEntity),e.bladeClose(),s.parentBlade.refresh(!0)}),(function(e){n.setError("Error "+e.status,s)}))):r.update(s.currentEntity,(function(t){angular.copy(s.currentEntity,s.origEntity),e.bladeClose(),s.parentBlade.refresh(!0)}),(function(e){n.setError("Error "+e.status,s)}))},e.openMeasureUnitsDictionarySettingManagement=function(t){var r={id:"settingDetailChild",currentEntityId:"VirtoCommerce.Core.General.MeasureUnits",parentRefresh:function(t){e.measureUnits=t},isApiSave:!0,controller:"platformWebApp.settingDictionaryController",template:"$(Platform)/Scripts/app/settings/blades/setting-dictionary.tpl.html"};n.showBlade(r,s)},e.setForm=function(e){i=e},s.headIcon="fa fa-money",s.isNew||(s.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:e.saveChanges,canExecuteMethod:c,permission:"core:packageType:update"},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(s.origEntity,s.currentEntity)},canExecuteMethod:l},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){var o={id:"confirmDelete",title:"core.dialogs.package-type-delete.title",message:"core.dialogs.package-type-delete.message",callback:function(t){t&&(s.isLoading=!0,r.remove({ids:s.currentEntity.id},(function(){angular.copy(s.currentEntity,s.origEntity),e.bladeClose(),s.parentBlade.refresh(!0)}),(function(e){n.setError("Error "+e.status,s)})))}};t.showConfirmationDialog(o)},canExecuteMethod:function(){return!s.origEntity.isPrimary},permission:"core:packageType:delete"}]),s.onClose=function(t){n.showConfirmationIfNeeded(l(),c(),s,e.saveChanges,t,"core.dialogs.package-type-save.title","core.dialogs.package-type-save.message")},a=s.data,s.isNew&&(a={}),e.measureUnits=o.getValues({id:"VirtoCommerce.Core.General.MeasureUnits"}),s.currentEntity=angular.copy(a),s.origEntity=a,s.isLoading=!1,s.title=s.isNew?"core.blades.package-type-detail.new-title":a.name,s.subtitle=s.isNew?"core.blades.package-type-detail.new-subtitle":"core.blades.package-type-detail.subtitle"}])},function(e,t){angular.module("virtoCommerce.coreModule.packageType").controller("virtoCommerce.coreModule.packageType.packageTypeListController",["$scope","virtoCommerce.coreModule.packageType.packageTypeApi","platformWebApp.bladeNavigationService",function(e,t,n){var r=e.blade;function o(e){var t={id:"packageTypeDetail",controller:"virtoCommerce.coreModule.packageType.packageTypeDetailController",template:"Modules/$(VirtoCommerce.Core)/Scripts/PackageType/blades/package-type-detail.tpl.html"};angular.extend(t,e),n.showBlade(t,r)}r.refresh=function(e){r.isLoading=!0,t.query({},(function(t){r.isLoading=!1,r.currentEntities=t,e&&r.parentRefresh&&r.parentRefresh(t)}),(function(e){n.setError("Error "+e.status,r)}))},r.setSelectedId=function(t){e.selectedNodeId=t},e.selectNode=function(e){r.setSelectedId(e.code),o({data:e})},r.headIcon="fa fa-square",r.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:r.refresh,canExecuteMethod:function(){return!0}},{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){r.setSelectedId(null),o({isNew:!0})},canExecuteMethod:function(){return!0},permission:"core:packageType:create"}],r.title="core.blades.package-type-list.title",r.subtitle="core.blades.package-type-list.subtitle",r.refresh()}])},function(e,t){angular.module("virtoCommerce.coreModule.packageType").factory("virtoCommerce.coreModule.packageType.packageTypeApi",["$resource",function(e){return e("api/packageTypes",null,{update:{method:"PUT"}})}])},function(e,t){angular.module("virtoCommerce.coreModule.seo",[])},function(e,t){angular.module("virtoCommerce.coreModule.seo").controller("virtoCommerce.coreModule.seo.seoDetailController",["$scope","platformWebApp.bladeNavigationService","platformWebApp.metaFormsService",function(e,t,n){var r=e.blade;function o(){r.noClose=!0,e.saveChanges()}function i(){return!angular.equals(r.currentEntity,r.origEntity)&&r.hasUpdatePermission()}function a(){return(r.isNew||i())&&((t=r.currentEntity).semanticUrl&&e.semanticUrlValidator(t.semanticUrl));var t}r.metaFields=n.getMetaFields("seoDetails"),e.cancelChanges=function(){angular.copy(r.origEntity,r.currentEntity),e.bladeClose()},e.saveChanges=function(){r.isNew&&(r.seoContainerObject.seoInfos||(r.seoContainerObject.seoInfos=[]),r.seoContainerObject.seoInfos.push(r.currentEntity)),angular.copy(r.currentEntity,r.origEntity),r.noClose||e.bladeClose()},e.semanticUrlValidator=function(e){return!/[$+;=%{}[\]|@ ~#!^*&?:'<>,]/.test(e)},e.duplicateValidator=function(e){return _.all(r.seoContainerObject.seoInfos,(function(t){return t===r.origEntity||t.storeId!==r.currentEntity.storeId||t.semanticUrl!==e}))},e.isValid=a,r.onClose=function(e){t.showConfirmationIfNeeded(i(),a(),r,o,e,"core.dialogs.seo-save.title","core.dialogs.seo-save.message")},r.toolbarCommands=[{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(r.origEntity,r.currentEntity)},canExecuteMethod:i,permission:r.updatePermission}],r.headIcon="fa fa-globe",r.title=r.isNew?"core.blades.seo-detail.title-new":r.data.semanticUrl,r.subtitle="core.blades.seo-detail.subtitle",r.origEntity=r.data,r.currentEntity=angular.copy(r.origEntity),r.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.coreModule.seo").controller("virtoCommerce.coreModule.seo.seoDuplicatesController",["$rootScope","$scope","platformWebApp.bladeNavigationService","virtoCommerce.coreModule.seoApi",function(e,t,n,r){var o,i=t.blade;function a(){i.origEntity=i.duplicates,i.currentEntities=angular.copy(i.origEntity),i.isLoading=!1}function s(e){var n=e.semanticUrl&&t.semanticUrlValidator(e.semanticUrl),r=n&&t.duplicateValidator(e.semanticUrl,e);return n&&!r&&(i.conflicts[e.id]=!0),o=o||r,r}function l(){i.noClose=!0,t.saveChanges()}function c(){return!angular.equals(i.currentEntities,i.origEntity)&&i.hasUpdatePermission()}function u(){return c()&&o}t.semanticUrlValidator=function(e){return!/[$+;=%{}[\]|\\\/@ ~#!^*&?:'<>,]/.test(e)},t.duplicateValidator=function(e,t){return _.all(i.currentEntities,(function(n){return n===t||n.storeId!==t.storeId||n.semanticUrl!==e}))},t.saveChanges=function(){i.isLoading=!0;var o=[];_.each(i.currentEntities,(function(e){s(e)&&!angular.equals(e,_.findWhere(i.origEntity,{id:e.id}))&&((e=angular.copy(e)).storeId||(e.id=void 0,e.storeId=i.defaultContainerId),o.push(e))})),r.batchUpdate(o,(function(){angular.copy(i.currentEntities,i.origEntity),r.query({objectId:i.seoContainerObject.id,objectType:i.objectType},(function(n){_.any(n)?(i.duplicates=n,a()):(i.noClose||t.bladeClose(),e.$broadcast("refresh-entity-by-id",i.seoContainerObject.id))}))}),(function(e){n.setError("Error: "+e.status,i)}))},i.onClose=function(e){n.showConfirmationIfNeeded(c(),u(),i,l,e,"core.dialogs.seo-save.title","core.dialogs.seo-save.message")},i.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:t.saveChanges,canExecuteMethod:u,permission:i.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(i.origEntity,i.currentEntities)},canExecuteMethod:c,permission:i.updatePermission}],i.title=i.parentBlade.title,i.subtitle="core.blades.seo-duplicates.subtitle",a(),t.$watch("blade.currentEntities",(function(){i.conflicts={},o=!1,_.each(i.currentEntities,s)}),!0)}])},function(e,t){angular.module("virtoCommerce.coreModule.seo").controller("virtoCommerce.coreModule.seo.seoListController",["$scope","platformWebApp.uiGridHelper","virtoCommerce.storeModule.stores","platformWebApp.bladeNavigationService","platformWebApp.dialogService",function(e,t,n,r,o){var i=e.blade;e.selectedNodeId=null;var a=i.fixedStoreId?null:n.query().$promise;function s(t,n){e.selectedNodeId=t.id;var o={id:"seoDetails",data:t,isNew:n,seoContainerObject:i.seoContainerObject,languages:i.languages,updatePermission:i.updatePermission,controller:"virtoCommerce.coreModule.seo.seoDetailController",template:"Modules/$(VirtoCommerce.Core)/Scripts/SEO/blades/seo-detail.tpl.html"};i.fixedStoreId?(o.fixedStoreId=i.fixedStoreId,r.showBlade(o,i)):a.then((function(e){o.stores=e,r.showBlade(o,i)}))}function l(e){var t={id:"confirmDelete",title:"platform.dialogs.delete.title",message:"platform.dialogs.delete.message",callback:function(t){t&&r.closeChildrenBlades(i,(function(){_.each(e,(function(e){i.seoContainerObject.seoInfos.splice(i.seoContainerObject.seoInfos.indexOf(e),1)}))}))}};o.showConfirmationDialog(t)}i.refresh=function(e){e&&(i.seoContainerObject=e,i.currentEntities=i.seoContainerObject.seoInfos)},e.resolveDuplicates=function(){var e={id:"seoDuplicates",duplicates:i.duplicates,objectType:i.objectType,seoContainerObject:i.seoContainerObject,defaultContainerId:i.defaultContainerId,languages:i.languages,controller:"virtoCommerce.coreModule.seo.seoDuplicatesController",template:"Modules/$(VirtoCommerce.Core)/Scripts/SEO/blades/seo-duplicates.tpl.html"};i.fixedStoreId?(e.stores=[i.seoContainerObject],r.showBlade(e,i)):a.then((function(t){e.stores=t,r.showBlade(e,i)}))},i.selectNode=s,e.delete=function(e){l([e])},i.toolbarCommands=[{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){r.closeChildrenBlades(i,(function(){s({isActive:!0},!0)}))},canExecuteMethod:function(){return!0},permission:i.updatePermission},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){l(e.gridApi.selection.getSelectedRows())},canExecuteMethod:function(){return e.gridApi&&_.any(e.gridApi.selection.getSelectedRows())&&_.any(i.seoContainerObject.seoInfos)},permission:i.updatePermission}],e.setGridOptions=function(n){t.initialize(e,n)},i.headIcon="fa fa-globe",i.subtitle="core.blades.seo-list.subtitle",i.refresh(i.seoContainerObject),i.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.coreModule.seo").factory("virtoCommerce.coreModule.seoApi",["$resource",function(e){return e("api/seoinfos/duplicates",null,{batchUpdate:{url:"api/seoinfos/batchupdate",method:"PUT"}})}])},function(e,t){angular.module("virtoCommerce.coreModule.seo").controller("virtoCommerce.coreModule.seo.seoWidgetController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.coreModule.seoApi",function(e,t,n){var r,o=e.blade;function i(n){var r={id:"seoList",title:o.title,duplicates:n,objectType:e.widget.objectType,seoContainerObject:e.data,fixedStoreId:e.widget.getFixedStoreId?e.widget.getFixedStoreId(o):void 0,defaultContainerId:e.widget.getDefaultContainerId(o),languages:e.widget.getLanguages(o),updatePermission:o.updatePermission,controller:"virtoCommerce.coreModule.seo.seoListController",template:"Modules/$(VirtoCommerce.Core)/Scripts/SEO/blades/seo-list.tpl.html"};t.showBlade(r,o)}e.openSeoBlade=function(){r?r.then(i):i()},e.$watch("data",(function(t){t&&e.widget.getDefaultContainerId(o)&&(r=n.query({objectId:t.id,objectType:e.widget.objectType}).$promise).then((function(t){e.widget.UIclass=_.any(t)?"error":""}))}))}])},function(e,t){angular.module("virtoCommerce.coreModule.common",[]).run(["platformWebApp.metaFormsService",function(e){e.registerMetaFields("addressDetails",[{templateUrl:"addressTypeSelector.html",priority:0},{name:"firstName",title:"core.blades.address-detail.labels.first-name",valueType:"ShortText",isRequired:!0,priority:1},{name:"lastName",title:"core.blades.address-detail.labels.last-name",valueType:"ShortText",isRequired:!0,priority:2},{templateUrl:"countrySelector.html",priority:3},{templateUrl:"countryRegionSelector.html",priority:4},{name:"city",title:"core.blades.address-detail.labels.city",valueType:"ShortText",isRequired:!0,priority:5},{name:"line1",title:"core.blades.address-detail.labels.address1",valueType:"ShortText",isRequired:!0,priority:6},{name:"line2",title:"core.blades.address-detail.labels.address2",valueType:"ShortText",priority:7},{name:"postalCode",title:"core.blades.address-detail.labels.zip-code",valueType:"ShortText",isRequired:!0,priority:8},{name:"email",title:"core.blades.address-detail.labels.email",valueType:"Email",priority:9},{name:"phone",title:"core.blades.address-detail.labels.phone",valueType:"ShortText",priority:10}])}])},function(e,t){angular.module("virtoCommerce.coreModule.common").controller("virtoCommerce.coreModule.common.coreAddressDetailController",["$scope","$filter","platformWebApp.common.countries","platformWebApp.dialogService","platformWebApp.metaFormsService","platformWebApp.bladeNavigationService",function(e,t,n,r,o,i){var a=e.blade;a.addressTypes=["Billing","Shipping","BillingAndShipping"],a.metaFields=a.metaFields&&a.metaFields.length?a.metaFields:o.getMetaFields("addressDetails"),a.currentEntity.isNew&&(a.currentEntity.addressType=a.addressTypes[1]),a.origEntity=a.currentEntity,a.currentEntity=angular.copy(a.origEntity),a.countries=n.query(),a.countries.$promise.then(t=>{e.$watch("blade.currentEntity.countryCode",(e,r)=>{if(e){var o=_.findWhere(t,{id:e});o&&(a.currentEntity.countryName=o.name,e!==r&&(a.currentEntity.regionName=void 0,s=[]),o.regions?s=o.regions:n.queryRegions(e).$promise.then(e=>{o.regions=e,s.push(...e)}))}})});var s=[];function l(e,t){var n=!0;_.each(e,(function(e){t.includes(e.name)&&(e.name=t,e.displayName=t,n=!1)})),n&&e.unshift({name:t,displayName:t})}function c(){return!angular.equals(a.currentEntity,a.origEntity)}a.currentEntity.regionName&&!a.currentEntity.regionId&&l(s,a.currentEntity.regionName),a.getRegions=function(e){var n=s;if(e&&e.length>1){var r=t("filter")(n,e);if(_.some(r)){if(r.length>1)for(var o of r=_.filter(r,t=>!t.id&&t.displayName.length>e.length))n.splice(_.indexOf(n,o),1)}else l(n,e)}return n},e.$watch("blade.currentEntity.regionName",(function(e,t){if(e!==t){var n=null;if(e){var r=_.findWhere(s,{name:e});r&&(n=r.id)}a.currentEntity.regionId=n}})),a.toolbarCommands=[{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(a.origEntity,a.currentEntity)},canExecuteMethod:c},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){var t={id:"confirmDelete",title:"core.dialogs.address-delete.title",message:"core.dialogs.address-delete.message",callback:function(t){t&&(a.deleteFn&&a.deleteFn(a.currentEntity),e.bladeClose())}};r.showConfirmationDialog(t)},canExecuteMethod:function(){return!a.currentEntity.isNew}}],a.isLoading=!1,a.onClose=function(t){i.showConfirmationIfNeeded(c(),c(),a,e.saveChanges,t,"core.dialogs.address-save.title","core.dialogs.address-save.message")},e.setForm=function(t){e.formScope=t},e.isValid=function(){return e.formScope&&e.formScope.$valid},e.cancelChanges=function(){e.bladeClose()},e.saveChanges=function(){a.confirmChangesFn&&a.confirmChangesFn(a.currentEntity),angular.copy(a.currentEntity,a.origEntity),e.bladeClose()}}])},function(e,t){angular.module("virtoCommerce.coreModule.common").controller("virtoCommerce.coreModule.common.coreAddressListController",["$timeout","$scope","platformWebApp.bladeNavigationService",function(e,t,n){var r=t.blade;t.selectedItem=null,t.openDetailBlade=function(e){e||(e={isNew:!0}),t.selectedItem=e;var o={id:"coreAddressDetail",currentEntity:e,title:r.title,subtitle:"core.blades.address-detail.subtitle",controller:"virtoCommerce.coreModule.common.coreAddressDetailController",confirmChangesFn:function(e){e.name=t.getAddressName(e),e.isNew&&(e.isNew=void 0,r.currentEntities.push(e),r.confirmChangesFn&&r.confirmChangesFn(e))},deleteFn:function(e){var t=_.find(r.currentEntities,(function(t){return angular.equals(t,e)}));if(t){var n=r.currentEntities.indexOf(t);r.currentEntities.splice(n,1),r.deleteFn&&r.deleteFn(e)}},template:"Modules/$(VirtoCommerce.Core)/Scripts/common/blades/address-detail.tpl.html"};n.showBlade(o,t.blade)},t.getAddressName=function(e){return[e.countryCode,e.regionName,e.city,e.line1].join(", ")},r.headIcon=r.parentBlade.headIcon,r.toolbarCommands=[{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){t.openDetailBlade()},canExecuteMethod:function(){return!0}}],r.isLoading=!1,_.some(r.currentEntities)||e(t.openDetailBlade,60,!1)}])},function(e,t,n){(function(e){angular.module("virtoCommerce.coreModule.common").directive("vaInfoButton",["$document",function(t){return{restrict:"E",replace:!0,scope:{toolText:"@"},template:'<button class="btn"><i class="btn-ico fa fa-info"></i></button>',link:function(n,r,o){function i(n){e(".tooltip, .btn").is(n.target)||e(".tooltip, .btn").has(n.target).length||(e(".tooltip").remove(),t.unbind("click",i))}e(r).parents(".form-input").addClass("__info"),r.bind("click",(function(){var r=e(this).offset().left+42,o=e(this).offset().top;e(".tooltip").remove(),e("body").prepend('<div class="tooltip" style="left: '+r+"px; top: "+o+'px;"><div class="tooltip-cnt">'+n.toolText+"</div></div>"),t.on("click",i)}))}}}])}).call(this,n(0))},function(e,t,n){(function(e){angular.module("virtoCommerce.coreModule.common").directive("vcUkHtmleditor",[function(){return{restrict:"A",require:"ngModel",scope:{ngModel:"=",fileUploader:"="},link:function(t,n){var r=UIkit.htmleditor(n,{mode:"split",maxsplitsize:1e3,markdown:!0,enablescripts:!1,iframe:!0}),o=r.editor;r.on("render",(function(){r.replaceInPreview(/(?:<[^>]+\s)((on\S+)=["']?((?:.(?!["']?\s+(?:\S+)=|[>"']))+.)["']?)/gi,s)})),r.addButtons({headerFirst:{label:"H1",title:"First level header"},headerSecond:{label:"H2",title:"Second level header"}}),r.options.toolbar.unshift("headerFirst","headerSecond"),r._buildtoolbar(),r.off("action.image").on("action.image",(function(){e("#fileUploader").trigger("click")}));var i,a=e(".CodeMirror");function s(e){if(e&&e.matches&&e.matches.length>1)return e.matches[0].replace(e.matches[1],"")}function l(e){for(var t=0;t<e.lineCount();t++)e.removeLineClass(t,null,"CodeMirror-activeline-background")}function c(e,t,n,r){e.off("action."+t).on("action."+t,(function(){"html"!=e.getCursorMode()&&"markdown"!=e.getCursorMode()||e["replaceLine"==r||"replaceSelection"](n)}))}function u(e,t){"gfm"===t?(e.enableMarkdown(),c(e,"headerFirst","# $1"),c(e,"headerSecond","## $1")):"htmlmixed"===t&&(e.disableMarkdown(),c(e,"headerFirst","<h1>$1</h1>"),c(e,"headerSecond","<h2>$1</h2>"))}a.on("dragenter",(function(e){var t,n;e.preventDefault(),e.stopPropagation(),i=function(e,t){return e.lineAtHeight(t.originalEvent.pageY)}(o,e),n=i,l(t=o),t.addLineClass(n,null,"CodeMirror-activeline-background")})),a.on("dragover",(function(e){e.preventDefault(),e.stopPropagation()})),a.on("drop",(function(e){e.preventDefault(),e.stopPropagation(),t.fileUploader.addToQueue(e.originalEvent.dataTransfer.files)})),a.on("paste",(function(e){var n,r=_.find(e.originalEvent.clipboardData.items,(function(e){return-1!==e.type.indexOf("image")&&"file"===e.kind}));if(r){var o=r.getAsFile(),i="image_"+(n=new Date).getFullYear()+"-"+(n.getMonth()+1)+"-"+n.getDay()+"_"+n.getHours()+"-"+n.getMinutes()+"-"+n.getSeconds()+".png",a=new File([o],i,{type:o.type});t.fileUploader.addToQueue([a])}})),u(r,o.getMode().name),t.$on("filesUploaded",(function(e,t){var n=n||o.getCursor().line,r={line:n,ch:0};o.getLineTokens(n)&&r.line++;for(var i=0;i<t.items.length;i++){var a=t.items[i];r.line++;var s=o.getMode();"gfm"===s.name?o.replaceRange("!["+a.name+"]("+a.url+")\n\n",r):"htmlmixed"===s.name&&o.replaceRange('<img alt="'+a.name+'" src="'+a.url+'" />\n\n',r)}l(o)})),t.$on("resetContent",(function(e,t){o.setValue(t.body||"")})),t.$on("changeEditType",(function(e,t){t.editAsHtml?o.setOption("mode","htmlmixed"):t.editAsMarkdown&&o.setOption("mode","gfm"),u(r,o.getMode().name)})),o.setValue(t.ngModel||"")}}}])}).call(this,n(0))},function(e,t){angular.module("virtoCommerce.coreModule.currency",[]).run(["platformWebApp.widgetService",function(e){e.registerWidget({isVisible:function(e){return"VirtoCommerce.Core"==e.currentEntity.id},controller:"virtoCommerce.coreModule.currency.currencyWidgetController",template:"Modules/$(VirtoCommerce.Core)/Scripts/currency/widgets/currencyWidget.tpl.html"},"moduleDetail")}]).factory("virtoCommerce.coreModule.currency.currencyUtils",["virtoCommerce.coreModule.currency.currencyApi","platformWebApp.bladeNavigationService",function(e,t){var n;return{getCurrencies:function(){return n=e.query()},editCurrencies:function(e){var r={id:"currencyList",parentRefresh:function(e){angular.copy(e,n)},controller:"virtoCommerce.coreModule.currency.currencyListController",template:"Modules/$(VirtoCommerce.Core)/Scripts/currency/blades/currency-list.tpl.html"};t.showBlade(r,e)}}}])},function(e,t){angular.module("virtoCommerce.coreModule.currency").controller("virtoCommerce.coreModule.currency.currencyDetailController",["$scope","platformWebApp.dialogService","platformWebApp.bladeNavigationService","virtoCommerce.coreModule.currency.currencyApi","platformWebApp.metaFormsService",function(e,t,n,r,o){var i,a,s=e.blade;function l(){return!angular.equals(s.currentEntity,s.origEntity)&&s.hasUpdatePermission()}function c(){return l()&&i&&i.$valid}s.updatePermission="core:currency:update",s.metafields=s.metafields?s.metafields:o.getMetaFields("currencyDetail"),s.roundingTypes=["Rounding001","Rounding005Up","Rounding005Down","Rounding01Up","Rounding01Down","Rounding05","Rounding1","Rounding1Up"],s.midpointRoundings=["ToEven","AwayFromZero","ToZero","ToNegativeInfinity","ToPositiveInfinity"],e.saveChanges=function(){s.isLoading=!0,s.isNew?r.save(s.currentEntity,(function(){angular.copy(s.currentEntity,s.origEntity),e.bladeClose(),s.parentBlade.setSelectedId(s.currentEntity.code),s.parentBlade.refresh(!0)}),(function(e){n.setError("Error: "+e.status,s)})):r.update(s.currentEntity,(function(t){angular.copy(s.currentEntity,s.origEntity),e.bladeClose(),s.parentBlade.setSelectedId(s.currentEntity.code),s.parentBlade.refresh(!0)}),(function(e){n.setError("Error: "+e.status,s)}))},e.setForm=function(e){i=e},s.headIcon="fa fa-money",s.isNew||(s.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:e.saveChanges,canExecuteMethod:c,permission:s.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(s.origEntity,s.currentEntity)},canExecuteMethod:l,permission:s.updatePermission},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){var o={id:"confirmDelete",title:"core.dialogs.currency-delete.title",message:"core.dialogs.currency-delete.message",callback:function(t){t&&(s.isLoading=!0,r.remove({codes:s.currentEntity.code},(function(){angular.copy(s.currentEntity,s.origEntity),e.bladeClose(),s.parentBlade.setSelectedId(null),s.parentBlade.refresh(!0)}),(function(e){n.setError("Error "+e.status,s)})))}};t.showConfirmationDialog(o)},canExecuteMethod:function(){return!s.origEntity.isPrimary},permission:"core:currency:delete"}]),s.onClose=function(t){n.showConfirmationIfNeeded(l(),c(),s,e.saveChanges,t,"core.dialogs.currency-save.title","core.dialogs.currency-save.message")},a=s.data,s.isNew&&(a={exchangeRate:1}),s.currentEntity=angular.copy(a),s.origEntity=a,s.isLoading=!1,s.title=s.isNew?"core.blades.currency-detail.new-title":a.name,s.subtitle=s.isNew?"core.blades.currency-detail.new-subtitle":"core.blades.currency-detail.subtitle"}])},function(e,t){angular.module("virtoCommerce.coreModule.currency").controller("virtoCommerce.coreModule.currency.currencyListController",["$scope","virtoCommerce.coreModule.currency.currencyApi","platformWebApp.bladeNavigationService",function(e,t,n){var r=e.blade;function o(e){var t={id:"currencyDetail",controller:"virtoCommerce.coreModule.currency.currencyDetailController",template:"Modules/$(VirtoCommerce.Core)/Scripts/currency/blades/currency-detail.tpl.html"};angular.extend(t,e),n.showBlade(t,r)}r.refresh=function(e){r.isLoading=!0,t.query({},(function(t){r.isLoading=!1,r.currentEntities=t,e&&r.parentRefresh&&r.parentRefresh(t)}),(function(e){n.setError("Error "+e.status,r)}))},r.setSelectedId=function(t){e.selectedNodeId=t},e.selectNode=function(e){r.setSelectedId(e.code),o({data:e})},r.headIcon="fa fa-money",r.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:r.refresh,canExecuteMethod:function(){return!0}},{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){r.setSelectedId(null),o({isNew:!0})},canExecuteMethod:function(){return!0},permission:"core:currency:create"}],r.title="core.blades.currency-list.title",r.subtitle="core.blades.currency-list.subtitle",r.refresh()}])},function(e,t){angular.module("virtoCommerce.coreModule.currency").factory("virtoCommerce.coreModule.currency.currencyApi",["$resource",function(e){return e("api/currencies",null,{update:{method:"PUT"}})}])},function(e,t){angular.module("virtoCommerce.coreModule.currency").controller("virtoCommerce.coreModule.currency.currencyWidgetController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.coreModule.currency.currencyApi",function(e,t,n){var r=e.blade;e.widget.refresh=function(){e.currentNumberInfo="...",n.query({},(function(t){e.currentNumberInfo=t.length}),(function(e){}))},e.openBlade=function(){t.showBlade({id:"currencyList",controller:"virtoCommerce.coreModule.currency.currencyListController",template:"Modules/$(VirtoCommerce.Core)/Scripts/currency/blades/currency-list.tpl.html"},r)},e.widget.refresh()}])},function(e,t){angular.module("virtoCommerce.coreModule.common").run(["$http","$compile","virtoCommerce.coreModule.common.dynamicExpressionService",function(e,t,n){n.registerExpression({id:"BlockCustomerCondition",newChildLabel:"Add user group",getValidationError:function(){return this.children&&this.children.length?void 0:"Your promotion must have at least one eligibility criterion"}}),n.registerExpression({id:"ConditionIsEveryone",displayName:"Everyone"}),n.registerExpression({id:"ConditionIsFirstTimeBuyer",displayName:"First time customers"}),n.registerExpression({id:"ConditionIsRegisteredUser",displayName:"Registered users"}),n.registerExpression({id:"UserGroupsContainsCondition",displayName:"User group contains..."});var r=[{id:"ExcludingCategoryCondition"},{id:"ExcludingProductCondition"}];n.registerExpression({id:"ExcludingCategoryCondition",displayName:"Items from a specific category"}),n.registerExpression({id:"ExcludingProductCondition",displayName:"Product items"}),n.registerExpression({id:"BlockCatalogCondition",newChildLabel:"Add condition"}),n.registerExpression({id:"ConditionEntryIs",displayName:"Specific product"}),n.registerExpression({id:"ConditionCurrencyIs",displayName:"Currency is..."}),n.registerExpression({id:"ConditionCodeContains",displayName:"Product code contains..."}),n.registerExpression({id:"ConditionCategoryIs",displayName:"Specific category",availableChildren:r,newChildLabel:"Excluding"}),n.registerExpression({id:"ConditionInStockQuantity",displayName:"In stock quantity is..."}),n.registerExpression({id:"BlockCartCondition",newChildLabel:"Add condition"}),n.registerExpression({id:"ConditionCartSubtotalLeast",displayName:"Cart subtotal is...",availableChildren:r,newChildLabel:"Excluding"}),n.registerExpression({id:"ConditionAtNumItemsInCart",displayName:"Number of items in the shopping cart",availableChildren:r,newChildLabel:"Excluding"}),n.registerExpression({id:"ConditionAtNumItemsInCategoryAreInCart",displayName:"Number of items out of a category in the shopping cart",availableChildren:r,newChildLabel:"Excluding"}),n.registerExpression({id:"ConditionAtNumItemsOfEntryAreInCart",displayName:"Number of specific product items in the shopping cart"}),n.registerExpression({id:"BlockReward",newChildLabel:"Add reward",getValidationError:function(){return this.children&&this.children.length?void 0:"Your promotion must have at least one reward"}}),n.registerExpression({id:"RewardCartGetOfAbsSubtotal",displayName:"$... off cart subtotal"}),n.registerExpression({id:"RewardCartGetOfRelSubtotal",displayName:"...% off cart subtotal, no more than $..."}),n.registerExpression({id:"RewardItemGetFreeNumItemOfProduct",displayName:"... free items of ... product"}),n.registerExpression({id:"RewardItemGiftNumItem",displayName:"... items of ... product as a gift"}),n.registerExpression({id:"RewardItemGetOfAbs",displayName:"$... off"}),n.registerExpression({id:"RewardItemGetOfRel",displayName:"...% off for product ..., no more than $..."}),n.registerExpression({id:"RewardItemGetOfAbsForNum",displayName:"$... off for ... specific product items"}),n.registerExpression({id:"RewardItemGetOfRelForNum",displayName:"...% off for ... specific product items, no more than $..."}),n.registerExpression({id:"RewardShippingGetOfAbsShippingMethod",displayName:"$... off for shipping at ..."}),n.registerExpression({id:"RewardShippingGetOfRelShippingMethod",displayName:"% off for shipping at ..., no more than $..."}),n.registerExpression({id:"RewardPaymentGetOfAbs",displayName:"$... off for using ... payment method"}),n.registerExpression({id:"RewardPaymentGetOfRel",displayName:"...% off for using ... payment method, no more than $..."}),n.registerExpression({id:"RewardItemForEveryNumInGetOfRel",displayName:"...% off for ... of every ... specific product items"}),n.registerExpression({id:"RewardItemForEveryNumOtherItemInGetOfRel",displayName:"...% off for ... items of a specific product per every ... items of another product"});var o=["Browse behavior","Shopper profile","Shopping cart","Location"];n.registerExpression({groupName:o[0],id:"ConditionStoreSearchedPhrase",displayName:"Shopper searched for ... in the store"}),n.registerExpression({groupName:o[0],id:"ConditionLanguageIs",displayName:"User language is set to..."}),n.registerExpression({groupName:o[1],id:"ConditionAgeIs",displayName:"Shopper age is ..."}),n.registerExpression({groupName:o[1],id:"ConditionGenderIs",displayName:"Shopper gender is ..."}),n.registerExpression({groupName:o[3],id:"ConditionGeoTimeZone",displayName:"Time zone"}),n.registerExpression({groupName:o[3],id:"ConditionGeoZipCode",displayName:"Zip/postal code"}),n.registerExpression({groupName:o[3],id:"ConditionGeoCity",displayName:"City"}),n.registerExpression({groupName:o[3],id:"ConditionGeoCountry",displayName:"Country"}),n.registerExpression({groupName:o[3],id:"ConditionGeoState",displayName:"State/province"}),n.registerExpression({id:"BlockContentCondition",newChildLabel:"Add condition"}),n.registerExpression({id:"BlockPricingCondition",newChildLabel:"Add condition"}),n.registerExpression({groupName:o[1],id:"UserGroupsContainsCondition",displayName:"User group contains ..."}),e.get("Modules/$(VirtoCommerce.Core)/Scripts/dynamicConditions/all-templates.html").then((function(e){t(e.data)}))}]).controller("virtoCommerce.dynamicExpressions.conditionLanguageIsController",["$scope","platformWebApp.settings",function(e,t){e.availableLanguages=t.getValues({id:"VirtoCommerce.Core.General.Languages"})}]).controller("virtoCommerce.dynamicExpressions.conditionGeoCountryController",["$scope","platformWebApp.common.countries",function(e,t){e.countries=t.query()}]).controller("virtoCommerce.dynamicExpressions.conditionGeoTimeZoneController",["$scope","platformWebApp.common.timeZones",function(e,t){e.timeZones=t.query()}]).controller("virtoCommerce.dynamicExpressions.shippingMethodRewardController",["$scope",function(e){function t(t){let n=_.filter(e.stores,(function(e){return!(t&&t.length>0)||t.indexOf(e.id)>=0}));e.shippingMethods=_.uniq(_.flatten(_.pluck(n,"shippingMethods")),(function(e){return e.code})),0===e.shippingMethods.length&&(e.shippingMethods=[{code:"No methods found"}])}e.$watch("stores",(function(){t(e.blade.currentEntity.storeIds)}),!0),e.$watch("blade.currentEntity.storeIds",t)}]).controller("virtoCommerce.dynamicExpressions.paymentMethodRewardController",["$scope",function(e){function t(t){let n=_.filter(e.stores,(function(e){return!(t&&t.length>0)||t.indexOf(e.id)>=0}));e.paymentMethods=_.uniq(_.flatten(_.pluck(n,"paymentMethods")),(function(e){return e.code})),0===e.paymentMethods.length&&(e.paymentMethods=[{code:"No methods found"}])}e.$watch("stores",(function(){t(e.blade.currentEntity.storeIds)}),!0),e.$watch("blade.currentEntity.storeIds",t)}]).filter("compareConditionToText",(function(){return function(e){var t;switch(e){case"IsMatching":t="exactly";break;case"IsNotMatching":t="anything but";break;case"IsGreaterThan":t="greater than";break;case"IsGreaterThanOrEqual":t="greater than or equals";break;case"IsLessThan":t="less than";break;case"IsLessThanOrEqual":t="less than or equals";break;case"Contains":t="containing";break;case"NotContains":t="not containing";break;case"Matching":t="exactly";break;case"NotMatching":t="anything but";break;case"Exactly":t="exactly";break;case"AtLeast":t="at least";break;case"Between":t="between";break;default:t=e}return t}}))},function(e,t){angular.module("virtoCommerce.coreModule.common").factory("virtoCommerce.coreModule.common.dynamicExpressionService",(function(){return{expressionTreeTemplateUrl:"",expressions:[],registerExpression:function(e){e.templateURL||(e.templateURL="expression-"+e.id+".html"),this.expressions[e.id]=e}}})).directive("vaDynamicExpressionTree",(function(){return{restrict:"E",link:function(e,t,n){e.addChild=function(e,t){t.children||(t.children=[]),t.children.push(angular.copy(e))},e.deleteChild=function(e,t){t.splice(t.indexOf(e),1)},e.$watch(n.source,(function(t){e.source=t})),e.templateUrl="Modules/$(VirtoCommerce.Core)/Scripts/dynamicConditions/expression-tree.tpl.html",e.$watch(n.templateUrl,(function(t){t&&(e.templateUrl=t)}))},template:'<div ng-include="templateUrl"></div>'}}))},function(e,t,n){},function(e,t,n){},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,