!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){n(1),n(2),n(3),n(4),n(5),n(6),n(7),n(8),n(9),n(10),n(11),n(12),n(13),n(14),n(15),n(16),n(17),n(18),n(19),n(20),n(21),n(22),n(23),n(24),e.exports=n(25)},function(e,t){null!=AppDependencies&&AppDependencies.push("virtoCommerce.contentModule"),angular.module("virtoCommerce.contentModule",[]).run(["platformWebApp.authService","platformWebApp.mainMenuService","platformWebApp.widgetService","$state","platformWebApp.bladeNavigationService","platformWebApp.permissionScopeResolver","virtoCommerce.storeModule.stores","virtoCommerce.contentModule.menuLinkList-associationTypesService",function(e,t,n,o,r,i,a,s){var l={path:"browse/content",icon:"fa fa-code",title:"content.main-menu-title",priority:111,action:function(){o.go("workspace.content")},permission:"content:access"};t.addMenuItem(l),n.registerWidget({size:[2,1],controller:"virtoCommerce.contentModule.storeCMSWidgetController",template:"Modules/$(VirtoCommerce.Content)/Scripts/widgets/storeCMSWidget.tpl.html",permission:"content:read"},"storeDetail");var c={type:"ContentSelectedStoreScope",title:"Only for selected stores",selectFn:function(e,t){var n={id:"store-pick",title:"content.blades.scope-value-pick-from-simple-list.title",subtitle:"content.blades.scope-value-pick-from-simple-list.subtitle",currentEntity:this,onChangesConfirmedFn:t,dataService:a,controller:"platformWebApp.security.scopeValuePickFromSimpleListController",template:"$(Platform)/Scripts/app/security/blades/common/scope-value-pick-from-simple-list.tpl.html"};r.showBlade(n,e)}};i.register(c),s.registerType({id:"product",name:"Product",openSelectWizard:function(e,t){var n=[],o={id:"CatalogEntrySelect",title:"content.blades.catalog-items-select.title-product",controller:"virtoCommerce.catalogModule.catalogItemSelectController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/common/catalog-items-select.tpl.html",breadcrumbs:[],toolbarCommands:[{name:"platform.commands.pick-selected",icon:"fa fa-plus",executeMethod:function(t){e.associatedObjectId=n[0].id,e.associatedObjectName=n[0].name,r.closeBlade(t)},canExecuteMethod:function(){return 1==n.length}}]};o.options={showCheckingMultiple:!1,checkItemFn:function(e,t){"category"==e.type?(o.error="Must select Product",e.selected=void 0):(t?_.all(n,(function(t){return t.id!=e.id}))&&n.push(e):n=_.reject(n,(function(t){return t.id==e.id})),o.error=void 0)}},r.showBlade(o,t)}}),s.registerType({id:"category",name:"Category",openSelectWizard:function(t,n){if(e.checkPermission("content:update")){var o=[],i={id:"CatalogCategorySelect",title:"content.blades.catalog-items-select.title-category",controller:"virtoCommerce.catalogModule.catalogItemSelectController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/common/catalog-items-select.tpl.html",breadcrumbs:[],toolbarCommands:[{name:"platform.commands.pick-selected",icon:"fa fa-plus",executeMethod:function(e){t.associatedObjectId=o[0].id,t.associatedObjectName=o[0].name,r.closeBlade(e)},canExecuteMethod:function(){return 1==o.length}}]};i.options={showCheckingMultiple:!1,allowCheckingItem:!1,allowCheckingCategory:!0,checkItemFn:function(e,t){"category"!=e.type?(i.error="Must select Category",e.selected=void 0):(t?_.all(o,(function(t){return t.id!=e.id}))&&o.push(e):o=_.reject(o,(function(t){return t.id==e.id})),i.error=void 0)}},r.showBlade(i,n)}}})}]).config(["$stateProvider",function(e){e.state("workspace.content",{url:"/content?storeId",templateUrl:"$(Platform)/Scripts/common/templates/home.tpl.html",controller:["$scope","platformWebApp.bladeNavigationService",function(e,t){t.showBlade({id:"content",title:"content.blades.content-main.title",subtitle:"content.blades.content-main.subtitle",controller:"virtoCommerce.contentModule.contentMainController",template:"Modules/$(VirtoCommerce.Content)/Scripts/blades/content-main.tpl.html",isClosingDisabled:!0})}]})}]).factory("virtoCommerce.contentModule.menuLinkList-associationTypesService",[function(){return{objects:[],registerType:function(e){e.templateURL||(e.templateURL="linkListSelectObject.tpl"),this.objects.push(e)}}}]).filter("fallbackTranslate",["$translate",function(e){return function(t,n){var o=e.instant(t);return o===t?n:o}}]).filter("localizeDynamicPropertyName",(function(){return function(e,t){var n=e.name,o=_.find(e.displayNames,(function(e){return e&&e.locale.startsWith(t)}));return o&&o.name&&(n+=" ("+o.name+")"),n}}))},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.contentMainController",["$scope","$state","$stateParams","virtoCommerce.contentModule.menus","virtoCommerce.contentModule.contentApi","virtoCommerce.storeModule.stores","platformWebApp.bladeNavigationService","platformWebApp.dialogService","platformWebApp.widgetService",function(e,t,n,o,r,i,a,s,l){var c=e.blade;c.initialize=function(){c.isLoading=!0,c.currentEntities=[],n.storeId&&i.get({id:n.storeId},c.openThemes),i.query(null,(function(e){var t=2*e.length,n=function(){c.isLoading=--t};c.isLoading=_.any(e),_.each(e,(function(e){c.currentEntities.push({storeId:e.id,store:e,themesCount:"...",pagesCount:"...",blogsCount:"...",listLinksCount:"..."}),c.refresh(e.id,"stats").finally(n),c.refresh(e.id,"menus").finally(n)}))})),e.thereIsWidgetToShow=_.any(l.widgetsMap.contentMainListItem,(function(e){return!angular.isFunction(e.isVisible)||e.isVisible(c)}))},c.refresh=function(e,t,n){var i=_.findWhere(c.currentEntities,{storeId:e});switch(t){case"menus":return o.get({storeId:e},(function(e){i.listLinksCount=e.length}),(function(e){a.setError("Error "+e.status,c)})).$promise;case"stats":return r.getStatistics({storeId:e},(function(e){angular.extend(i,e)}),(function(e){a.setError("Error "+e.status,c)})).$promise;case"defaultTheme":i.activeThemeName=n}},e.$on("cms-menus-changed",(function(e,t){c.refresh(t,"menus")})),e.$on("cms-statistics-changed",(function(e,t){c.refresh(t,"stats")})),c.openThemes=function(e){var t={id:"themesListBlade",storeId:e.id,title:"content.blades.themes-list.title",titleValues:{name:e.name},subtitle:"content.blades.themes-list.subtitle",controller:"virtoCommerce.contentModule.themesListController",template:"Modules/$(VirtoCommerce.Content)/Scripts/blades/themes/themes-list.tpl.html"};a.showBlade(t,c)},c.openPages=function(e){var t={id:"pagesList",contentType:"pages",storeId:e.storeId,storeUrl:e.store.url,languages:e.store.languages,currentEntity:e,title:e.store.name,subtitle:"content.blades.pages-list.subtitle-pages",controller:"virtoCommerce.contentModule.pagesListController",template:"Modules/$(VirtoCommerce.Assets)/Scripts/blades/asset-list.tpl.html"};a.showBlade(t,c)},c.openLinkLists=function(e){var t={id:"linkListBlade",storeId:e.storeId,title:"content.blades.link-lists.title",subtitle:"content.blades.link-lists.subtitle",subtitleValues:{name:e.store.name},controller:"virtoCommerce.contentModule.linkListsController",template:"Modules/$(VirtoCommerce.Content)/Scripts/blades/menu/link-lists.tpl.html"};a.showBlade(t,c)},c.openBlogs=function(e){var t={id:"blogsListBlade",contentType:"blogs",storeId:e.storeId,storeUrl:e.store.url,languages:e.store.languages,currentEntity:e,title:e.store.name,subtitle:"content.blades.pages-list.subtitle-blogs",controller:"virtoCommerce.contentModule.pagesListController",template:"Modules/$(VirtoCommerce.Assets)/Scripts/blades/asset-list.tpl.html"};a.showBlade(t,c)},c.addNewTheme=function(e){var t={id:"addTheme",isNew:!0,isActivateAfterSave:!e.themesCount,store:e.store,storeId:e.storeId,controller:"virtoCommerce.contentModule.themeDetailController",template:"Modules/$(VirtoCommerce.Content)/Scripts/blades/themes/theme-detail.tpl.html"};a.showBlade(t,c)},c.addNewPage=function(e){var t={id:"addPage",contentType:"pages",storeId:e.storeId,languages:e.store.languages,currentEntity:{},isNew:!0,title:"content.blades.edit-page.title-new",subtitle:"content.blades.edit-page.subtitle-new",controller:"virtoCommerce.contentModule.pageDetailController",template:"Modules/$(VirtoCommerce.Content)/Scripts/blades/pages/page-detail.tpl.html"};a.showBlade(t,c)},c.addNewLinkList=function(e){var t={id:"addMenuLinkListBlade",storeId:e.storeId,isNew:!0,title:"content.blades.menu-link-list.title-new",subtitle:"content.blades.menu-link-list.subtitle-new",controller:"virtoCommerce.contentModule.menuLinkListController",template:"Modules/$(VirtoCommerce.Content)/Scripts/blades/menu/menu-link-list.tpl.html"};a.showBlade(t,c)},c.addBlog=function(e){var t={id:"newBlog",contentType:"blogs",storeId:e.storeId,currentEntity:{},isNew:!0,title:"content.blades.edit-blog.title-new",subtitle:"content.blades.edit-blog.subtitle-new",controller:"virtoCommerce.contentModule.editBlogController",template:"Modules/$(VirtoCommerce.Content)/Scripts/blades/pages/edit-blog.tpl.html"};a.showBlade(t,c)},c.openTheme=function(e){var t={id:"themeAssetListBlade",contentType:"themes",storeId:e.storeId,currentEntity:{name:e.activeThemeName,url:e.activeThemeURL},subtitle:"content.blades.asset-list.subtitle",controller:"virtoCommerce.contentModule.assetListController",template:"Modules/$(VirtoCommerce.Assets)/Scripts/blades/asset-list.tpl.html"};a.showBlade(t,c)},c.previewTheme=function(e){if(e.store.url)window.open(e.store.url+"?previewtheme="+e.activeThemeName,"_blank");else{s.showNotificationDialog({id:"noUrlInStore",title:"content.dialogs.set-store-url.title",message:"content.dialogs.set-store-url.message"})}},e.openStoresModule=function(){t.go("workspace.storeModule")},c.headIcon="fa fa-code",c.initialize()}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.linkListsController",["$rootScope","$scope","virtoCommerce.contentModule.menus","virtoCommerce.storeModule.stores","platformWebApp.bladeNavigationService","platformWebApp.dialogService","uiGridConstants","platformWebApp.uiGridHelper",function(e,t,n,o,r,i,a,s){t.uiGridConstants=a;var l=t.blade;l.refresh=function(){l.isLoading=!0,n.get({storeId:l.storeId},(function(e){l.currentEntities=e,l.isLoading=!1,l.parentBlade.refresh(l.storeId,"menus")}),(function(e){r.setError("Error "+e.status,l)}))},l.selectNode=function(e,n){t.selectedNodeId=e.id;var o={id:"menuLinkListBlade",storeId:l.storeId,parentRefresh:l.refresh,controller:"virtoCommerce.contentModule.menuLinkListController",template:"Modules/$(VirtoCommerce.Content)/Scripts/blades/menu/menu-link-list.tpl.html"};n?angular.extend(o,{isNew:!0,title:"content.blades.menu-link-list.title-new",subtitle:"content.blades.menu-link-list.subtitle-new"}):angular.extend(o,{listId:e.id,title:"content.blades.menu-link-list.title",titleValues:{name:e.name},subtitle:"content.blades.menu-link-list.subtitle"}),r.showBlade(o,l)},l.deleteList=function(t){r.closeChildrenBlades(l,(function(){var o={id:"confirmDelete",title:"content.dialogs.link-list-delete.title",message:"content.dialogs.link-list-delete.message",callback:function(o){if(o){l.isLoading=!0;var i=_.pluck(t,"id");n.delete({storeId:l.storeId,listIds:i},(function(){l.refresh(),e.$broadcast("cms-menus-changed",l.storeId)}),(function(e){r.setError("Error "+e.status,l)}))}}};i.showConfirmationDialog(o)}))},l.headIcon="fa fa-list-ol",l.toolbarCommands=[{name:"platform.commands.add",icon:"fa fa-plus",executeMethod:function(){l.selectNode({},!0)},canExecuteMethod:function(){return!0},permission:"content:create"},{name:"platform.commands.delete",icon:"fa fa-trash-o",executeMethod:function(){l.deleteList(t.gridApi.selection.getSelectedRows())},canExecuteMethod:function(){return t.gridApi&&_.any(t.gridApi.selection.getSelectedRows())},permission:"content:delete"}],t.setGridOptions=function(e){s.initialize(t,e)},l.refresh()}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.menuLinkListController",["$rootScope","$scope","virtoCommerce.contentModule.menus","virtoCommerce.storeModule.stores","platformWebApp.bladeNavigationService","platformWebApp.dialogService","virtoCommerce.contentModule.menuLinkList-associationTypesService","uiGridConstants","platformWebApp.uiGridHelper",function(e,t,n,o,r,i,a,s,l){var c=t.blade;function d(){return!angular.equals(c.currentEntity,c.origEntity)&&c.hasUpdatePermission()}function u(){if(!c.currentEntity)return!1;var e=c.currentEntity.name,t=_.all(c.currentEntity.menuLinks,(function(e){return e.title&&e.url&&(!e.associatedObjectType||e.associatedObjectId)}));return d()&&e&&t&&_.any(c.currentEntity.menuLinks)}c.updatePermission=c.isNew?"content:create":"content:update",t.uiGridConstants=s,c.initialize=function(){c.isNew?(c.currentEntity={storeId:c.storeId,menuLinks:[{priority:0}]},c.isLoading=!1):n.getList({storeId:c.storeId,listId:c.listId},(function(e){_.each(e.menuLinks,(function(e){e.associatedObjectType&&(e.associatedObject=_.findWhere(t.associatedObjectTypes,{id:e.associatedObjectType}))})),e.menuLinks=_.sortBy(e.menuLinks,"priority").reverse(),c.origEntity=e,c.currentEntity=angular.copy(e),c.isLoading=!1}),(function(e){r.setError("Error "+e.status,c)})),c.toolbarCommands=c.isNew?[]:[{name:"platform.commands.save",icon:"fa fa-save",executeMethod:t.saveChanges,canExecuteMethod:u,permission:c.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(c.origEntity,c.currentEntity)},canExecuteMethod:function(){return!angular.equals(c.origEntity,c.currentEntity)&&c.hasUpdatePermission()},permission:c.updatePermission}],c.toolbarCommands.splice(c.toolbarCommands.length,0,{name:"content.commands.add-link",icon:"fa fa-plus",executeMethod:function(){c.currentEntity.menuLinks.push({priority:0,menuLinkListId:c.listId}),c.recalculatePriority()},canExecuteMethod:function(){return!0},permission:c.updatePermission},{name:"content.commands.delete-links",icon:"fa fa-trash-o",executeMethod:function(){t.deleteRows(t.gridApi.selection.getSelectedRows())},canExecuteMethod:function(){return t.gridApi&&_.any(t.gridApi.selection.getSelectedRows())},permission:c.updatePermission})},t.saveChanges=function(){c.isLoading=!0,n.checkList({storeId:c.storeId,id:c.currentEntity.id,name:c.currentEntity.name,language:c.currentEntity.language},(function(o){if(Boolean(o.result))n.update({storeId:c.storeId},c.currentEntity,(function(n){c.isNew?t.bladeClose():(c.isLoading=!1,c.origEntity=angular.copy(c.currentEntity)),c.parentRefresh&&c.parentRefresh(),e.$broadcast("cms-menus-changed",c.storeId)}),(function(e){r.setError("Error "+e.status,c)}));else{c.isLoading=!1;i.showNotificationDialog({id:"errorInName",title:"content.dialogs.name-must-unique.title",message:"content.dialogs.name-must-unique.message"})}}),(function(e){r.setError("Error "+e.status,c)}))},t.isValid=function(){return u()},t.deleteRows=function(e){var t={id:"confirmDelete",title:"content.dialogs.links-delete.title",message:"content.dialogs.links-delete.message",callback:function(t){t&&_.each(e,(function(e){c.currentEntity.menuLinks.splice(c.currentEntity.menuLinks.indexOf(e),1)}))}};i.showConfirmationDialog(t)},c.onClose=function(e){r.showConfirmationIfNeeded(d()&&!c.isNew,u(),c,t.saveChanges,e,"content.dialogs.link-list-save.title","content.dialogs.link-list-save.message")},c.recalculatePriority=function(){for(var e=0;e<c.currentEntity.menuLinks.length;e++)c.currentEntity.menuLinks[e].priority=10*(c.currentEntity.menuLinks.length-1-e)},c.headIcon="fa fa-list-ol",t.setGridOptions=function(e){l.initialize(t,e,(function(e){e.draggableRows.on.rowFinishDrag(t,c.recalculatePriority)}))},t.associatedObjectTypes=a.objects,c.initialize(),o.get({id:c.storeId},(function(e){c.languages=e.languages}),(function(e){r.setError("Error "+e.status,c)}))}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.editBlogController",["$rootScope","$scope","virtoCommerce.contentModule.contentApi","platformWebApp.dynamicProperties.api","platformWebApp.bladeNavigationService","platformWebApp.dialogService","platformWebApp.dynamicProperties.dictionaryItemsApi","platformWebApp.settings",function(e,t,n,o,r,i,a,s){var l=t.blade;l.updatePermission="content:update";const c=".md";function d(e){o.search({objectType:"VirtoCommerce.ContentModule.Core.Model.FrontMatterHeaders"},(function(t){u(e.metadata,t.results),l.origEntity=angular.copy(l.currentEntity),l.isLoading=!1}),(function(e){r.setError("Error "+e.status,l)}))}function u(e,t){_.each(t,(function(t){t.displayNames=void 0;var n=_.findWhere(e,{name:t.name});n&&t.isMultilingual&&!t.isDictionary&&(n.values=_.pluck(n.values,"value")),t.values=n?n.values:[]})),l.currentEntity.dynamicProperties=t}function m(){return l.currentEntity.name+"/"+l.currentEntity.name+c}function p(){return!angular.equals(l.currentEntity,l.origEntity)&&l.hasUpdatePermission()}function f(){return p()&&g&&g.$valid}var g,h;l.initialize=function(){l.isNew?d({}):n.getWithMetadata({contentType:l.contentType,storeId:l.storeId,relativeUrl:m()},d,(function(e){r.setError("Error "+e.status,l)}))},t.isNameCanBeUsed=e=>!l.isNew&&!l.origEntity||(!(!l.origEntity||e!==l.origEntity.name)||!(l.existedBlogsName&&l.existedBlogsName.includes(e))),t.validateName=e=>{return!/[^0-9a-z -]/.test(e)},t.saveWithMetadata=function(){n.saveWithMetadata({contentType:l.contentType,storeId:l.storeId,folderUrl:l.currentEntity.name},{dynamicProperties:l.currentEntity.dynamicProperties,content:"",name:m()},(function(n){l.isLoading=!1,l.origEntity=angular.copy(l.currentEntity),l.isNew&&(t.bladeClose(),e.$broadcast("cms-statistics-changed",l.storeId)),l.parentBlade.refresh()}),(function(e){r.setError("Error "+e.status,t.blade),l.isLoading=!1}))},t.saveChanges=async function(){l.isLoading=!0;const e=l.currentEntity.url,o=l.currentEntity.name;if(e)if(l.origEntity.name!==l.currentEntity.name){let r=[],i=l.origEntity.name+c;r.push(l.currentEntity.parentUrl+o+"/"+i),r.push(e),await n.createFolder({contentType:l.contentType,storeId:l.storeId},{name:o,parentUrl:l.currentEntity.parentUrl}).$promise,t.saveWithMetadata(),await n.copy({srcPath:e,destPath:l.currentEntity.parentUrl+o}).$promise,await n.delete({contentType:l.contentType,storeId:l.storeId,urls:r}).$promise,l.parentBlade.refresh()}else t.saveWithMetadata();else n.createFolder({contentType:l.contentType,storeId:l.storeId},{name:o,parentUrl:e},t.saveWithMetadata)},l.deleteBlog=function(){n.delete({contentType:l.contentType,storeId:l.storeId,urls:[l.currentEntity.url]},(function(){t.bladeClose(),l.parentBlade.refresh()}),(function(e){r.setError("Error "+e.status,t.blade),l.isLoading=!1}))},l.isNew||(l.toolbarCommands=[{name:"platform.commands.save",icon:"fa fa-save",executeMethod:t.saveChanges,canExecuteMethod:f,permission:l.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(l.origEntity,l.currentEntity)},canExecuteMethod:p,permission:l.updatePermission}]),l.toolbarCommands=l.toolbarCommands||[],l.toolbarCommands.push({name:"content.commands.manage-metadata",icon:"fa fa-edit",executeMethod:function(){var e={id:"dynamicPropertyList",objectType:"VirtoCommerce.ContentModule.Core.Model.FrontMatterHeaders",parentRefresh:function(e){u(l.currentEntity.dynamicProperties,e)},controller:"platformWebApp.dynamicPropertyListController",template:"$(Platform)/Scripts/app/dynamicProperties/blades/dynamicProperty-list.tpl.html"};r.showBlade(e,l)},canExecuteMethod:function(){return!0}}),l.onClose=function(e){r.showConfirmationIfNeeded(p(),f(),l,t.saveChanges,e,"content.dialogs.blog-save.title","content.dialogs.blog-save.message")},t.setForm=function(e){t.formScope=g=e},t.editDictionary=function(e){var t={id:"propertyDictionary",isApiSave:!0,currentEntity:e,controller:"platformWebApp.propertyDictionaryController",template:"$(Platform)/Scripts/app/dynamicProperties/blades/property-dictionary.tpl.html",onChangesConfirmedFn:function(){a.query({id:e.objectType,propertyId:e.id},h)}};r.showBlade(t,l)},t.getDictionaryValues=function(e,t){h=t,a.query({id:e.objectType,propertyId:e.id},t)},t.languages=s.getValues({id:"VirtoCommerce.Core.General.Languages"}),l.headIcon="fa fa-inbox",l.initialize()}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.pageDetailController",["$rootScope","$scope","platformWebApp.validators","platformWebApp.dialogService","virtoCommerce.contentModule.contentApi","$timeout","platformWebApp.bladeNavigationService","platformWebApp.dynamicProperties.api","platformWebApp.settings","FileUploader","platformWebApp.dynamicProperties.dictionaryItemsApi","platformWebApp.i18n",function(e,t,n,o,r,i,a,s,l,c,d,u){var m=t.blade;m.currentLanguage=u.getLanguage(),m.frontMatterHeaders="VirtoCommerce.ContentModule.Core.Model.FrontMatterHeaders",m.dynamicPropertiesTotalCount=0,m.currentEntity.dynamicProperties=[],t.validators=n;var p,f,g=m.contentType.substr(0,1).toUpperCase()+m.contentType.substr(1,m.contentType.length-1);function h(e){var n=m.currentEntity.name||"",o=n.lastIndexOf(".");o>=0&&(o=(n=n.substring(0,o)).lastIndexOf("."))>=0&&(m.currentEntity.language=n.substring(o+1)),m.currentEntity.content=e.content,t.metadata=e.metadata,y()}function y(e,n){m.isLoading=!0,s.search({objectType:"VirtoCommerce.ContentModule.Core.Model.FrontMatterHeaders",take:e||20,skip:n||0},(function(e){b(t.metadata,e.results),t.dynamicPropertiesTotalCount=e.totalCount,t.$broadcast("resetContent",{body:m.currentEntity.content}),t.$broadcast("scrollCompleted"),i((function(){m.origEntity=angular.copy(m.currentEntity)})),m.isLoading=!1}),(function(e){a.setError("Error "+e.status,m)}))}function b(e,t){_.each(t,(function(t){var n=_.findWhere(e,{name:t.name});n&&t.isMultilingual&&!t.isDictionary&&(n.values=_.pluck(n.values,"value")),t.values=n?n.values:[]})),t&&(m.currentEntity.dynamicProperties=m.currentEntity.dynamicProperties.concat(t))}function v(){return!angular.equals(m.currentEntity,m.origEntity)&&m.hasUpdatePermission()}t.fileUploader=new c({url:"api/assets?folderUrl=cms-content/"+g+"/"+m.storeId+"/assets",headers:{Accept:"application/json"},autoUpload:!0,removeAfterUpload:!0,onBeforeUploadItem:function(e){m.isLoading=!0},onSuccessItem:function(e,n,o,r){t.$broadcast("filesUploaded",{items:n})},onErrorItem:function(e,t,n,o){a.setError(e._file.name+" failed: "+(t.message?t.message:n),m)},onCompleteAll:function(){m.isLoading=!1}}),m.editAsMarkdown=!0,m.editAsHtml=!1,m.initializeBlade=function(){m.isNew?h({}):r.getWithMetadata({contentType:m.contentType,storeId:m.storeId,relativeUrl:m.currentEntity.relativeUrl},h,(function(e){a.setError("Error "+e.status,m)}))},t.scrolled=()=>{t.dynamicPropertiesTotalCount>m.currentEntity.dynamicProperties.length&&y(20,m.currentEntity.dynamicProperties.length)},t.saveChanges=function(){m.isLoading=!0,r.saveWithMetadata({contentType:m.contentType,storeId:m.storeId,folderUrl:m.folderUrl||""},m.currentEntity,(function(){m.isLoading=!1,m.origEntity=angular.copy(m.currentEntity),m.isNew&&(t.bladeClose(),e.$broadcast("cms-statistics-changed",m.storeId)),m.parentBlade.refresh()}),(function(e){a.setError("Error "+e.status,m)}))},m.deleteEntry=function(){var e={id:"confirmDelete",title:"content.dialogs.page-delete.title",message:"content.dialogs.page-delete.message",callback:function(e){e&&(m.isLoading=!0,r.delete({contentType:m.contentType,storeId:m.storeId,urls:[m.currentEntity.url]},(function(){m.currentEntity=m.origEntity,t.bladeClose(),m.parentBlade.refresh()})))}};o.showConfirmationDialog(e)},m.isNew||(m.toolbarCommands=[{name:"platform.commands.save",icon:"fa fa-save",executeMethod:t.saveChanges,canExecuteMethod:function(){return v()&&p&&p.$valid},permission:m.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(m.origEntity,m.currentEntity),t.$broadcast("resetContent",{body:m.currentEntity.content})},canExecuteMethod:v,permission:m.updatePermission},{name:"content.commands.edit-as-markdown",icon:"fa fa-code",executeMethod:function(){m.editAsMarkdown=!0,m.editAsHtml=!1,t.$broadcast("changeEditType",{editAsMarkdown:!0,editAsHtml:!1})},canExecuteMethod:function(){return!m.editAsMarkdown},permission:m.updatePermission},{name:"content.commands.edit-as-html",icon:"fa fa-code",executeMethod:function(){m.editAsHtml=!0,m.editAsMarkdown=!1,t.$broadcast("changeEditType",{editAsHtml:!0,editAsMarkdown:!1})},canExecuteMethod:function(){return!m.editAsHtml},permission:m.updatePermission},{name:"content.commands.preview-page",icon:"fa fa-eye",executeMethod:function(){const e={id:"storeUrlList",storeId:m.storeId,contentType:m.contentType,relativeUrl:m.currentEntity.relativeUrl,headIcon:"fa-plus-square-o",controller:"virtoCommerce.contentModule.storeUrlListController",template:"Modules/$(VirtoCommerce.Content)/Scripts/blades/pages/store-url-list.tpl.html"};a.showBlade(e,m)},canExecuteMethod:function(){return!0}}]),m.toolbarCommands=m.toolbarCommands||[],m.toolbarCommands.push({name:"content.commands.manage-metadata",icon:"fa fa-edit",executeMethod:function(){var e={id:"dynamicPropertyList",objectType:"VirtoCommerce.ContentModule.Core.Model.FrontMatterHeaders",parentRefresh:function(e){b(m.currentEntity.dynamicProperties,e)},controller:"platformWebApp.dynamicPropertyListController",template:"$(Platform)/Scripts/app/dynamicProperties/blades/dynamicProperty-list.tpl.html"};a.showBlade(e,m)},canExecuteMethod:function(){return!0}}),t.setForm=function(e){p=e},m.onClose=function(e){a.showConfirmationIfNeeded(v(),m.currentEntity&&m.currentEntity.name&&(v()&&!m.isNew||m.currentEntity.content&&m.isNew),m,t.saveChanges,e,"content.dialogs.page-save.title","content.dialogs.page-save.message")},t.editDictionary=function(e){var t={id:"propertyDictionary",isApiSave:!0,currentEntity:e,controller:"platformWebApp.propertyDictionaryController",template:"$(Platform)/Scripts/app/dynamicProperties/blades/property-dictionary.tpl.html",onChangesConfirmedFn:function(){d.query({id:e.objectType,propertyId:e.id},f)}};a.showBlade(t,m)},t.getDictionaryValues=function(e,t){f=t,d.query({id:e.objectType,propertyId:e.id},t)},t.languages=l.getValues({id:"VirtoCommerce.Core.General.Languages"}),m.headIcon="fa fa-file-o",m.initializeBlade()}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.pagesListController",["$rootScope","$scope","$translate","virtoCommerce.contentModule.contentApi","platformWebApp.bladeNavigationService","platformWebApp.dialogService","platformWebApp.uiGridHelper","platformWebApp.bladeUtils","platformWebApp.validators",function(e,t,n,o,r,i,a,s,l){var c=t.blade;function d(e,t){if(t||e.isOpenable){var n={id:"pageDetail",contentType:c.contentType,storeId:c.storeId,storeUrl:c.storeUrl,languages:c.languages,folderUrl:c.currentEntity.url,currentEntity:e,isNew:t,title:e.name,controller:"virtoCommerce.contentModule.pageDetailController",template:"Modules/$(VirtoCommerce.Content)/Scripts/blades/pages/page-detail.tpl.html"};p()?t?angular.extend(n,{title:"content.blades.edit-page.title-new-post",subtitle:"content.blades.edit-page.subtitle-new-post"}):angular.extend(n,{subtitle:"content.blades.edit-page.subtitle-post"}):t?angular.extend(n,{title:"content.blades.edit-page.title-new",subtitle:"content.blades.edit-page.subtitle-new"}):angular.extend(n,{subtitle:"content.blades.edit-page.subtitle"}),r.showBlade(n,c)}}function u(e,n){var o={id:"blogDetail",contentType:c.contentType,storeId:c.storeId,currentEntity:e,existedBlogsName:t.listEntries.map(e=>e.name),isNew:n,title:e.name,subtitle:"content.blades.edit-blog.subtitle",controller:"virtoCommerce.contentModule.editBlogController",template:"Modules/$(VirtoCommerce.Content)/Scripts/blades/pages/edit-blog.tpl.html"};n&&angular.extend(o,{title:"content.blades.edit-blog.title-new",subtitle:"content.blades.edit-blog.subtitle-new"}),r.showBlade(o,c)}function m(t){r.closeChildrenBlades(c,(function(){var n={id:"confirmDeleteItem",title:"platform.dialogs.folders-delete.title",message:"platform.dialogs.folders-delete.message",callback:function(n){if(n){var i=_.pluck(t,"url");o.delete({contentType:c.contentType,storeId:c.storeId,urls:i},(function(){c.refresh(),e.$broadcast("cms-statistics-changed",c.storeId)}),(function(e){r.setError("Error "+e.status,c)}))}}};p()&&!c.currentEntity.type&&angular.extend(n,{title:"content.dialogs.blog-delete.title",message:"content.dialogs.blog-delete.message"}),i.showConfirmationDialog(n)}))}function p(){return"blogs"===c.contentType}function f(e,t){return{id:e,name:t,blade:c,navigate:function(e){r.closeBlade(c,(function(){c.disableOpenAnimation=!0,r.showBlade(c,c.parentBlade)}))}}}c.updatePermission="content:update",t.selectedNodeId=null,c.refresh=function(){c.isLoading=!0,o.query({contentType:c.contentType,storeId:c.storeId,keyword:c.searchKeyword,folderUrl:c.currentEntity.url},(function(e){t.pageSettings.totalItems=e.length,_.each(e,(function(e){e.isImage=e.mimeType&&e.mimeType.startsWith("image/"),e.isOpenable=e.mimeType&&(e.mimeType.startsWith("application/j")||e.mimeType.startsWith("text/"))})),t.listEntries=e,c.isLoading=!1,function(){if(c.breadcrumbs){var e=c.breadcrumbs.slice(0);if(c.currentEntity.url&&_.all(e,(function(e){return e.id!==c.currentEntity.url}))){var t=f(c.currentEntity.url,c.currentEntity.name);e.push(t)}c.breadcrumbs=e}else c.breadcrumbs=[f(c.currentEntity.url,"all")]}()}),(function(e){r.setError("Error "+e.status,c)}))},t.rename=function(e){var t=prompt("Enter new name",e.name);if(t)if(l.webSafeFileNameValidator(t))o.move({contentType:c.contentType,storeId:c.storeId,oldUrl:e.url,newUrl:e.url.substring(0,e.url.length-e.name.length)+t},c.refresh,(function(e){r.setError("Error "+e.status,c)}));else{var i=n.instant("content.blades.edit-asset.validations.name-invalid");alert(i)}},t.copyUrl=function(e){window.prompt("Copy to clipboard: Ctrl+C, Enter",e.url)},t.downloadUrl=function(e){window.open(e.url,"_blank")},t.selectNode=function(e){if("folder"===e.type){var t={id:c.id,contentType:c.contentType,storeId:c.storeId,storeUrl:c.storeUrl,languages:c.languages,currentEntity:e,breadcrumbs:c.breadcrumbs,title:c.title,subtitle:c.subtitle,controller:c.controller,template:c.template,disableOpenAnimation:!0,isClosingDisabled:c.isClosingDisabled};r.showBlade(t,c.parentBlade)}else c.selectedNodeId=e.url,d(e,!1)},t.delete=function(e){m([e])},c.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:c.refresh,canExecuteMethod:function(){return!0}},{name:"platform.commands.upload",icon:"fa fa-upload",executeMethod:function(){var e={id:"assetUpload",contentType:c.contentType,storeId:c.storeId,currentEntityId:c.currentEntity.url,title:"platform.blades.asset-upload.title",controller:"virtoCommerce.contentModule.assetUploadController",template:"Modules/$(VirtoCommerce.Assets)/Scripts/blades/asset-upload.tpl.html"};r.showBlade(e,c)},canExecuteMethod:function(){return!0},permission:"content:create"}],"pages"===c.contentType?c.toolbarCommands.splice(1,0,{name:"platform.commands.new-folder",icon:"fa fa-folder-o",executeMethod:function(){var e,t;e=n.instant("platform.dialogs.create-folder.title"),null!=(t=prompt(e+"\n\nEnter folder name:"))&&o.createFolder({contentType:c.contentType,storeId:c.storeId},{name:t,parentUrl:c.currentEntity.url},c.refresh)},canExecuteMethod:function(){return!0},permission:"content:create"},{name:"platform.commands.add",icon:"fa fa-plus",executeMethod:function(){d({},!0)},canExecuteMethod:function(){return!0},permission:"content:create"}):p()&&(c.currentEntity.type&&"folder"===c.currentEntity.type?c.toolbarCommands.splice(1,0,{name:"content.commands.add-post",icon:"fa fa-plus",executeMethod:function(){d({},!0)},canExecuteMethod:function(){return!0},permission:"content:create"}):c.toolbarCommands.splice(1,0,{name:"content.commands.add-blog",icon:"fa fa-plus",executeMethod:function(){u({},!0)},canExecuteMethod:function(){return!0},permission:"content:create"})),c.toolbarCommands.push({name:"platform.commands.delete",icon:"fa fa-trash-o",executeMethod:function(){m(t.gridApi.selection.getSelectedRows())},canExecuteMethod:function(){return t.gridApi&&_.any(t.gridApi.selection.getSelectedRows())},permission:"content:delete"}),p()&&!c.currentEntity.type&&(c.contextMenuItems=[{name:"platform.commands.manage",icon:"fa fa-edit",action:function(e){u(e)},permission:c.updatePermission}]),t.setGridOptions=function(e){a.initialize(t,e,(function(e){t.$watch("pageSettings.currentPage",e.pagination.seek)}))},s.initializePagination(t,!0),c.headIcon=p()?"fa fa-inbox":"fa fa-folder-o",c.refresh()}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.storeUrlListController",["$scope","platformWebApp.bladeNavigationService","$localStorage","platformWebApp.validators",function(e,t,n,o){const r=e.blade;r.headIcon="fas fa-key";const i="storeUrlList-"+r.storeId;r.refresh=function(){n[i]?r.currentEntities=n[i]:r.currentEntities=[],r.isLoading=!1},e.selectNode=function(t){e.selectNodeId=t,function(e){const t=r.relativeUrl.split("."),n=_.first(t);let o="";_.size(t)>2&&(o="/"+t[1]);const i="/"+r.contentType;window.open(e.replace(/\/$/,"")+o+i+n,"_blank")}(t)},r.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:r.refresh,canExecuteMethod:function(){return!0}},{name:"platform.commands.manage",icon:"fa fa-edit",executeMethod:function(){const e={id:"editRedirectUris",updatePermission:"platform:security:update",data:r.currentEntities,validator:o.uriWithoutQuery,headIcon:"fa-plus-square-o",controller:"platformWebApp.editArrayController",template:"$(Platform)/Scripts/common/blades/edit-array.tpl.html",onChangesConfirmedFn:function(e){n[i]=angular.copy(e),r.refresh()}};t.showBlade(e,r)},canExecuteMethod:function(){return!0}}],r.refresh()}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.assetDetailController",["$scope","platformWebApp.validators","platformWebApp.dialogService","virtoCommerce.contentModule.contentApi","$timeout","platformWebApp.bladeNavigationService","$http",function(e,t,n,o,r,i,a){var s,l=e.blade;function c(){return!angular.equals(l.currentEntity,l.origEntity)&&(l.isNew||l.hasUpdatePermission())}l.updatePermission="content:update",e.validators=t,e.setForm=function(t){e.formScope=t},l.initializeBlade=function(){l.isNew?l.isLoading=!1:(o.get({contentType:l.contentType,storeId:l.storeId,relativeUrl:l.currentEntity.relativeUrl},(function(e){l.isLoading=!1,l.currentEntity.content=e.data,l.origEntity=angular.copy(l.currentEntity),r((function(){s&&(s.refresh(),s.focus(),l.toolbarCommands.push({name:"platform.commands.undo",icon:"fa fa-rotate-left",executeMethod:function(){s.undo()},canExecuteMethod:function(){return s.historySize().undo>1}}),l.toolbarCommands.push({name:"platform.commands.redo",icon:"fa fa-rotate-right",executeMethod:function(){s.redo()},canExecuteMethod:function(){return s.historySize().redo>0}})),l.origEntity=angular.copy(l.currentEntity)}),1)}),(function(e){i.setError("Error "+e.status,l)})),l.toolbarCommands=[{name:"platform.commands.save",icon:"fa fa-save",executeMethod:e.saveChanges,canExecuteMethod:function(){return c()},permission:l.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(l.origEntity,l.currentEntity)},canExecuteMethod:c,permission:l.updatePermission}])},e.saveChanges=function(){l.isLoading=!0,o.saveMultipartContent({contentType:l.contentType,storeId:l.storeId,folderUrl:l.folderUrl},l.currentEntity,(function(){l.isLoading=!1,l.origEntity=angular.copy(l.currentEntity),l.isNew&&e.bladeClose(),l.parentBlade.refresh()}),(function(e){i.setError("Error "+e.status,l)}))},l.onClose=function(t){i.showConfirmationIfNeeded(c(),l.currentEntity&&l.currentEntity.name&&(c()&&!l.isNew||l.currentEntity.content&&l.isNew),l,e.saveChanges,t,"content.dialogs.asset-save.title","content.dialogs.asset-save.message")},e.editorOptions={lineWrapping:!0,lineNumbers:!0,parserfile:"liquid.js",extraKeys:{"Ctrl-Q":function(e){e.foldCode(e.getCursor())}},foldGutter:!0,gutters:["CodeMirror-linenumbers","CodeMirror-foldgutter"],onLoad:function(e){s=e},mode:function(){if(!l.isNew){if(l.currentEntity.url.endsWith(".json"))return{name:"javascript",json:!0};if(l.currentEntity.url.endsWith(".js"))return"javascript";if(l.currentEntity.url.endsWith(".js.liquid"))return"liquid-javascript";if(l.currentEntity.url.endsWith(".css.liquid"))return"liquid-css";if(l.currentEntity.url.endsWith(".css"))return"css";if(l.currentEntity.url.endsWith(".scss.liquid"))return"liquid-css";if(l.currentEntity.url.endsWith(".liquid"))return"liquid-html"}return"htmlmixed"}()},l.headIcon="fa fa-file-o",l.initializeBlade()}])},function(e,t){angular.module("platformWebApp").controller("virtoCommerce.contentModule.assetListController",["$scope","$translate","virtoCommerce.contentModule.contentApi","platformWebApp.bladeNavigationService","platformWebApp.dialogService","platformWebApp.uiGridHelper","platformWebApp.bladeUtils","platformWebApp.validators",function(e,t,n,o,r,i,a,s){var l=e.blade;function c(){return e.gridApi&&_.any(e.gridApi.selection.getSelectedRows())}function d(e){o.closeChildrenBlades(l,(function(){var t={id:"confirmDeleteItem",title:"platform.dialogs.folders-delete.title",message:"platform.dialogs.folders-delete.message",callback:function(t){if(t){var r=_.pluck(e,"url");n.delete({contentType:l.contentType,storeId:l.storeId,urls:r},l.refresh,(function(e){o.setError("Error "+e.status,l)}))}}};r.showConfirmationDialog(t)}))}function u(e,t){if(t||e.isOpenable){var n={id:"assetDetail",contentType:l.contentType,storeId:l.storeId,themeId:l.themeId,currentEntity:e,isNew:t,isExpandable:!0,controller:"virtoCommerce.contentModule.assetDetailController",template:"Modules/$(VirtoCommerce.Content)/Scripts/blades/themes/asset-detail.tpl.html"};t?angular.extend(n,{folderUrl:l.currentEntity.url,title:"content.blades.edit-asset.title-new",subtitle:"content.blades.edit-asset.subtitle-new"}):angular.extend(n,{folderUrl:e.url.substring(0,e.url.length-e.name.length-1),title:e.name,subtitle:"content.blades.edit-asset.subtitle"}),o.showBlade(n,l)}}function m(e,t){return{id:e,name:t,blade:l,navigate:function(e){o.closeBlade(l,(function(){l.disableOpenAnimation=!0,o.showBlade(l,l.parentBlade)}))}}}l.refresh=function(){l.isLoading=!0,n.query({contentType:l.contentType,storeId:l.storeId,keyword:l.searchKeyword,folderUrl:l.currentEntity.url},(function(t){e.pageSettings.totalItems=t.length,_.each(t,(function(e){e.isImage=e.mimeType&&e.mimeType.startsWith("image/"),e.isOpenable=e.mimeType&&(e.mimeType.startsWith("application/j")||e.mimeType.startsWith("text/"))})),e.listEntries=t,l.isLoading=!1,function(){if(l.breadcrumbs){var e=l.breadcrumbs.slice(0);if(l.currentEntity.url&&_.all(e,(function(e){return e.id!==l.currentEntity.url}))){var t=m(l.currentEntity.url,l.currentEntity.name);e.push(t)}l.breadcrumbs=e}else l.breadcrumbs=[m(l.currentEntity.url,"all")]}()}),(function(e){o.setError("Error "+e.status,l)}))},e.copyUrl=function(e){window.prompt("Copy to clipboard: Ctrl+C, Enter",e.url)},e.downloadUrl=function(e){window.open(e.url,"_blank")},e.rename=function(e){var r=/\/$/.test(e.url),i=prompt("Enter new name",e.name),a=r?e.name.length+1:e.name.length;if(i)if(s.webSafeFileNameValidator(i))n.move({contentType:l.contentType,storeId:l.storeId,oldUrl:e.url,newUrl:e.url.substring(0,e.url.length-a)+i},l.refresh,(function(e){o.setError("Error "+e.status,l)}));else{var c=t.instant("content.blades.edit-asset.validations.name-invalid");alert(c)}},e.delete=function(e){d([e])},e.selectNode=function(e){if("folder"===e.type){var t={id:l.id,contentType:l.contentType,storeId:l.storeId,themeId:l.themeId,currentEntity:e,breadcrumbs:l.breadcrumbs,controller:l.controller,template:l.template,disableOpenAnimation:!0,isClosingDisabled:l.isClosingDisabled};o.showBlade(t,l.parentBlade)}else l.selectedNodeId=e.url,u(e,!1)},l.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:l.refresh,canExecuteMethod:function(){return!0}},{name:"platform.commands.new-folder",icon:"fa fa-folder-o",executeMethod:function(){var e,o;e=t.instant("platform.dialogs.create-folder.title"),null!=(o=prompt(e+"\n\nEnter folder name:"))&&n.createFolder({contentType:l.contentType,storeId:l.storeId},{name:o,parentUrl:l.currentEntity.url},l.refresh)},canExecuteMethod:function(){return!0},permission:"content:create"},{name:"platform.commands.add",icon:"fa fa-plus",executeMethod:function(){u({},!0)},canExecuteMethod:function(){return!0},permission:"content:create"},{name:"platform.commands.upload",icon:"fa fa-upload",executeMethod:function(){var e={id:"assetUpload",contentType:l.contentType,storeId:l.storeId,currentEntityId:l.currentEntity.url,title:"platform.blades.asset-upload.title",controller:"virtoCommerce.contentModule.assetUploadController",template:"Modules/$(VirtoCommerce.Assets)/Scripts/blades/asset-upload.tpl.html"};o.showBlade(e,l)},canExecuteMethod:function(){return!0},permission:"content:create"},{name:"platform.commands.delete",icon:"fa fa-trash-o",executeMethod:function(){d(e.gridApi.selection.getSelectedRows())},canExecuteMethod:c,permission:"content:delete"}],e.setGridOptions=function(t){i.initialize(e,t,(function(t){e.$watch("pageSettings.currentPage",t.pagination.seek)}))},a.initializePagination(e,!0),l.headIcon="fa fa-folder-o",l.title=l.currentEntity.name,l.refresh()}])},function(e,t){angular.module("platformWebApp").controller("virtoCommerce.contentModule.assetUploadController",["$scope","virtoCommerce.contentModule.contentApi","platformWebApp.bladeNavigationService","FileUploader",function(e,t,n,o){var r,i=e.blade;e.addImageFromUrl=function(){i.newExternalImageUrl&&(i.uploadCompleted=!1,t.uploadFromUrl({contentType:i.contentType,storeId:i.storeId,folderUrl:i.currentEntityId,url:i.newExternalImageUrl},(function(){i.parentBlade.refresh(),i.newExternalImageUrl=void 0,i.uploadCompleted=!0})))},i.headIcon="fa fa-file-o",(r=e.uploader=new o({scope:e,headers:{Accept:"application/json"},url:"api/content/"+i.contentType+"/"+i.storeId+"?folderUrl="+(i.currentEntityId||""),method:"POST",autoUpload:!0,removeAfterUpload:!0})).onErrorItem=function(e,t,o,r){n.setError(e._file.name+" failed: "+(t.message?t.message:o),i)},r.onSuccessItem=function(){i.parentBlade.refresh(),i.uploadCompleted=!0},i.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.themeDetailController",["$rootScope","$scope","platformWebApp.bladeNavigationService","virtoCommerce.contentModule.contentApi",function(e,t,n,o){var r=t.blade;function i(e){r.isNew?(r.title="content.blades.theme-detail.title-new",r.subtitle="content.blades.theme-detail.subtitle-new"):(r.title=e.name,r.subtitle="content.blades.theme-detail.subtitle"),r.currentEntity=angular.copy(e),r.origEntity=e,r.isLoading=!1}function a(){return!angular.equals(r.currentEntity,r.origEntity)&&r.hasUpdatePermission()}function s(){return a()&&t.formScope&&t.formScope.$valid}function l(){if(r.isActivateAfterSave){var e=_.findWhere(r.store.dynamicProperties,{name:"DefaultThemeName"});e&&(e.values=[{value:r.currentEntity.name}]),r.store.$update(c,(function(e){n.setError("Error "+e.status,r)}))}else c()}function c(){angular.copy(r.currentEntity,r.origEntity),t.bladeClose(),r.parentBlade.refresh(),e.$broadcast("cms-statistics-changed",r.storeId)}r.refresh=function(e){r.isNew?i({}):(i(r.data),e&&r.parentBlade.refresh())},t.saveChanges=function(){if(r.isLoading=!0,r.isNew)r.currentEntity.defaultTheme?o.copy({srcPath:"Themes/"+r.currentEntity.defaultTheme,destPath:"Themes/"+r.storeId+"/"+r.currentEntity.name},l,(function(e){n.setError("Error "+e.status,r)})):o.createFolder({contentType:"themes",storeId:r.storeId},r.currentEntity,l,(function(e){n.setError("Error "+e.status,r)}));else{var e=r.origEntity.parentUrl.replace("%20"," ")+"/"+r.currentEntity.name+"/";o.move({contentType:"themes",storeId:r.storeId,oldUrl:r.origEntity.url,newUrl:e},(function(t){r.currentEntity.url=e,r.data=r.currentEntity,r.refresh(!0)}),(function(e){n.setError("Error "+e.status,r)}))}},t.setForm=function(e){t.formScope=e},r.onClose=function(e){n.showConfirmationIfNeeded(a(),s(),r,t.saveChanges,e,"content.dialogs.theme-save.title","content.dialogs.theme-save.message")},r.isNew||(r.toolbarCommands=[{name:"platform.commands.save",icon:"fa fa-save",executeMethod:t.saveChanges,canExecuteMethod:s,permission:r.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(r.origEntity,r.currentEntity)},canExecuteMethod:a,permission:r.updatePermission}]),r.refresh(!1)}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.themeUploadController",["$rootScope","$scope","platformWebApp.dialogService","virtoCommerce.contentModule.contentApi","FileUploader","platformWebApp.bladeNavigationService",function(e,t,n,o,r,i){var a=t.blade,s=t.uploader=new r({scope:t,headers:{Accept:"application/json"},url:"api/content/themes/"+a.storeId+"?folderUrl=",queueLimit:1,autoUpload:!1,removeAfterUpload:!1});function l(){t.bladeClose(),a.parentBlade.refresh(),e.$broadcast("cms-statistics-changed",a.storeId)}s.filters.push({name:"zipFilter",fn:function(e,t){return e.name.toLowerCase().endsWith(".zip")}}),s.onWhenAddingFileFailed=function(e,t,n){"queueLimit"===t.name&&(s.clearQueue(),s.addToQueue(e))},s.onAfterAddingFile=function(e){if(t.themeName=e.file.name.substring(0,e.file.name.lastIndexOf(".")),a.currentEntities&&a.currentEntities.length>0&&_.any(a.currentEntities,(function(e){return e.name===t.themeName}))){var o={id:"confirmUploadTheme",title:"content.dialogs.theme-upload-confirmation.title",message:"content.dialogs.theme-upload-confirmation.message",callback:function(e){e&&s.uploadAll()}};n.showConfirmationDialog(o)}else s.uploadAll()},s.onSuccessItem=function(e,n){o.unpack({contentType:"themes",storeId:a.storeId,archivepath:n[0].name,destPath:t.themeName},(function(e){if(a.isActivateAfterSave){var n=_.findWhere(a.store.dynamicProperties,{name:"DefaultThemeName"});n&&(n.values=[{value:t.themeName}]),a.store.$update(l,(function(e){i.setError("Error "+e.status,a)}))}else l()}),(function(e){s.clearQueue(),i.setError("Error "+e.status,t.blade)}))},s.onErrorItem=function(e,t,n,o){i.setError(e._file.name+" failed: "+(t.message?t.message:n),a)},a.title="content.blades.theme-upload.title",a.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.themesListController",["$rootScope","$scope","virtoCommerce.contentModule.themes","virtoCommerce.contentModule.contentApi","virtoCommerce.storeModule.stores","platformWebApp.bladeNavigationService","platformWebApp.dialogService","platformWebApp.uiGridHelper","platformWebApp.dynamicProperties.api",function(e,t,n,o,r,i,a,s,l){t.uiGridConstants=s.uiGridConstants;var c=t.blade;c.updatePermission="content:update",c.contentType="themes",c.defaultThemeName=void 0,c.refresh=function(){c.isLoading=!0,t.selectedNodeId=void 0,o.query({contentType:c.contentType,storeId:c.storeId},(function(e){c.currentEntities=e,r.get({id:c.storeId},(function(e){c.store=e,l.search({objectType:c.store.objectType,objectId:c.store.id},(function(e){var t=e.results;_.each(t,(function(e){e.values=[];var t=_.find(c.store.dynamicProperties,(function(t){return t.id===e.id}));t&&(e.values=t.values)})),c.store.dynamicProperties=t;var n=_.findWhere(c.store.dynamicProperties,{name:"DefaultThemeName"});c.defaultThemeName=n&&_.any(n.values)&&n.values[0].value,c.isLoading=!1}))}),(function(e){i.setError("Error "+e.status,c)}))}),(function(e){i.setError("Error "+e.status,c)}))},t.openBladeNew=function(){t.openDetailsBlade()},t.openDetailsBlade=function(e){t.selectedNodeId=e&&e.name;var n={id:"themeDetail",isNew:!e,isActivateAfterSave:!_.any(c.currentEntities),store:c.store,data:e,storeId:c.storeId,controller:"virtoCommerce.contentModule.themeDetailController",template:"Modules/$(VirtoCommerce.Content)/Scripts/blades/themes/theme-detail.tpl.html"};i.showBlade(n,c)},t.clone=function(e){t.selectedNodeId=e.name;var o={id:"confirm",title:"content.dialogs.theme-clone.title",message:"content.dialogs.theme-clone.message",callback:function(t){t&&(c.isLoading=!0,n.cloneTheme({storeId:c.storeId,themeName:e.name},c.refresh,(function(e){i.setError("Error "+e.status,c)})))}};a.showConfirmationDialog(o)},t.preview=function(e){if(t.selectedNodeId=e.name,c.store.url)window.open(c.store.url+"?previewtheme="+e.name,"_blank");else{a.showNotificationDialog({id:"noUrlInStore",title:"content.dialogs.set-store-url.title",message:"content.dialogs.set-store-url.message",callback:function(){}})}},t.setActive=function(e){t.selectedNodeId=e.name,c.isLoading=!0,_.findWhere(c.store.dynamicProperties,{name:"DefaultThemeName"}).values=[{value:e.name}],c.store.$update((function(){c.refresh(),c.parentBlade.refresh(c.storeId,"defaultTheme",e.name)}),(function(e){i.setError("Error "+e.status,c)}))},t.delete=function(n){t.selectedNodeId=n.name,i.closeChildrenBlades(c,(function(){var t={id:"confirmDelete",title:"content.dialogs.theme-delete.title",message:c.currentEntities.length>1?"content.dialogs.theme-delete.message":"content.dialogs.theme-delete.message-last-one",messageValues:{name:n.name},callback:function(t){t&&(c.isLoading=!0,o.delete({contentType:c.contentType,storeId:c.storeId,urls:[n.url]},(function(){n.name===c.defaultThemeName?(_.findWhere(c.store.dynamicProperties,{name:"DefaultThemeName"}).values=[{value:""}],c.store.$update((function(){c.refresh(),e.$broadcast("cms-statistics-changed",c.storeId)}),(function(e){i.setError("Error "+e.status,c)}))):(c.refresh(),e.$broadcast("cms-statistics-changed",c.storeId))}),(function(e){i.setError("Error "+e.status,c)})))}};a.showConfirmationDialog(t)}))},c.toolbarCommands=[{name:"platform.commands.add",icon:"fa fa-plus",executeMethod:t.openBladeNew,canExecuteMethod:function(){return!0},permission:"content:create"},{name:"platform.commands.upload",icon:"fa fa-upload",executeMethod:function(){var e={id:"themeUpload",isActivateAfterSave:!_.any(c.currentEntities),currentEntities:c.currentEntities,store:c.store,storeId:c.storeId,controller:"virtoCommerce.contentModule.themeUploadController",template:"Modules/$(VirtoCommerce.Content)/Scripts/blades/themes/theme-upload.tpl.html"};i.showBlade(e,c)},canExecuteMethod:function(){return!0},permission:"content:create"}],c.selectNode=function(e){t.selectedNodeId=e.name;var n={id:"themeAssetListBlade",contentType:c.contentType,storeId:c.storeId,currentEntity:e,themeId:e.name,subtitle:"content.blades.asset-list.subtitle",controller:"virtoCommerce.contentModule.assetListController",template:"Modules/$(VirtoCommerce.Assets)/Scripts/blades/asset-list.tpl.html"};i.showBlade(n,c)},t.setGridOptions=function(e){s.initialize(t,e)},c.refresh()}])},function(e,t){angular.module("virtoCommerce.contentModule").factory("virtoCommerce.contentModule.menus",["$resource",function(e){return e("api/cms/:storeId/menu/",{},{get:{url:"api/cms/:storeId/menu/",method:"GET",isArray:!0},getList:{url:"api/cms/:storeId/menu/:listId",method:"GET"},checkList:{url:"api/cms/:storeId/menu/checkname",method:"GET"},update:{url:"api/cms/:storeId/menu/",method:"POST"},delete:{url:"api/cms/:storeId/menu/",method:"DELETE"}})}]).factory("virtoCommerce.contentModule.themes",["$resource",function(e){return e(null,null,{cloneTheme:{url:"api/content/themes/:storeId/cloneTheme",method:"POST"}})}]).factory("virtoCommerce.contentModule.contentApi",["$resource","moment",function(e,t){return e("api/content/:contentType/:storeId",null,{getStatistics:{url:"api/content/:storeId/stats"},query:{url:"api/content/:contentType/:storeId/search",isArray:!0},get:{transformResponse:function(e){return{data:e}}},saveMultipartContent:{method:"POST",headers:{"Content-Type":void 0},transformRequest:function(e){var t=new FormData;return t.append(e.name,e.content),t},isArray:!0},uploadFromUrl:{method:"POST",params:{contentType:"@contentType",storeId:"@storeId",folderUrl:"@folderUrl",url:"@url"},isArray:!0},getWithMetadata:{transformResponse:function(e){var t={},n=e.split("---");if(n.length>2){t.content=n[2].trim();var o=YAML.parse(n[1].trim());t.metadata=_.map(o,(function(e,t){return _.isArray(e)||(e=[e]),{name:t,values:_.map(e,(function(e){return{value:e}}))}}))}else t.content=e;return t}},saveWithMetadata:{method:"POST",headers:{"Content-Type":void 0},transformRequest:function(e){var n={},o=_.filter(e.dynamicProperties,(function(e){return _.any(e.values,(function(t){return t.value||"Boolean"==e.valueType}))}));_.each(o,(function(e){var o,r=e.isArray;if(e.isMultilingual&&!e.isDictionary){r=!0;var i=_.filter(e.values,(function(e){return e.value}));o=_.map(i,(function(e){return{locale:e.locale,value:e.value}}))}else o=_.pluck(e.values,"value"),"DateTime"==e.valueType?o=_.map(o,(function(e){return t(e).format().substring(0,10)})):e.isDictionary&&(o=_.map(o,(function(t){var n={id:t.id,name:t.name};return e.isMultilingual&&(n.displayNames=_.map(t.displayNames,(function(e){return{locale:e.locale,name:e.name}}))),n})));n[e.name]=r?o:o[0]}));var r="---\n"+YAML.stringify(n)+"\n---\n"+(e.content||"").trim(),i=e.name,a=".md",s=i.lastIndexOf(".");s>=0&&(a=i.substring(s),(s=(i=i.substring(0,s)).lastIndexOf("."))>=0&&(i=i.substring(0,s))),e.language&&(i+="."+e.language);var l=new FormData;return l.append(i+a,r),l},isArray:!0},unpack:{url:"api/content/:contentType/:storeId/unpack"},createFolder:{url:"api/content/:contentType/:storeId/folder",method:"POST"},copy:{url:"api/content/copy"},move:{url:"api/content/:contentType/:storeId/move"},delete:{url:"api/content/:contentType/:storeId",method:"DELETE"}})}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.blogsWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.linkListsWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.mainContentItemWidgetController",["$state","$scope","platformWebApp.bladeNavigationService",function(e,t,n){}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.menuWidgetController",["$injector","$rootScope","$scope","virtoCommerce.contentModule.menus","platformWebApp.bladeNavigationService",function(e,t,n,o,r){var i=n.widget.blade;n.widget.initialize=function(){return n.meniLinkListsCount="...",o.query({storeId:i.currentEntityId},(function(e){n.meniLinkListsCount=e.length}),(function(e){}))},n.openBlade=function(){var e={id:"linkListBlade",storeId:i.currentEntityId,parentWidget:n.widget,title:i.title,subtitle:"content.widgets.menu.blade-subtitle",controller:"virtoCommerce.contentModule.linkListsController",template:"Modules/$(VirtoCommerce.Content)/Scripts/blades/menu/link-lists.tpl.html"};r.showBlade(e,i)},n.widget.initialize()}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.pagesWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.storeCMSWidgetController",["$state","$scope","virtoCommerce.contentModule.contentApi","platformWebApp.bladeNavigationService",function(e,t,n,o){var r=t.widget.blade;t.openBlade=function(){e.go("workspace.content",{storeId:r.currentEntityId})},t.statistics={activeThemeName:"...",themesCount:"...",pagesCount:"...",blogsCount:"...",listLinksCount:"..."},n.getStatistics({storeId:r.currentEntityId},(function(e){angular.extend(t.statistics,e)}))}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.storeWidgetController",["$state","$scope","platformWebApp.bladeNavigationService",function(e,t,n){}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.themeActiveWidgetController",["$state","$scope","platformWebApp.bladeNavigationService",function(e,t,n){}])},function(e,t){angular.module("virtoCommerce.contentModule").controller("virtoCommerce.contentModule.themesWidgetController",["$state","$scope","platformWebApp.bladeNavigationService",function(e,t,n){}])},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,