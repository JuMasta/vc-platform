!function(e){var t={};function r(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(o,i,function(t){return e[t]}.bind(null,i));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){r(1),r(2),r(3),r(4),r(5),r(6),r(7),r(8),r(9),r(10),r(11),r(12),r(13),r(14),r(15),r(16),r(17),r(18),r(19),r(20),r(21),r(22),e.exports=r(23)},function(e,t){null!=AppDependencies&&AppDependencies.push("virtoCommerce.customerModule"),angular.module("virtoCommerce.customerModule",["virtoCommerce.customerModule.common"]).config(["$stateProvider",function(e){e.state("workspace.customerModule",{url:"/customers",templateUrl:"$(Platform)/Scripts/common/templates/home.tpl.html",controller:["$scope","platformWebApp.bladeNavigationService",function(e,t){t.showBlade({id:"memberList",currentEntity:{id:null},controller:"virtoCommerce.customerModule.memberListController",template:"Modules/$(VirtoCommerce.Customer)/Scripts/blades/member-list.tpl.html",isClosingDisabled:!0})}]})}]).factory("virtoCommerce.customerModule.predefinedSearchFilters",["$localStorage",function(e){return e.customerSearchFilters=e.customerSearchFilters||[],{register:function(t,r,o){_.each(o,(function(o){var i=_.find(e.customerSearchFilters,(function(e){return e.id==o.id}));i?(!i.lastUpdateTime||i.lastUpdateTime<t)&&angular.copy(o,i):(!e[r]||e[r]<t)&&e.customerSearchFilters.splice(0,0,o)})),e[r]=t}}}]).run(["platformWebApp.mainMenuService","platformWebApp.toolbarService","platformWebApp.breadcrumbHistoryService","platformWebApp.authService","platformWebApp.widgetService","$state","platformWebApp.permissionScopeResolver","virtoCommerce.customerModule.memberTypesResolverService","platformWebApp.settings","virtoCommerce.customerModule.predefinedSearchFilters",function(e,t,r,o,i,n,a,l,s,c){var d={path:"browse/member",icon:"fas fa-address-card",title:"customer.main-menu-title",priority:180,action:function(){n.go("workspace.customerModule")},permission:"customer:access"};e.addMenuItem(d),t.register(r.getBackButtonInstance(),"virtoCommerce.customerModule.memberListController");var m={isVisible:function(e){return!e.isNew},controller:"virtoCommerce.customerModule.customerAccountsWidgetController",template:"Modules/$(VirtoCommerce.Customer)/Scripts/widgets/customerAccountsWidget.tpl.html"},u={controller:"virtoCommerce.customerModule.memberAddressesWidgetController",template:"Modules/$(VirtoCommerce.Customer)/Scripts/widgets/memberAddressesWidget.tpl.html"},p={controller:"virtoCommerce.customerModule.memberEmailsWidgetController",template:"Modules/$(VirtoCommerce.Customer)/Scripts/widgets/memberEmailsWidget.tpl.html"},f={controller:"virtoCommerce.customerModule.memberPhonesWidgetController",template:"Modules/$(VirtoCommerce.Customer)/Scripts/widgets/memberPhonesWidget.tpl.html"},g={controller:"platformWebApp.dynamicPropertyWidgetController",template:"$(Platform)/Scripts/app/dynamicProperties/widgets/dynamicPropertyWidget.tpl.html",isVisible:function(e){return!e.isNew&&o.checkPermission("platform:dynamic_properties:read")}},b={controller:"virtoCommerce.coreModule.seo.seoWidgetController",template:"Modules/$(VirtoCommerce.Core)/Scripts/SEO/widgets/seoWidget.tpl.html",objectType:"Vendor",getDefaultContainerId:function(e){},getLanguages:function(e){return s.getValues({id:"VirtoCommerce.Core.General.Languages"})},isVisible:function(e){return!e.isNew}},y={documentType:"Member",controller:"virtoCommerce.searchModule.indexWidgetController",template:"Modules/$(VirtoCommerce.Search)/Scripts/widgets/index-widget.tpl.html",isVisible:function(e){return!e.isNew}};i.registerWidget(m,"customerDetail1"),i.registerWidget(u,"customerDetail1"),i.registerWidget(p,"customerDetail1"),i.registerWidget(f,"customerDetail2"),i.registerWidget(g,"customerDetail2"),i.registerWidget(y,"customerDetail2"),i.registerWidget(u,"organizationDetail1"),i.registerWidget(p,"organizationDetail1"),i.registerWidget(f,"organizationDetail1"),i.registerWidget(g,"organizationDetail2"),i.registerWidget(y,"organizationDetail2"),i.registerWidget(m,"employeeDetail1"),i.registerWidget(u,"employeeDetail1"),i.registerWidget(p,"employeeDetail1"),i.registerWidget(f,"employeeDetail2"),i.registerWidget(g,"employeeDetail2"),i.registerWidget(y,"employeeDetail2"),i.registerWidget(m,"vendorDetail1"),i.registerWidget(u,"vendorDetail1"),i.registerWidget(p,"vendorDetail1"),i.registerWidget(f,"vendorDetail1"),i.registerWidget(g,"vendorDetail2"),i.registerWidget(b,"vendorDetail2"),i.registerWidget(y,"vendorDetail2"),l.registerType({memberType:"Organization",description:"customer.blades.member-add.organization.description",fullTypeName:"VirtoCommerce.CustomerModule.Core.Model.Organization",icon:"fas fa-building",detailBlade:{template:"Modules/$(VirtoCommerce.Customer)/Scripts/blades/organization-detail.tpl.html",metaFields0:[{name:"name",title:"customer.blades.organization-detail.labels.name",placeholder:"customer.blades.organization-detail.placeholders.name",isRequired:!0,spanAllColumns:!0,valueType:"ShortText"},{spanAllColumns:!0,templateUrl:"groups.html"},{spanAllColumns:!0,templateUrl:"status.html"}],metaFields:[{name:"businessCategory",title:"customer.blades.organization-detail.labels.business-category",spanAllColumns:!0,valueType:"ShortText"},{name:"description",title:"customer.blades.organization-detail.labels.description",placeholder:"customer.blades.organization-detail.placeholders.description",spanAllColumns:!0,valueType:"LongText"}]},knownChildrenTypes:["Organization","Employee","Contact"]}),l.registerType({memberType:"Employee",description:"customer.blades.member-add.employee.description",fullTypeName:"VirtoCommerce.CustomerModule.Core.Model.Employee",icon:"fas fa-user-tie",detailBlade:{template:"Modules/$(VirtoCommerce.Customer)/Scripts/blades/employee-detail.tpl.html",metaFields0:[{title:"customer.blades.employee-detail.labels.first-name",templateUrl:"firstName.html"},{name:"middleName",title:"customer.blades.employee-detail.labels.middle-name",placeholder:"customer.blades.employee-detail.placeholders.middle-name",valueType:"ShortText"},{title:"customer.blades.employee-detail.labels.last-name",templateUrl:"lastName.html"},{title:"customer.blades.employee-detail.labels.full-name",templateUrl:"fullName.html"},{spanAllColumns:!0,templateUrl:"status.html"}],metaFields:[{name:"memberType",title:"customer.blades.employee-detail.labels.type",placeholder:"customer.blades.employee-detail.placeholders.type",colSpan:2,disabled:!0,valueType:"ShortText"},{colSpan:2,title:"customer.blades.employee-detail.labels.birthday",placeholder:"customer.blades.employee-detail.placeholders.birthday",templateUrl:"birthDate.html"},{colSpan:2,title:"customer.blades.employee-detail.labels.organizations",templateUrl:"organizations.html"},{colSpan:2,title:"customer.blades.employee-detail.labels.timezone",templateUrl:"timeZone.html"},{name:"defaultLanguage",title:"customer.blades.employee-detail.labels.defaultLanguage",placeholder:"customer.blades.employee-detail.placeholders.defaultLanguage",valueType:"ShortText"},{name:"photoUrl",title:"customer.blades.employee-detail.labels.photo-url",placeholder:"customer.blades.employee-detail.placeholders.photo-url",valueType:"Url"}]}}),l.registerType({memberType:"Contact",description:"customer.blades.member-add.contact.description",fullTypeName:"VirtoCommerce.CustomerModule.Core.Model.Contact",icon:"far fa-smile",detailBlade:{template:"Modules/$(VirtoCommerce.Customer)/Scripts/blades/customer-detail.tpl.html",metaFields0:[{title:"customer.blades.contact-detail.labels.first-name",templateUrl:"firstName.html"},{title:"customer.blades.contact-detail.labels.last-name",templateUrl:"lastName.html"},{title:"customer.blades.contact-detail.labels.full-name",templateUrl:"fullName.html",colSpan:2},{spanAllColumns:!0,templateUrl:"status.html"},{templateUrl:"groups.html"},{name:"salutation",title:"customer.blades.contact-detail.labels.salutation",placeholder:"customer.blades.contact-detail.placeholders.salutation",valueType:"ShortText"}],metaFields:[{colSpan:2,title:"customer.blades.contact-detail.labels.organizations",templateUrl:"organizations.html"},{colSpan:2,title:"customer.blades.contact-detail.labels.associated-organizations",templateUrl:"associatedOrganizations.html"},{colSpan:2,title:"customer.blades.contact-detail.labels.birthday",templateUrl:"birthDate.html"},{colSpan:2,title:"customer.blades.contact-detail.labels.timezone",templateUrl:"timeZone.html"},{name:"defaultLanguage",title:"customer.blades.contact-detail.labels.defaultLanguage",placeholder:"customer.blades.contact-detail.placeholders.defaultLanguage",valueType:"ShortText"},{name:"taxPayerId",title:"customer.blades.contact-detail.labels.taxpayerId",placeholder:"customer.blades.contact-detail.placeholders.preferred-delivery",valueType:"ShortText"},{name:"preferredCommunication",title:"customer.blades.contact-detail.labels.preferred-communication",placeholder:"customer.blades.contact-detail.placeholders.preferred-communication",valueType:"ShortText"},{name:"preferredDelivery",title:"customer.blades.contact-detail.labels.preferred-delivery",placeholder:"customer.blades.contact-detail.placeholders.preferred-delivery",valueType:"ShortText"}]}}),l.registerType({memberType:"Vendor",description:"customer.blades.member-add.vendor.description",fullTypeName:"VirtoCommerce.CustomerModule.Core.Model.Vendor",icon:"fas fa-briefcase",detailBlade:{template:"Modules/$(VirtoCommerce.Customer)/Scripts/blades/vendor-detail.tpl.html",metaFields0:[{name:"name",title:"customer.blades.vendor-detail.labels.name",placeholder:"customer.blades.vendor-detail.placeholders.name",isRequired:!0,spanAllColumns:!0,valueType:"ShortText"},{spanAllColumns:!0,templateUrl:"status.html"}],metaFields:[{name:"siteUrl",title:"customer.blades.vendor-detail.labels.site-url",placeholder:"customer.blades.vendor-detail.placeholders.site-url",spanAllColumns:!0,valueType:"Url"},{name:"logoUrl",title:"customer.blades.vendor-detail.labels.logo-url",placeholder:"customer.blades.vendor-detail.placeholders.logo-url",spanAllColumns:!0,valueType:"Url"},{name:"groupName",title:"customer.blades.vendor-detail.labels.group-name",placeholder:"customer.blades.vendor-detail.placeholders.group-name",spanAllColumns:!0,valueType:"ShortText"},{name:"description",title:"customer.blades.vendor-detail.labels.description",placeholder:"customer.blades.vendor-detail.placeholders.description",spanAllColumns:!0,valueType:"LongText"}]}});c.register(1583235535540,"customerSearchFiltersDate",[{name:"customer.blades.member-list.labels.filter-new"},{keyword:"membertype:Vendor",id:3,name:"customer.blades.member-list.labels.filter-vendor"},{keyword:"membertype:Contact",id:2,name:"customer.blades.member-list.labels.filter-contact"},{keyword:"membertype:Organization",id:1,name:"customer.blades.member-list.labels.filter-organization"}]);a.register({type:"AssociatedOrganizationsOnlyScope",title:"Only for associated organizations"})}])},function(e,t){angular.module("virtoCommerce.customerModule").controller("virtoCommerce.customerModule.customerAccountsListController",["$scope","platformWebApp.dialogService","platformWebApp.uiGridHelper","platformWebApp.bladeNavigationService","filterFilter","platformWebApp.accounts",function(e,t,r,o,i,n){e.uiGridConstants=r.uiGridConstants;var a=e.blade;function l(e){var t={id:"newAccountWizard",currentEntity:{roles:[],userType:"Customer",storeId:e.id,memberId:a.memberId},title:"platform.blades.account-detail.title-new",subtitle:a.subtitle,controller:"platformWebApp.newAccountWizardController",template:"$(Platform)/Scripts/app/security/wizards/newAccount/new-account-wizard.tpl.html"};o.showBlade(t,a)}a.refresh=function(){a.isLoading=!0,a.parentBlade.refresh()},a.selectNode=function(t){if(o.checkPermission("platform:security:read")){e.selectedNodeId=t.userName;var r={id:"listItemChild",data:t,title:t.userName,subtitle:a.subtitle,controller:"platformWebApp.accountDetailController",template:"$(Platform)/Scripts/app/security/blades/account-detail.tpl.html"};o.showBlade(r,a)}else o.setError("Insufficient permission",a)},e.deleteList=function(e){var r={id:"confirmDeleteItem",title:"platform.dialogs.account-delete.title",message:"platform.dialogs.account-delete.message",callback:function(t){t&&o.closeChildrenBlades(a,(function(){var t=_.pluck(e,"userName");n.remove({names:t},a.refresh)}))}};t.showConfirmationDialog(r)},a.headIcon="fas fa-key",a.toolbarCommands=[{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){o.closeChildrenBlades(a,(function(){var e={id:"pickStoreList",title:"customer.blades.pick-store-list.title",subtitle:"customer.blades.pick-store-list.subtitle",onAfterNodeSelected:l,controller:"virtoCommerce.customerModule.pickStoreListController",template:"Modules/$(VirtoCommerce.Customer)/Scripts/blades/pick-store-list.tpl.html"};o.showBlade(e,a)}))},canExecuteMethod:function(){return!0},permission:"platform:security:create"},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){e.deleteList(e.gridApi.selection.getSelectedRows())},canExecuteMethod:function(){return e.gridApi&&_.any(e.gridApi.selection.getSelectedRows())},permission:"platform:security:delete"}],e.setGridOptions=function(t){r.initialize(e,t,(function(t){t.grid.registerRowsProcessor(e.singleFilter,90)}))},e.singleFilter=function(t){var r=0;return t.forEach((function(e){e.visible=_.any(i([e.entity],a.searchText)),e.visible&&r++})),e.filteredEntitiesCount=r,t},e.$watch("blade.parentBlade.currentEntity",(function(e){a.memberId=e.id,a.currentEntities=angular.copy(e.securityAccounts),a.origEntity=e.securityAccounts,a.isLoading=!1}))}])},function(e,t){angular.module("virtoCommerce.customerModule").controller("virtoCommerce.customerModule.customerDetailController",["$scope","platformWebApp.common.timeZones","platformWebApp.settings","platformWebApp.bladeNavigationService",function(e,t,r,o){var i=e.blade;i.isNew?(i.title="customer.blades.contact-detail.title-new",i.currentEntity=angular.extend({organizations:[]},i.currentEntity),i.parentBlade.currentEntity.id&&i.currentEntity.organizations.push(i.parentBlade.currentEntity.id),i.fillDynamicProperties()):i.subtitle="customer.blades.contact-detail.subtitle",i.datepickers={},i.today=new Date,i.open=function(e,t){e.preventDefault(),e.stopPropagation(),i.datepickers[t]=!0},i.timeZones=t.query(),i.groups=r.getValues({id:"Customer.MemberGroups"}),i.openGroupsDictionarySettingManagement=function(){var e={id:"settingDetailChild",isApiSave:!0,currentEntityId:"Customer.MemberGroups",parentRefresh:function(e){i.groups=e},controller:"platformWebApp.settingDictionaryController",template:"$(Platform)/Scripts/app/settings/blades/setting-dictionary.tpl.html"};o.showBlade(e,i)},i.fetchCustomerOrganizations=function(e){i.fetchOrganizations(e).then((function(){i.customerOrganizations=angular.copy(i.organizations)}))},i.fetchAssociatedOrganizations=function(e){i.fetchOrganizations(e).then((function(){i.associatedOrganizations=angular.copy(i.organizations)}))},i.fetchNextCustomerOrganizations=function(e){i.fetchNextOrganizations(e).then((function(){i.customerOrganizations=angular.copy(i.organizations)}))},i.fetchNextAssociatedOrganizations=function(e){i.fetchNextOrganizations(e).then((function(){i.associatedOrganizations=angular.copy(i.organizations)}))}}])},function(e,t){angular.module("virtoCommerce.customerModule").controller("virtoCommerce.customerModule.employeeDetailController",["$scope","platformWebApp.common.timeZones",function(e,t){var r=e.blade;r.isNew?(r.title="customer.blades.employee-detail.title-new",r.currentEntity=angular.extend({isActive:!0,organizations:[]},r.currentEntity),r.parentBlade.currentEntity.id&&r.currentEntity.organizations.push(r.parentBlade.currentEntity.id),r.fillDynamicProperties()):r.subtitle="customer.blades.employee-detail.subtitle",r.datepickers={},r.today=new Date,r.open=function(e,t){e.preventDefault(),e.stopPropagation(),r.datepickers[t]=!0},r.timeZones=t.query()}])},function(e,t){angular.module("virtoCommerce.customerModule").controller("virtoCommerce.customerModule.filterDetailController",["$scope","$localStorage","$translate",function(e,t,r){var o,i=e.blade;function n(e){i.currentEntity=angular.copy(e),i.origEntity=e,i.isLoading=!1,i.title=i.isNew?"customer.blades.filter-detail.new-title":e.name,i.subtitle=i.isNew?"customer.blades.filter-detail.new-subtitle":"customer.blades.filter-detail.subtitle"}e.saveChanges=function(){i.currentEntity.lastUpdateTime=(new Date).getTime(),angular.copy(i.currentEntity,i.origEntity),i.isNew&&(t.customerSearchFilters.splice(0,0,i.origEntity),t.customerSearchFilterId=i.origEntity.id,i.parentBlade.filter.current=i.origEntity,i.isNew=!1),n(i.origEntity),i.parentBlade.filter.change(!0)},e.setForm=function(e){o=e},i.headIcon="fa fa-filter",i.toolbarCommands=[{name:"core.commands.apply-filter",icon:"fa fa-filter",executeMethod:function(){e.saveChanges()},canExecuteMethod:function(){return o&&o.$valid}},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(i.origEntity,i.currentEntity)},canExecuteMethod:function(){return!angular.equals(i.currentEntity,i.origEntity)}},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){i.parentBlade.filter.current=null,t.customerSearchFilters.splice(t.customerSearchFilters.indexOf(i.origEntity),1),delete t.customerSearchFilterId,i.parentBlade.filter.change()},canExecuteMethod:function(){return!i.isNew}}],i.isNew?r("customer.blades.member-list.labels.unnamed-filter").then((function(e){n({id:(new Date).getTime(),name:e})})):n(i.data)}])},function(e,t){angular.module("virtoCommerce.customerModule").controller("virtoCommerce.customerModule.memberAddController",["$scope","virtoCommerce.customerModule.memberTypesResolverService",function(e,t){var r=e.blade;if(e.addMember=function(t){e.bladeClose((function(){r.parentBlade.showDetailBlade({memberType:t.memberType},!0)}))},r.currentEntity&&r.currentEntity.memberType){var o=t.resolve(r.currentEntity.memberType);e.availableTypes=_.map(o.knownChildrenTypes,(function(e){return t.resolve(e)}))}else e.availableTypes=t.objects;r.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.customerModule").controller("virtoCommerce.customerModule.memberDetailController",["$scope","$q","platformWebApp.bladeNavigationService","virtoCommerce.customerModule.members","platformWebApp.dynamicProperties.api","virtoCommerce.customerModule.organizations","platformWebApp.settings",function(e,t,r,o,i,n,a){var l=e.blade;function s(e){l.currentEntity=angular.copy(e),l.origEntity=e,l.customInitialize(),l.isLoading=!1}function c(){return!angular.equals(l.currentEntity,l.origEntity)&&!l.isNew&&l.hasUpdatePermission()}function d(){return c()&&e.formScope&&e.formScope.$valid}function m(){return l.currentEntity.organizations&&l.currentEntity.organizations.length>0?n.getByIds({ids:l.currentEntity.organizations},(function(e){u(e)})).$promise:t.resolve()}function u(e){e=_.reject(e,e=>_.any(l.organizations,t=>t.id===e.id)),_.any(e)&&(l.organizations=l.organizations.concat(e))}l.updatePermission="customer:update",l.currentEntityId=l.currentEntity.id,l.refresh=function(e){l.isNew?l.currentEntity=angular.extend({dynamicProperties:[],addresses:[],phones:[],emails:[]},l.currentEntity):(l.isLoading=!0,o.get({id:l.currentEntity.id},s),e&&l.parentBlade.refresh(!0))},l.openStatusSettingManagement=function(e){var t={id:"settingDetailChild",isApiSave:!0,currentEntityId:e,controller:"platformWebApp.settingDictionaryController",template:"$(Platform)/Scripts/app/settings/blades/setting-dictionary.tpl.html"};r.showBlade(t,l)},l.statuses=[],l.loadStatuses=function(e){a.get({id:e},(function(e){l.statuses=e.allowedValues,l.isNew&&(l.currentEntity.status=e.defaultValue,l.origEntity.status=e.defaultValue)}))},l.fillDynamicProperties=function(){i.query({id:l.memberTypeDefinition.fullTypeName},(function(e){_.each(e,(function(e){e.displayNames=void 0,e.values=[]})),l.currentEntity.dynamicProperties=e,s(l.currentEntity)}))},l.customInitialize=function(){l.isNew||(l.title=l.currentEntity.name)},e.saveChanges=function(){l.isLoading=!0,l.isNew?o.save(l.currentEntity,(function(){l.parentBlade.refresh(!0),l.origEntity=l.currentEntity,e.bladeClose()})):o.update(l.currentEntity,(function(){l.refresh(!0)}))},e.setForm=function(t){e.formScope=t},l.onClose=function(t){r.showConfirmationIfNeeded(c(),d(),l,e.saveChanges,t,"customer.dialogs.member-save.title","customer.dialogs.member-save.message")},l.isNew||(l.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:e.saveChanges,canExecuteMethod:d,permission:l.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(l.origEntity,l.currentEntity)},canExecuteMethod:c,permission:l.updatePermission}]),l.headIcon=l.memberTypeDefinition.icon,e.pageSize=50,l.fetchOrganizations=function(e){return e.page=0,l.organizations=[],t.all([m(),l.fetchNextOrganizations(e)])},l.fetchNextOrganizations=function(t){return o.search({memberType:"Organization",responseGroup:"default",searchPhrase:t.search,deepSearch:!0,take:e.pageSize,skip:t.page*e.pageSize},(function(e){u(e.results),t.page++})).$promise},l.refresh(!1)}])},function(e,t){angular.module("virtoCommerce.customerModule").controller("virtoCommerce.customerModule.memberEmailsListController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var r,o=e.blade;function i(e){return{value:e}}function n(){return!angular.equals(o.currentEntities,o.origEntity)&&o.hasUpdatePermission()}o.updatePermission="customer:update",e.selectedItem=null,e.selectItem=function(t){e.selectedItem=t},o.onClose=function(i){t.showConfirmationIfNeeded(n(),n()&&r&&r.$valid,o,e.saveChanges,i,"customer.dialogs.email-save.title","customer.dialogs.email-save.message")},e.setForm=function(e){r=e},e.cancelChanges=function(){e.bladeClose()},e.saveChanges=function(){var t=_.pluck(o.currentEntities,"value");angular.copy(t,o.data),angular.copy(o.currentEntities,o.origEntity),e.bladeClose()},o.toolbarCommands=[{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){o.currentEntities.push(i(""))},canExecuteMethod:function(){return!0},permission:o.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(o.origEntity,o.currentEntities)},canExecuteMethod:n,permission:o.updatePermission},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){var t=o.currentEntities.indexOf(e.selectedItem);t>=0&&o.currentEntities.splice(t,1)},canExecuteMethod:function(){return e.selectedItem},permission:o.updatePermission}],e.$watch("blade.parentBlade.currentEntity.emails",(function(e){o.data=e,e=_.map(e,i),o.currentEntities=angular.copy(e),o.origEntity=e,o.isLoading=!1}))}])},function(e,t){angular.module("virtoCommerce.customerModule").controller("virtoCommerce.customerModule.memberListController",["$scope","virtoCommerce.customerModule.members","platformWebApp.dialogService","platformWebApp.bladeUtils","platformWebApp.uiGridHelper","virtoCommerce.customerModule.memberTypesResolverService","platformWebApp.ui-grid.extension",function(e,t,r,o,i,n,a){e.uiGridConstants=i.uiGridConstants;var l=e.blade;l.title="customer.blades.member-list.title";var s=o.bladeNavigationService;function c(e,t){return{id:e,name:t,blade:l,navigate:function(e){e.blade.disableOpenAnimation=!0,s.showBlade(e.blade),e.blade.refresh()}}}function d(o){var i={id:"confirmDeleteItem",title:"customer.dialogs.members-delete.title",message:"customer.dialogs.members-delete.message",callback:function(r){r&&s.closeChildrenBlades(l,(function(){l.isLoading=!0;var r=_.pluck(o,"id");if(null!=e.gridApi&&e.gridApi.selection.getSelectAllState()){var i=u();t.delete(i,(function(){e.gridApi.selection.clearSelectedRows(),l.refresh(!0)}))}else _.any(r)&&t.remove({ids:r},(function(){l.refresh(!0)}))}))}};r.showConfirmationDialog(i)}l.refresh=function(r){l.isLoading=!0;var o=u();l.searchCriteria&&angular.extend(o,l.searchCriteria),t.search(o,(function(t){var r;l.isLoading=!1,e.pageSettings.totalItems=t.totalCount,_.each(t.results,(function(e){(r=n.resolve(e.memberType))&&(e._memberTypeIcon=r.icon)})),Array.isArray(t.results)&&t.results.length&&!t.results[0].outerId&&(t.results[0].outerId=null),e.listEntries=t.results?t.results:[],function(){if(l.breadcrumbs){var e=l.breadcrumbs.slice(0);if(_.all(e,(function(e){return e.id!==l.currentEntity.id}))){var t=c(l.currentEntity.id,l.currentEntity.name);e.push(t)}l.breadcrumbs=e}else l.breadcrumbs=[c(null,"customer.blades.member-list.breadcrumb-all")]}()})),r&&l.parentRefresh&&l.parentRefresh()},l.showDetailBlade=function(e,t){l.setSelectedNode(e);var o=n.resolve(e.memberType);if(o){var i=angular.copy(o.detailBlade);i.currentEntity=e,i.currentEntityId=e.id,i.isNew=t,s.showBlade(i,l)}else r.showNotificationDialog({id:"error",title:"customer.dialogs.unknown-member-type.title",message:"customer.dialogs.unknown-member-type.message",messageValues:{memberType:e.memberType}})},e.delete=function(e){d([e])},l.setSelectedNode=function(t){e.selectedNodeId=t.id},e.selectNode=function(e){l.setSelectedNode(e);var t=n.resolve(e.memberType);if(t&&t.knownChildrenTypes&&t.knownChildrenTypes.length){var r={id:l.id,breadcrumbs:l.breadcrumbs,subtitle:"customer.blades.member-list.subtitle",subtitleValues:{name:e.name},currentEntity:e,disableOpenAnimation:!0,controller:l.controller,template:l.template,isClosingDisabled:!0};s.showBlade(r,l.parentBlade)}else l.showDetailBlade(e)},l.headIcon="fa fa-user __customers",l.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:l.refresh,canExecuteMethod:function(){return!0}},{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){var e={id:"listItemChild",currentEntity:l.currentEntity,title:"customer.blades.member-add.title",subtitle:"customer.blades.member-add.subtitle",controller:"virtoCommerce.customerModule.memberAddController",template:"Modules/$(VirtoCommerce.Customer)/Scripts/blades/member-add.tpl.html"};s.showBlade(e,l)},canExecuteMethod:function(){return!0},permission:"customer:create"},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){d(e.gridApi.selection.getSelectedRows())},canExecuteMethod:function(){return e.gridApi&&_.any(e.gridApi.selection.getSelectedRows())},permission:"customer:delete"}];var m=l.filter={keyword:null};function u(){return{memberType:l.memberType,memberId:l.currentEntity.id,keyword:m.keyword?m.keyword:void 0,deepSearch:!!m.keyword,sort:i.getSortExpression(e),skip:(e.pageSettings.currentPage-1)*e.pageSettings.itemsPerPageCount,take:e.pageSettings.itemsPerPageCount,objectType:"Member"}}m.criteriaChanged=function(){null===m.keyword&&(l.memberType=void 0),e.pageSettings.currentPage>1?e.pageSettings.currentPage=1:l.refresh()},e.setGridOptions=function(t,r){e.gridOptions=r,a.tryExtendGridOptions(t,r),r.onRegisterApi=function(t){e.gridApi=t,t.core.on.sortChanged(e,(function(){l.isLoading||l.refresh()}))},o.initializePagination(e)}}])},function(e,t){angular.module("virtoCommerce.customerModule").controller("virtoCommerce.customerModule.memberPhonesListController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var r,o=e.blade;function i(e){return{value:e}}function n(){return!angular.equals(o.currentEntities,o.origEntity)&&o.hasUpdatePermission()}o.updatePermission="customer:update",e.selectedItem=null,e.selectItem=function(t){e.selectedItem=t},o.onClose=function(i){t.showConfirmationIfNeeded(n(),n()&&r&&r.$valid,o,e.saveChanges,i,"customer.dialogs.phone-number-save.title","customer.dialogs.phone-number-save.message")},e.setForm=function(e){r=e},e.cancelChanges=function(){e.bladeClose()},e.saveChanges=function(){var t=_.pluck(o.currentEntities,"value");angular.copy(t,o.data),angular.copy(o.currentEntities,o.origEntity),e.bladeClose()},o.toolbarCommands=[{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){o.currentEntities.push(i(""))},canExecuteMethod:function(){return!0},permission:o.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(o.origEntity,o.currentEntities)},canExecuteMethod:n,permission:o.updatePermission},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){var t=o.currentEntities.indexOf(e.selectedItem);t>=0&&o.currentEntities.splice(t,1)},canExecuteMethod:function(){return e.selectedItem},permission:o.updatePermission}],e.$watch("blade.parentBlade.currentEntity.phones",(function(e){var t;o.data=e,t=o.data,t=_.map(t,i),o.currentEntities=angular.copy(t),o.origEntity=t,o.isLoading=!1}))}])},function(e,t){angular.module("virtoCommerce.customerModule").controller("virtoCommerce.customerModule.organizationDetailController",["$scope","platformWebApp.settings","platformWebApp.bladeNavigationService",function(e,t,r){var o=e.blade;o.isNew?(o.title="customer.blades.organization-detail.title-new",o.currentEntity.parentId=o.parentBlade.currentEntity.id,o.fillDynamicProperties()):o.subtitle="customer.blades.organization-detail.subtitle",o.groups=t.getValues({id:"Customer.MemberGroups"}),o.openGroupsDictionarySettingManagement=function(){var e={id:"settingDetailChild",isApiSave:!0,currentEntityId:"Customer.MemberGroups",parentRefresh:function(e){o.groups=e},controller:"platformWebApp.settingDictionaryController",template:"$(Platform)/Scripts/app/settings/blades/setting-dictionary.tpl.html"};r.showBlade(e,o)}}])},function(e,t){angular.module("virtoCommerce.customerModule").controller("virtoCommerce.customerModule.pickStoreListController",["$scope","virtoCommerce.storeModule.stores","platformWebApp.bladeUtils","uiGridConstants","platformWebApp.uiGridHelper",function(e,t,r,o,i){e.uiGridConstants=o;var n=e.blade,a=r.bladeNavigationService;n.refresh=function(){n.isLoading=!0,t.search({keyword:l.keyword?l.keyword:void 0,sort:i.getSortExpression(e),skip:(e.pageSettings.currentPage-1)*e.pageSettings.itemsPerPageCount,take:e.pageSettings.itemsPerPageCount},(function(t){n.isLoading=!1,e.pageSettings.totalItems=t.totalCount,n.currentEntities=t.stores}),(function(e){a.setError("Error "+e.status,n)}))},n.selectNode=function(t){e.selectedNodeId=t.id,e.bladeClose((function(){n.onAfterNodeSelected(t)}))},n.headIcon="fa fa-archive",n.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:n.refresh,canExecuteMethod:function(){return!0}}];var l=e.filter={};l.criteriaChanged=function(){e.pageSettings.currentPage>1?e.pageSettings.currentPage=1:n.refresh()},e.setGridOptions=function(t){i.initialize(e,t,(function(t){i.bindRefreshOnSortChanged(e)})),r.initializePagination(e)}}])},function(e,t){angular.module("virtoCommerce.customerModule").controller("virtoCommerce.customerModule.vendorDetailController",["$scope",function(e){var t=e.blade;t.isNew?(t.title="customer.blades.vendor-detail.title-new",t.currentEntity=angular.extend({seoInfos:[]},t.currentEntity),t.fillDynamicProperties()):t.subtitle="customer.blades.vendor-detail.subtitle"}])},function(e,t){angular.module("virtoCommerce.customerModule.common",[]).run(["platformWebApp.metaFormsService",function(e){e.registerMetaFields("CustomeraddressDetails",[{templateUrl:"addressTypeSelector.html",priority:0},{name:"firstName",title:"core.blades.address-detail.labels.first-name",valueType:"ShortText",isRequired:!0,priority:1},{name:"lastName",title:"core.blades.address-detail.labels.last-name",valueType:"ShortText",isRequired:!0,priority:2},{templateUrl:"countrySelector.html",priority:3},{templateUrl:"countryRegionSelector.html",priority:4},{name:"city",title:"core.blades.address-detail.labels.city",valueType:"ShortText",isRequired:!0,priority:5},{name:"line1",title:"core.blades.address-detail.labels.address1",valueType:"ShortText",isRequired:!0,priority:6},{name:"line2",title:"core.blades.address-detail.labels.address2",valueType:"ShortText",priority:7},{name:"postalCode",title:"core.blades.address-detail.labels.zip-code",valueType:"ShortText",isRequired:!0,priority:8},{name:"email",title:"core.blades.address-detail.labels.email",valueType:"Email",priority:9},{name:"phone",title:"core.blades.address-detail.labels.phone",valueType:"ShortText",priority:10}])}])},function(e,t){angular.module("virtoCommerce.customerModule.common").controller("virtoCommerce.customerModule.common.coreAddressDetailController",["$scope","$filter","platformWebApp.common.countries","platformWebApp.dialogService","platformWebApp.metaFormsService","platformWebApp.bladeNavigationService",function(e,t,r,o,i,n){var a=e.blade;a.addressTypes=["Billing","Shipping","BillingAndShipping"],a.metaFields=a.metaFields&&a.metaFields.length?a.metaFields:i.getMetaFields("CustomeraddressDetails"),a.currentEntity.isNew&&(a.currentEntity.addressType=a.addressTypes[1]),a.origEntity=a.currentEntity,a.currentEntity=angular.copy(a.origEntity),a.countries=r.query(),a.defaultAddress=a.currentEntity.isDefault,a.countries.$promise.then(t=>{e.$watch("blade.currentEntity.countryCode",(e,o)=>{if(e){var i=_.findWhere(t,{id:e});i&&(a.currentEntity.countryName=i.name,e!==o&&(a.currentEntity.regionName=void 0,l=[]),i.regions?l=i.regions:r.queryRegions(e).$promise.then(e=>{i.regions=e,l.push(...e)}))}})});var l=[];function s(e,t){e.unshift({name:t,displayName:t})}function c(){return!angular.equals(a.currentEntity,a.origEntity)}function d(){return c()&&e.formScope&&e.formScope.$valid}a.currentEntity.regionName&&!a.currentEntity.regionId&&s(l,a.currentEntity.regionName),a.getRegions=function(e){var r=l;if(e&&e.length>1){var o=t("filter")(r,e);if(_.some(o)){if(o.length>1)for(var i of o=_.filter(o,t=>!t.id&&t.displayName.length>e.length))r.splice(_.indexOf(r,i),1)}else s(r,e)}return r},e.$watch("blade.currentEntity.regionName",(function(e,t){if(e!==t){var r=null;if(e){var o=_.findWhere(l,{name:e});o&&(r=o.id)}a.currentEntity.regionId=r}})),a.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:function(){a.currentEntity.isNew?0==a.numberOfAddresses(a.currentEntity.addressType)?a.currentEntity.isDefault=!0:!0===a.currentEntity.isDefault?a.searchDefaultAddress(a.currentEntity.addressType):a.currentEntity.isDefault=!1:angular.equals(a.currentEntity.addressType,a.origEntity.addressType)?a.searchDefaultAddress(a.currentEntity.addressType):(a.currentEntity.isDefault=!1,0==a.numberOfAddresses(a.currentEntity.addressType)&&(a.currentEntity.isDefault=!0),2==a.numberOfAddresses(a.origEntity.addressType)&&a.origEntity.addressType!==a.addressTypes[2]&&a.searchSecondAddress(a.origEntity.addressType,a.currentEntity.name)),a.currentEntity.addressType==a.addressTypes[2]&&(a.currentEntity.isDefault=!1),a.confirmChangesFn&&a.confirmChangesFn(a.currentEntity),angular.copy(a.currentEntity,a.origEntity),e.bladeClose()},canExecuteMethod:d,permission:a.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(a.origEntity,a.currentEntity)},canExecuteMethod:c},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){var t={id:"confirmDelete",title:"core.dialogs.address-delete.title",message:"core.dialogs.address-delete.message",callback:function(t){t&&(a.deleteFn&&a.deleteFn(a.currentEntity),e.bladeClose(),1==a.numberOfAddresses(a.origEntity.addressType)&&a.currentEntity.addressType!==a.addressTypes[2]&&a.searchSecondAddress(a.origEntity.addressType,a.currentEntity.name))}};o.showConfirmationDialog(t)},canExecuteMethod:function(){return!a.currentEntity.isNew}},{name:"core.commands.default",icon:"fas fa-flag",executeMethod:function(){a.currentEntity.isDefault=!0},canExecuteMethod:function(){return"BillingAndShipping"!=a.currentEntity.addressType&&!a.currentEntity.isDefault},meta:"default"}],a.isLoading=!1,a.onClose=function(t){n.showConfirmationIfNeeded(c(),d(),a,e.saveChanges,t,"core.dialogs.address-save.title","core.dialogs.address-save.message")},e.setForm=function(t){e.formScope=t}}])},function(e,t){angular.module("virtoCommerce.customerModule.common").controller("virtoCommerce.customerModule.common.coreAddressListController",["$timeout","$scope","platformWebApp.bladeNavigationService",function(e,t,r){var o=t.blade;t.selectedItem=null,t.openDetailBlade=function(e){e||(e={isNew:!0}),t.selectedItem=e;var i={id:"coreAddressDetail",currentEntity:e,title:o.title,subtitle:"core.blades.address-detail.subtitle",controller:"virtoCommerce.customerModule.common.coreAddressDetailController",confirmChangesFn:function(e){e.name=t.getAddressName(e),e.isNew&&(e.isNew=void 0,o.currentEntities.push(e),o.confirmChangesFn&&o.confirmChangesFn(e))},deleteFn:function(e){var t=_.find(o.currentEntities,(function(t){return angular.equals(t,e)}));if(t){var r=o.currentEntities.indexOf(t);o.currentEntities.splice(r,1),o.deleteFn&&o.deleteFn(e)}},numberOfAddresses:function(e){var t=0;return o.currentEntities.find(r=>{r.addressType===e&&t++}),t},searchSecondAddress:function(e,t){o.currentEntities.find((r,i)=>{r.addressType===e&&r.name!==t&&(o.currentEntities[i].isDefault=!0)})},searchDefaultAddress:function(e){o.currentEntities.find((t,r)=>{t.addressType===e&&t.isDefault&&(o.currentEntities[r].isDefault=!1)})},template:"Modules/$(VirtoCommerce.Customer)/Scripts/common/blades/address-detail.tpl.html"};r.showBlade(i,t.blade)},t.getAddressName=function(e){return[e.countryCode,e.regionName,e.city,e.line1].join(", ")},o.headIcon=o.parentBlade.headIcon,o.toolbarCommands=[{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){t.openDetailBlade()},canExecuteMethod:function(){return!0}}],o.isLoading=!1,_.some(o.currentEntities)||e(t.openDetailBlade,60,!1)}])},function(e,t){angular.module("virtoCommerce.customerModule").directive("vcCustomerSearch",["$localStorage","platformWebApp.bladeNavigationService","virtoCommerce.customerModule.predefinedSearchFilters",function(e,t,r){return{restrict:"E",templateUrl:function(e,t){return t.templateUrl||"Modules/$(VirtoCommerce.Customer)/Scripts/directives/customerSearch.tpl.html"},scope:{blade:"="},link:function(r){var o=r.blade;r.$localStorage=e;var i=r.filter=o.filter;function n(e){var r={id:"filterDetail",controller:"virtoCommerce.customerModule.filterDetailController",template:"Modules/$(VirtoCommerce.Customer)/Scripts/blades/filter-detail.tpl.html"};angular.extend(r,e),t.showBlade(r,o)}e.customerSearchFilterId&&!i.keyword&&null!==i.keyword&&(i.current=_.findWhere(e.customerSearchFilters,{id:e.customerSearchFilterId}),i.keyword=i.current?i.current.keyword:"",i.searchInVariations=!!i.current&&i.current.searchInVariations),i.change=function(r){e.customerSearchFilterId=i.current?i.current.id:null,i.current&&!i.current.id?(i.current=null,n({isNew:!0})):(r||t.closeBlade({id:"filterDetail"}),i.keyword=i.current?i.current.keyword:"",i.searchInVariations=!!i.current&&i.current.searchInVariations,i.criteriaChanged())},i.edit=function(e,t){i.current=t,n({data:t})},i.criteriaChanged()}}}])},function(e,t){angular.module("virtoCommerce.customerModule").factory("virtoCommerce.customerModule.members",["$resource",function(e){return e("api/members/:id",{},{search:{method:"POST",url:"api/members/search"},update:{method:"PUT"},delete:{method:"POST",url:"api/members/delete"}})}]).factory("virtoCommerce.customerModule.organizations",["$resource",function(e){return e("api/members/organizations",{},{getByIds:{method:"GET",url:"api/organizations",isArray:!0},search:{method:"POST",url:"api/organizations/search"}})}])},function(e,t){angular.module("virtoCommerce.customerModule").factory("virtoCommerce.customerModule.memberTypesResolverService",(function(){return{objects:[],registerType:function(e){e.detailBlade=angular.extend({id:"memberDetail",metaFields:[],controller:"virtoCommerce.customerModule.memberDetailController",memberTypeDefinition:e},e.detailBlade),e.knownChildrenTypes=e.knownChildrenTypes||[],this.objects.push(e)},resolve:function(e){return _.findWhere(this.objects,{memberType:e})}}}))},function(e,t){angular.module("virtoCommerce.customerModule").controller("virtoCommerce.customerModule.customerAccountsWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){e.openBlade=function(){var r={id:"customerChildBlade",title:e.blade.title,subtitle:"customer.widgets.customer-accounts-list.blade-subtitle",controller:"virtoCommerce.customerModule.customerAccountsListController",template:"Modules/$(VirtoCommerce.Customer)/Scripts/blades/customer-accounts-list.tpl.html"};t.showBlade(r,e.blade)}}])},function(e,t){angular.module("virtoCommerce.customerModule").controller("virtoCommerce.customerModule.memberAddressesWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var r=e.widget.blade;e.openBlade=function(){var e={id:"orderOperationAddresses",currentEntities:r.currentEntity.addresses,title:r.title,subtitle:"customer.widgets.address-list.blade-subtitle",controller:"virtoCommerce.customerModule.common.coreAddressListController",template:"Modules/$(VirtoCommerce.Customer)/Scripts/common/blades/address-list.tpl.html"};t.showBlade(e,r)}}])},function(e,t){angular.module("virtoCommerce.customerModule").controller("virtoCommerce.customerModule.memberEmailsWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){e.blade=e.widget.blade,e.openBlade=function(){var r={id:"customerChildBlade",title:e.blade.title,subtitle:"customer.widgets.member-emails-list.blade-subtitle",controller:"virtoCommerce.customerModule.memberEmailsListController",template:"Modules/$(VirtoCommerce.Customer)/Scripts/blades/member-emails-list.tpl.html"};t.showBlade(r,e.blade)}}])},function(e,t){angular.module("virtoCommerce.customerModule").controller("virtoCommerce.customerModule.memberPhonesWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){e.blade=e.widget.blade,e.openBlade=function(){var r={id:"customerChildBlade",title:e.blade.title,subtitle:"customer.widgets.member-phones-list.blade-subtitle",controller:"virtoCommerce.customerModule.memberPhonesListController",template:"Modules/$(VirtoCommerce.Customer)/Scripts/blades/member-phones-list.tpl.html"};t.showBlade(r,e.blade)}}])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,