!function(e){var t={};function i(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)i.d(r,o,function(t){return e[t]}.bind(null,o));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){i(1),i(2),i(3),i(4),i(5),i(6),i(7),i(8),i(9),i(10),i(11),e.exports=i(12)},function(e,t){var i="virtoCommerce.subscriptionModule";void 0!==AppDependencies&&AppDependencies.push(i),angular.module(i,["virtoCommerce.orderModule"]).config(["$stateProvider",function(e){e.state("workspace.subscriptionModule",{url:"/subscriptions",templateUrl:"$(Platform)/Scripts/common/templates/home.tpl.html",controller:["$scope","platformWebApp.bladeNavigationService",function(e,t){t.showBlade({id:"subscription-list",title:"subscription.blades.subscription-list.title",controller:"virtoCommerce.subscriptionModule.subscriptionListController",template:"Modules/$(VirtoCommerce.Subscription)/Scripts/blades/subscription-list.tpl.html",isClosingDisabled:!0}),e.moduleName="vc-order vc-subscription"}]})}]).run(["$http","$compile","platformWebApp.mainMenuService","platformWebApp.widgetService","$state","virtoCommerce.orderModule.knownOperations","platformWebApp.authService",function(e,t,i,r,o,n,s){var a={path:"browse/subscriptions",icon:"fa fa-retweet",title:"subscription.main-menu-title",priority:100,action:function(){o.go("workspace.subscriptionModule")},permission:"subscription:access"};i.addMenuItem(a);var l=n.getOperation("CustomerOrder"),c=angular.copy(l.detailBlade.knownChildrenOperations),u=["isApproved","number","status","discountAmount"],d=_.filter(l.detailBlade.metaFields,(function(e){return!_.contains(u,e.name)})),p=[{name:"number",isRequired:!0,title:"subscription.blades.subscription-detail.labels.number",valueType:"ShortText"},{name:"currentPeriodEnd",title:"subscription.blades.subscription-detail.labels.billing-date",valueType:"DateTime"},{name:"endDate",title:"subscription.blades.subscription-detail.labels.expiration",valueType:"DateTime"},{name:"trialEnd",title:"subscription.blades.subscription-detail.labels.trial-expiration",valueType:"DateTime"}];_.each(d,(function(e){p.push(e)})),n.registerOperation({type:"Subscription",detailBlade:{id:"subscriptionDetail",controller:"virtoCommerce.subscriptionModule.subscriptionDetailController",template:"Modules/$(VirtoCommerce.Subscription)/Scripts/blades/subscription-detail.tpl.html",knownChildrenOperations:c,metaFields:p}}),e.get("Modules/$(VirtoCommerce.Orders)/Scripts/blades/customerOrder-detail.tpl.html").then((function(e){t(e.data)})),r.registerWidget({controller:"virtoCommerce.subscriptionModule.subscriptionOrdersWidgetController",template:"Modules/$(VirtoCommerce.Subscription)/Scripts/widgets/subscription-orders-widget.tpl.html"},"subscriptionDetail"),r.registerWidget({controller:"virtoCommerce.subscriptionModule.orderDynamicPropertyWidgetController",template:"Modules/$(VirtoCommerce.Subscription)/Scripts/widgets/orderDynamicPropertyWidget.tpl.html"},"subscriptionDetail"),r.registerWidget({controller:"platformWebApp.changeLog.operationsWidgetController",template:"$(Platform)/Scripts/app/changeLog/widgets/operations-widget.tpl.html"},"subscriptionDetail"),r.registerWidget({controller:"virtoCommerce.subscriptionModule.notificationsLogWidgetController",template:"Modules/$(VirtoCommerce.Subscription)/Scripts/widgets/notificationsLogWidget.tpl.html"},"subscriptionDetail");var m={controller:"virtoCommerce.subscriptionModule.scheduleWidgetController",template:"Modules/$(VirtoCommerce.Subscription)/Scripts/widgets/integrations/schedule-widget.tpl.html"};r.registerWidget(m,"subscriptionDetail"),r.registerWidget(m,"itemDetail"),_.each(r.widgetsMap.customerOrderDetailWidgets,(function(e){"platformWebApp.dynamicPropertyWidgetController"!==e.controller&&"virtoCommerce.orderModule.notificationsLogWidgetController"!==e.controller&&r.registerWidget(e,"subscriptionDetail")})),r.registerWidget({controller:"virtoCommerce.subscriptionModule.orderSubscriptionWidgetController",isVisible:function(e){return"orderDetail"===e.id&&s.checkPermission("subscription:read")},template:"Modules/$(VirtoCommerce.Subscription)/Scripts/widgets/integrations/order-subscription-widget.tpl.html"},"customerOrderDetailWidgets")}])},function(e,t){angular.module("virtoCommerce.subscriptionModule").controller("virtoCommerce.subscriptionModule.filterDetailController",["$scope","$localStorage","virtoCommerce.storeModule.stores","platformWebApp.settings","virtoCommerce.customerModule.members","$translate",function(e,t,i,r,o,n){var s,a=e.blade;function l(e){a.currentEntity=angular.copy(e),a.origEntity=e,a.isLoading=!1,a.title=a.isNew?"subscription.blades.filter-detail.new-title":e.name,a.subtitle=a.isNew?"subscription.blades.filter-detail.new-subtitle":"subscription.blades.filter-detail.subtitle"}a.metaFields=[{name:"statuses",title:"subscription.blades.subscription-detail.labels.status",templateUrl:"statusesSelector.html"},{name:"storeId",title:"orders.blades.customerOrder-detail.labels.store",templateUrl:"storeSelector.html"},{name:"startDate",title:"subscription.blades.filter-detail.labels.from",valueType:"DateTime"},{name:"endDate",title:"subscription.blades.filter-detail.labels.to",valueType:"DateTime"},{name:"outerId",title:"subscription.blades.filter-detail.labels.outer-id",valueType:"ShortText"}],a.statuses=r.getValues({id:"Subscription.Status"}),a.stores=i.query(),e.saveChanges=function(){angular.copy(a.currentEntity,a.origEntity),a.isNew&&(t.subscriptionSearchFilters.push(a.origEntity),t.subscriptionSearchFilterId=a.origEntity.id,a.parentBlade.filter.current=a.origEntity,a.isNew=!1),l(a.origEntity),a.parentBlade.filter.criteriaChanged()},e.setForm=function(e){s=e},a.headIcon="fa fa-filter",a.toolbarCommands=[{name:"core.commands.apply-filter",icon:"fa fa-filter",executeMethod:function(){e.saveChanges()},canExecuteMethod:function(){return s&&s.$valid}},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(a.origEntity,a.currentEntity)},canExecuteMethod:function(){return!angular.equals(a.currentEntity,a.origEntity)}},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){a.parentBlade.filter.current=null,t.subscriptionSearchFilters.splice(t.subscriptionSearchFilters.indexOf(a.origEntity),1),delete t.subscriptionSearchFilterId,a.parentBlade.refresh(),e.bladeClose()},canExecuteMethod:function(){return!a.isNew}}],a.isNew?n("subscription.blades.subscription-list.labels.unnamed-filter").then((function(e){l({id:(new Date).getTime(),name:e})})):l(a.data)}])},function(e,t){angular.module("virtoCommerce.subscriptionModule").controller("virtoCommerce.subscriptionModule.scheduleDetailController",["$scope","platformWebApp.bladeNavigationService","platformWebApp.dialogService","virtoCommerce.subscriptionModule.scheduleAPI",function(e,t,i,r){var o=e.blade;function n(){return!angular.equals(o.currentEntity,o.origEntity)&&o.hasUpdatePermission()}function s(){return n()&&e.formScope.$valid}o.updatePermission="subscription:update",o.isNew=!o.data.id,o.initialize=function(t){o.isNew&&angular.extend(t,{intervalCount:1,interval:e.intervals[2]}),o.origEntity=t,o.currentEntity=angular.copy(t),o.isLoading=!1},e.intervals=["days","weeks","months","years"],e.setForm=function(t){e.formScope=t},o.onClose=function(i){t.showConfirmationIfNeeded(n()&&!o.isNew,s(),o,e.saveChanges,i,"subscription.dialogs.schedule-save.title","subscription.dialogs.schedule-save.message")},e.cancelChanges=function(){o.currentEntity=o.origEntity,e.bladeClose()},e.saveChanges=function(){o.isApiSave?(o.isLoading=!0,o.isNew&&(o.currentEntity.id=o.itemId),r.save(o.currentEntity,(function(){angular.copy(o.currentEntity,o.origEntity),e.bladeClose()}))):(angular.copy(o.currentEntity,o.origEntity),e.bladeClose())},o.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:e.saveChanges,canExecuteMethod:s,permission:o.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(o.origEntity,o.currentEntity)},canExecuteMethod:n,permission:o.updatePermission},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){i.showConfirmationDialog({id:"confirmDeleteItem",title:"subscription.dialogs.schedule-delete.title",message:"subscription.dialogs.schedule-delete.message",callback:function(t){t&&r.delete({ids:[o.origEntity.id]},(function(){o.currentEntity={},angular.copy(o.currentEntity,o.origEntity),e.bladeClose()}))}})},canExecuteMethod:function(){return!0},permission:"subscription:delete"}],!o.isNew&&o.isApiSave||(e.blade.toolbarCommands.splice(0,1),e.blade.toolbarCommands.splice(1,1)),o.isNew?angular.extend(o,{title:"subscription.blades.schedule-detail.title-new",subtitle:"subscription.blades.schedule-detail.subtitle-new"}):angular.extend(o,{title:"subscription.blades.schedule-detail.title"}),o.initialize(o.data)}])},function(e,t){angular.module("virtoCommerce.subscriptionModule").controller("virtoCommerce.subscriptionModule.subscriptionDetailController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.subscriptionModule.subscriptionAPI","platformWebApp.dialogService","virtoCommerce.orderModule.order_res_customerOrders","$timeout","focus","moment",function(e,t,i,r,o,n,s,a){var l=e.blade;function c(){return l.origEntity&&!angular.equals(l.origEntity,l.currentEntity)&&!l.isNew&&l.hasUpdatePermission()}function u(){return c()&&(!e.formScope||e.formScope.$valid)}l.updatePermission="subscription:update",l.customerOrder={},l.toolbarCommands=[],l.refresh=function(){"operationDetail"===l.id||(l.isLoading=!0,i.get({id:l.entityNode.id},(function(e){e.items=e.customerOrderPrototype.items,l.initialize(e),l.customerOrder=l.currentEntity.customerOrderPrototype,l.securityScopes=e.scopes})))},l.initialize=function(o){l.origEntity=o,l.currentEntity=angular.copy(o),angular.extend(l,{title:"subscription.blades.subscription-detail.title",titleValues:{number:l.origEntity.number},subtitle:"subscription.blades.subscription-detail.subtitle"}),l.toolbarCommands=[{name:"orders.commands.new-document",icon:"fas fa-plus",executeMethod:function(){var e={id:"newOperationWizard",customerOrder:l.customerOrder,currentEntity:l.currentEntity,stores:l.stores,availableTypes:l.knownChildrenOperations,title:"orders.blades.newOperation-wizard.title",subtitle:"orders.blades.newOperation-wizard.subtitle",controller:"virtoCommerce.orderModule.newOperationWizardController",template:"Modules/$(VirtoCommerce.Orders)/Scripts/wizards/newOperation/newOperation-wizard.tpl.html"};t.showBlade(e,l)},canExecuteMethod:function(){return!l.isLocked&&_.any(l.knownChildrenOperations)},permission:l.updatePermission},{name:"platform.commands.save",icon:"fas fa-save",executeMethod:e.saveChanges,canExecuteMethod:u,permission:l.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(l.origEntity,l.currentEntity)},canExecuteMethod:c,permission:l.updatePermission},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){var e={id:"confirmDeleteItem",title:"orders.dialogs.operation-delete.title",message:"orders.dialogs.operation-delete.message",callback:function(e){e&&("operationDetail"===l.id||i.delete({ids:l.origEntity.id},(function(){l.parentBlade.refresh(),t.closeBlade(l)})))}};r.showConfirmationDialog(e)},canExecuteMethod:function(){return!0},permission:"order:delete"},{name:"orders.commands.cancel-document",icon:"fa fa-remove",executeMethod:function(){var t={id:"confirmCancelOperation",callback:function(t){l.currentEntity.cancelReason=null==t||t.replace(/\s/g,"").length<1?null:t,l.currentEntity.cancelledDate=a().utc(),l.currentEntity.isCancelled=!0,l.setEntityStatus("Cancelled"),e.saveChanges()}};r.showDialog(t,"Modules/$(VirtoCommerce.Orders)/Scripts/dialogs/cancelOperation-dialog.tpl.html","virtoCommerce.orderModule.confirmCancelDialogController")},canExecuteMethod:function(){return l.currentEntity&&!l.currentEntity.isCancelled},permission:l.updatePermission},{name:"subscription.commands.new-order",icon:"fa fa-file-text",executeMethod:function(){r.showConfirmationDialog({id:"confirmDialog",title:"subscription.dialogs.new-order.title",message:"subscription.dialogs.new-order.message",callback:function(e){e&&t.closeChildrenBlades(l,(function(){i.createOrder(l.currentEntity,(function(e){l.refresh(),l.parentBlade.refresh()}))}))}})},canExecuteMethod:function(){return!l.isLocked&&!c()},permission:"order:create"}],l.isLocked=l.currentEntity.isCancelled,l.isLoading=!1},l.setEntityStatus=function(e){l.currentEntity.subscriptionStatus=e},l.recalculate=function(){l.isLoading=!0,o.recalculate(l.customerOrder,(function(e){angular.copy(e,l.customerOrder);var t=document.activeElement.id;t&&n((function(){s(t),document.getElementById(t).select()})),l.isLoading=!1}))},e.saveChanges=function(){"operationDetail"===l.id?(angular.copy(l.currentEntity,l.origEntity),e.bladeClose(),l.isTotalsRecalculationNeeded&&l.recalculate()):(l.isLoading=!0,i.update(l.currentEntity,(function(){l.refresh(),l.parentBlade.refresh()})))},e.cancelChanges=function(){l.currentEntity=l.origEntity,e.bladeClose()},e.setForm=function(t){e.formScope=t},l.onClose=function(i){t.showConfirmationIfNeeded(c(),u(),l,e.saveChanges,i,"orders.dialogs.operation-save.title","orders.dialogs.operation-save.message")},e.cancelOperationResolution=function(e){$modalInstance.close(e)},l.refresh()}])},function(e,t){angular.module("virtoCommerce.subscriptionModule").controller("virtoCommerce.subscriptionModule.subscriptionListController",["$scope","$localStorage","virtoCommerce.subscriptionModule.subscriptionAPI","virtoCommerce.orderModule.knownOperations","platformWebApp.bladeNavigationService","platformWebApp.dialogService","platformWebApp.uiGridHelper","platformWebApp.bladeUtils","dateFilter",function(e,t,i,r,o,n,s,a,l){e.uiGridConstants=s.uiGridConstants;var c=e.blade;c.refresh=function(){c.isLoading=!0;var t={keyword:u.keyword,sort:s.getSortExpression(e),skip:(e.pageSettings.currentPage-1)*e.pageSettings.itemsPerPageCount,take:e.pageSettings.itemsPerPageCount,responseGroup:"Default"};u.current&&angular.extend(t,u.current),i.search(t,(function(t){e.pageSettings.totalItems=t.totalCount,c.currentEntities=t.results,c.isLoading=!1}))},e.openDetailsBlade=function(t){e.selectedNodeId=t.id;var i=r.getOperation("Subscription"),n=angular.copy(i.detailBlade);n.entityNode=t,o.showBlade(n,c)},e.deleteList=function(t){var r={id:"confirmDelete",callback:function(r){r&&o.closeChildrenBlades(c,(function(){e.selectedNodeId=void 0,c.isLoading=!0;var r=_.pluck(t,"id");i.remove({ids:r},c.refresh)}))}};n.showDialog(r,"Modules/$(VirtoCommerce.Subscription)/Scripts/dialogs/deleteSubscription-dialog.tpl.html","platformWebApp.confirmDialogController")},c.headIcon="fa fa-retweet",c.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:c.refresh,canExecuteMethod:function(){return!0}},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){e.deleteList(e.gridApi.selection.getSelectedRows())},canExecuteMethod:function(){return e.gridApi&&_.any(e.gridApi.selection.getSelectedRows())},permission:"subscription:delete"}];var u=c.filter=e.filter={};function d(e){var t={id:"filterDetail",controller:"virtoCommerce.subscriptionModule.filterDetailController",template:"Modules/$(VirtoCommerce.Subscription)/Scripts/blades/filter-detail.tpl.html"};angular.extend(t,e),o.showBlade(t,c)}e.$localStorage=t,t.subscriptionSearchFilters||(t.subscriptionSearchFilters=[{name:"subscription.blades.subscription-list.labels.new-filter"}]),t.subscriptionSearchFilterId&&(u.current=_.findWhere(t.subscriptionSearchFilters,{id:t.subscriptionSearchFilterId})),u.change=function(){t.subscriptionSearchFilterId=u.current?u.current.id:null,u.current&&!u.current.id?(u.current=null,d({isNew:!0})):(o.closeBlade({id:"filterDetail"}),u.criteriaChanged())},u.edit=function(){u.current&&d({data:u.current})},u.criteriaChanged=function(){e.pageSettings.currentPage>1?e.pageSettings.currentPage=1:c.refresh()},e.setGridOptions=function(t){var i=_.findWhere(t.columnDefs,{name:"createdDate"});i&&(i.cellTooltip=function(e,t){return l(e.entity.createdDate,"medium")}),s.initialize(e,t,(function(t){s.bindRefreshOnSortChanged(e)})),a.initializePagination(e)}}])},function(e,t){angular.module("virtoCommerce.subscriptionModule").factory("virtoCommerce.subscriptionModule.subscriptionAPI",["$resource",function(e){return e("api/subscriptions/:id",null,{search:{method:"POST",url:"api/subscriptions/search"},update:{method:"PUT"},createOrder:{method:"POST",url:"api/subscriptions/order"}})}]).factory("virtoCommerce.subscriptionModule.scheduleAPI",["$resource",function(e){return e("api/subscriptions/plans/:id")}])},function(e,t){angular.module("virtoCommerce.subscriptionModule").controller("virtoCommerce.subscriptionModule.notificationsLogWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var i=e.widget.blade;i.showSubscriptionNotificationsLog=function(){var e={id:"notificationLogWidgetChild",objectId:i.currentEntity.id,objectType:"Subscription",title:"subscription.widgets.notificationsLogWidget.blade-title",subtitle:"subscription.widgets.notificationsLogWidget.blade-subtitle",controller:"virtoCommerce.notificationsModule.notificationsJournalController",template:"Modules/$(VirtoCommerce.Notifications)/Scripts/blades/notifications-journal.tpl.html"};t.showBlade(e,i)}}])},function(e,t){angular.module("virtoCommerce.subscriptionModule").controller("virtoCommerce.subscriptionModule.notificationsWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var i=e.widget.blade;i.showNotifications=function(){var e={id:"notificationWidgetChild",objectId:i.currentEntity.id,objectType:"Subscription",title:"subscription.widgets.notificationsWidget.blade-title",subtitle:"subscription.widgets.notificationsWidget.blade-subtitle",controller:"virtoCommerce.notificationsModule.notificationsListController",template:"Modules/$(VirtoCommerce.Notifications)/Scripts/app/notifications/blades/notifications-list.tpl.html"};t.showBlade(e,i)}}])},function(e,t){angular.module("virtoCommerce.subscriptionModule").controller("virtoCommerce.subscriptionModule.orderDynamicPropertyWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var i=e.widget.blade;e.openBlade=function(){var e={id:"dynamicPropertiesList",currentEntity:i.customerOrder,controller:"platformWebApp.propertyValueListController",template:"$(Platform)/Scripts/app/dynamicProperties/blades/propertyValue-list.tpl.html"};t.showBlade(e,i)},e.$watch("widget.blade.customerOrder",(function(t){if(angular.isDefined(t)){var i=_.groupBy(t.dynamicProperties,(function(e){return e.id}));e.dynamicPropertyCount=_.keys(i).length}}))}])},function(e,t){angular.module("virtoCommerce.subscriptionModule").controller("virtoCommerce.subscriptionModule.subscriptionOrdersWidgetController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.orderModule.order_res_customerOrders",function(e,t,i){var r=e.blade;e.openBlade=function(){if(!r.isLoading){var e={id:"subscriptionOrders",title:"subscription.blades.subscriptionOrder-list.title",controller:"virtoCommerce.orderModule.customerOrderListController",template:"Modules/$(VirtoCommerce.Orders)/Scripts/blades/customerOrder-list.tpl.html",hideDelete:!0};r.currentEntity.id&&(e.refreshCallback=function(){var e={subscriptionIds:[r.currentEntity.id]};return i.search(e)}),t.showBlade(e,r)}}}])},function(e,t){angular.module("virtoCommerce.subscriptionModule").controller("virtoCommerce.subscriptionModule.orderSubscriptionWidgetController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.orderModule.knownOperations",function(e,t,i){var r=e.blade;e.subscription={id:r.customerOrder.subscriptionId,number:r.customerOrder.subscriptionNumber},e.openBlade=function(){if(e.subscription.id)if(t.findBlade("subscriptionDetail"))t.closeBlade(r.parentBlade);else{var o=i.getOperation("Subscription"),n=angular.copy(o.detailBlade);n.entityNode=e.subscription,t.showBlade(n,r)}}}])},function(e,t){angular.module("virtoCommerce.subscriptionModule").controller("virtoCommerce.subscriptionModule.scheduleWidgetController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.subscriptionModule.scheduleAPI",function(e,t,i){var r=e.blade;e.loading=!0;var o="subscriptionDetail"!==r.id;o?i.get({id:r.itemId},(function(t){e.schedule=t,e.loading=!1})):e.$watch("blade.currentEntity",(function(t){t&&(e.schedule=t,e.loading=!1)})),e.openBlade=function(){var i={id:"orderOperationChild",isApiSave:o,itemId:r.itemId,data:e.schedule,controller:"virtoCommerce.subscriptionModule.scheduleDetailController",template:"Modules/$(VirtoCommerce.Subscription)/Scripts/blades/schedule-detail.tpl.html"};t.showBlade(i,r)}}])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,