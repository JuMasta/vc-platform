!function(e){var t={};function o(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=t,o.d=function(e,t,i){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(i,n,function(t){return e[t]}.bind(null,n));return i},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){o(1),o(2),o(3),o(4),o(5),o(6),o(7),o(8),e.exports=o(9)},function(e,t){null!=AppDependencies&&AppDependencies.push("virtoCommerce.imageToolsModule"),angular.module("virtoCommerce.imageToolsModule",["ui.grid.infiniteScroll"]).constant("imageToolsConfig",{intMaxValue:2147483647}).config(["$stateProvider",function(e){e.state("workspace.thumbnail",{url:"/thumbnail",templateUrl:"$(Platform)/Scripts/common/templates/home.tpl.html",controller:["$scope","platformWebApp.bladeNavigationService",function(e,t){t.showBlade({id:"thumbnailList",title:"imageTools.blades.tasks-list.title",subtitle:"imageTools.blades.tasks-list.subtitle",controller:"virtoCommerce.imageToolsModule.taskListController",template:"Modules/$(VirtoCommerce.ImageTools)/Scripts/blades/task-list.tpl.html",isClosingDisabled:!0})}]})}]).run(["$rootScope","platformWebApp.mainMenuService","platformWebApp.widgetService","$state","platformWebApp.authService","platformWebApp.pushNotificationTemplateResolver","platformWebApp.bladeNavigationService",function(e,t,o,i,n,a,r){var l={path:"browse/thumbnail",icon:"fa fa-picture-o",title:"imageTools.main-menu-title",priority:901,action:function(){i.go("workspace.thumbnail")},permission:"thumbnail:access"};t.addMenuItem(l);var s={priority:901,satisfy:function(e,t){return"header-notification"==t&&"ThumbnailProcess"==e.notifyType},template:"Modules/$(VirtoCommerce.ImageTools)/Scripts/notifications/headerNotification.tpl.html",action:function(e){i.go("workspace.pushNotificationsHistory",e)}};a.register(s);var c={priority:901,satisfy:function(e,t){return"history"==t&&"ThumbnailProcess"==e.notifyType},template:"Modules/$(VirtoCommerce.ImageTools)/Scripts/notifications/historyThumbnailProcess.tpl.html",action:function(e){var t={id:"thumbnailProcessDetail",title:"Title1",template:"Modules/$(VirtoCommerce.ImageTools)/Scripts/blades/task-progress.tpl.html",controller:"virtoCommerce.imageToolsModule.taskRunController",notification:e};r.showBlade(t)}};a.register(c)}])},function(e,t){angular.module("virtoCommerce.imageToolsModule").controller("virtoCommerce.imageToolsModule.optionDetailController",["$rootScope","$scope","platformWebApp.dialogService","platformWebApp.bladeNavigationService","virtoCommerce.imageToolsModule.resizeMethod","virtoCommerce.imageToolsModule.anchorPosition","virtoCommerce.imageToolsModule.jpegQuality","virtoCommerce.imageToolsModule.optionApi",function(e,t,o,i,n,a,r,l){var s,c=t.blade;function u(e){c.item=angular.copy(e),c.currentEntity=c.item,c.origEntity=e,c.isLoading=!1,c.title=c.isNew?"imageTools.blades.setting-detail.title":e.name,c.subtitle="imageTools.blades.setting-detail.subtitle"}function m(){return!angular.equals(c.currentEntity,c.origEntity)&&c.hasUpdatePermission()}function d(){return m()&&s&&s.$valid}t.positiveNum=/^[0-9]+$/,c.resizeMethodTypes=n.get(),c.anchorPositionTypes=a.get(),c.jpegQualityTypes=r.get(),c.refresh=function(e){c.isLoading=!0,c.isNew?u({resizeMethod:"FixedSize",anchorPosition:"Center",jpegQuality:"High"}):l.get({id:c.currentEntityId},(function(t){u(t),e&&c.parentBlade.refresh(e)}))},t.saveChanges=function(){c.isLoading=!0,(c.isNew?l.save(c.currentEntity,(function(e){c.isNew=!1,c.currentEntityId=e.id,c.refresh(!0)})).$promise:l.update(c.currentEntity,(function(){c.refresh(!0)})).$promise).catch((function(e){i.setError("Error "+e.status,c)})).finally((function(){c.isLoading=!1}))},t.setForm=function(e){s=e},c.onClose=function(e){i.showConfirmationIfNeeded(m(),d(),c,t.saveChanges,e,"imageTools.dialogs.setting-save.title","imageTools.dialogs.setting-save.message")},c.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:t.saveChanges,canExecuteMethod:d},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(c.origEntity,c.currentEntity)},canExecuteMethod:m},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){var e={id:"confirmDelete",title:"imageTools.dialogs.setting-delete.title",message:"imageTools.dialogs.setting-delete.message",callback:function(e){e&&(c.isLoading=!0,l.delete({ids:c.currentEntityId},(function(){i.closeBlade(c,(function(){c.parentBlade.refresh(!0)}))})))}};o.showConfirmationDialog(e)},canExecuteMethod:function(){return!c.isNew}}],c.refresh()}])},function(e,t){angular.module("virtoCommerce.imageToolsModule").controller("virtoCommerce.imageToolsModule.optionListController",["$scope","platformWebApp.bladeNavigationService","imageToolsConfig","virtoCommerce.imageToolsModule.optionApi",function(e,t,o,i){var n=e.blade;function a(e){var o={id:"optionDetail",controller:"virtoCommerce.imageToolsModule.optionDetailController",template:"Modules/$(VirtoCommerce.ImageTools)/Scripts/blades/option-detail.tpl.html"};angular.extend(o,e),t.showBlade(o,n)}n.refresh=function(e){n.isLoading=!0;var t={skip:0,take:o.intMaxValue};i.search(t,(function(e){n.isLoading=!1,n.currentEntities=e.results})),e&&n.parentBlade.refresh&&n.parentBlade.refresh()},n.setSelectedId=function(t){e.selectedNodeId=t},e.selectNode=function(e){n.setSelectedId(e.id),a({currentEntityId:e.id})},n.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:n.refresh,canExecuteMethod:function(){return!0}},{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){n.setSelectedId(null),a({isNew:!0})},canExecuteMethod:function(){return!0}}],n.refresh()}])},function(e,t){angular.module("virtoCommerce.imageToolsModule").controller("virtoCommerce.imageToolsModule.taskDetailController",["$rootScope","$scope","platformWebApp.bladeNavigationService","imageToolsConfig","virtoCommerce.imageToolsModule.taskApi","virtoCommerce.imageToolsModule.optionApi","platformWebApp.dialogService",function(e,t,o,i,n,a,r){var l=t.blade;function s(e){if(l.isNew){var t=c();a.search(t,(function(e){!function(e){l.currentEntity&&l.currentEntity.thumbnailOptions.length>0&&(l.currentEntity.thumbnailOptions=_.map(l.currentEntity.thumbnailOptions,(function(t){var o=_.find(e,(function(e){return t.id==e.id}));return o||t})))}(e.results),l.optionList=e.results,l.currentEntity={},l.isLoading=!1}))}else l.item=angular.copy(e),l.currentEntity=l.item,l.origEntity=e,l.isLoading=!1}function c(){return{skip:0,take:i.intMaxValue}}function u(){return!angular.equals(l.currentEntity,l.origEntity)&&l.hasUpdatePermission()}function m(){return u()&&l.formScope&&l.formScope.$valid}function d(){l.isLoading=!0,(l.isNew?n.save(l.currentEntity,(function(e){l.isNew=!1,l.currentEntityId=e.id,l.refresh(!0)})).$promise:n.update(l.currentEntity,(function(){l.refresh(!0)})).$promise).catch((function(e){o.setError("Error "+e.status,l)})).finally((function(){l.isLoading=!1}))}function g(e){if(e&&1===e.length&&"folder"===e[0].type){var t=e[0];l.currentEntity.workPath=t.relativeUrl?t.relativeUrl:t.name}else{r.showDialog({id:"selectFolderDialog",title:"imageTools.dialogs.select-folder.title",message:"imageTools.dialogs.select-folder.msg1",callback:function(){return!0}},"$(Platform)/Scripts/common/dialogs/notifyDialog.tpl.html","platformWebApp.confirmDialogController")}}l.updatePermission="thumbnail:update",l.refresh=function(e){var t=c();a.search(t,(function(e){l.optionList=e.results})),l.isNew?s({}):n.get({id:l.currentEntityId},(function(t){s(t),e&&l.parentBlade.refresh()}))},l.onClose=function(e){o.showConfirmationIfNeeded(u(),m(),l,d,e,"imageTools.dialogs.task-save.title","imageTools.dialogs.task-save.message")},l.formScope=null,t.setForm=function(e){l.formScope=e},l.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:function(){d()},canExecuteMethod:function(){return m()},permission:l.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){l.item=angular.copy(l.origEntity),l.currentEntity=l.item},canExecuteMethod:function(){return u()},permission:l.updatePermission},{name:"imageTools.commands.run",icon:"fa fa-exclamation",executeMethod:function(){var e,i;e=l.currentEntity,i={id:"confirmTaskRun",isFirstRun:!e.lastRun,callback:function(i){var a={taskIds:[e.id],regenerate:i};n.taskRun(a,(function(e){var i={id:"thumbnailProgress",notification:e,controller:"virtoCommerce.imageToolsModule.taskRunController",template:"Modules/$(VirtoCommerce.ImageTools)/Scripts/blades/task-progress.tpl.html"};t.$on("new-notification-event",(function(e,t){t&&t.id==i.notification.id&&(l.canImport=null!=t.finished)})),o.showBlade(i,l.parentBlade||l)}),(function(e){o.setError("Error "+e.status,l)}))}},r.showDialog(i,"Modules/$(VirtoCommerce.ImageTools)/Scripts/dialogs/run-dialog.tpl.html","platformWebApp.confirmDialogController")},canExecuteMethod:function(){return!l.isNew&&!u()}},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){var e;e={id:"confirmDelete",title:"imageTools.dialogs.task-delete.title",message:"imageTools.dialogs.task-delete.message",callback:function(e){e&&(l.isLoading=!0,n.delete({ids:l.currentEntityId},(function(){o.closeBlade(l,(function(){l.parentBlade.refresh()}))})))}},r.showConfirmationDialog(e)},canExecuteMethod:function(){return!l.isNew}}],l.openFolderPath=function(){var e={title:"imageTools.blades.setting-managment.title",subtitle:"imageTools.blades.setting-managment.subtitle",onSelect:g,controller:"virtoCommerce.assetsModule.assetSelectController"};o.showBlade(e,l)},l.openSettingManagement=function(){var e={id:"optionListDetail",currentEntityId:l.currentEntityId,title:"imageTools.blades.setting-managment.title",subtitle:"imageTools.blades.setting-managment.subtitle",controller:"virtoCommerce.imageToolsModule.optionListController",template:"Modules/$(VirtoCommerce.ImageTools)/Scripts/blades/option-list.tpl.html"};o.showBlade(e,l)},l.refresh()}])},function(e,t){angular.module("virtoCommerce.imageToolsModule").controller("virtoCommerce.imageToolsModule.taskListController",["$scope","$timeout","platformWebApp.bladeNavigationService","platformWebApp.bladeUtils","platformWebApp.uiGridHelper","platformWebApp.dialogService","virtoCommerce.imageToolsModule.taskApi",function(e,t,o,i,n,a,r){var l=e.blade;function s(){if(e.hasMore){++e.pageSettings.currentPage,e.gridApi.infiniteScroll.saveScrollPercentage(),l.isLoading=!0;var o=u();r.search(o,(function(o){c(o.results),e.items=e.items.concat(o.results),e.hasMore=o.listEntries.length===e.pageSettings.itemsPerPageCount,e.gridApi.infiniteScroll.dataLoaded(),t((function(){e.gridApi.selection.getSelectAllState()&&e.gridApi.selection.selectAllRows()}))})).$promise.finally((function(){l.isLoading=!1}))}}function c(e){angular.forEach(e,(function(e){var t=_.first(e.thumbnailOptions,3);(t=_.map(t,(function(e){return e.width+"x"+e.height})))&&t.length&&(e.description="("+t.join(", ")+")")}))}function u(){return{sort:n.getSortExpression(e),skip:(e.pageSettings.currentPage-1)*e.pageSettings.itemsPerPageCount,take:e.pageSettings.itemsPerPageCount}}function m(){return e.gridApi&&_.any(e.gridApi.selection.getSelectedRows())}function d(){return e.gridApi.selection.getSelectedRows()}e.uiGridConstants=n.uiGridConstants,e.hasMore=!0,e.items=[],l.refresh=function(){l.isLoading=!0,1!==e.pageSettings.currentPage&&(e.pageSettings.currentPage=1);var o=u();r.search(o,(function(o){c(o.results),e.items=o.results,e.hasMore=o.totalCount===e.pageSettings.itemsPerPageCount,t((function(){e.gridApi&&e.gridApi.selection.getSelectAllState()&&e.gridApi.selection.selectAllRows()}))})).$promise.finally((function(){l.isLoading=!1})),e.gridApi&&(e.items=[],e.gridApi.selection.clearSelectedRows(),e.gridApi.infiniteScroll.resetScroll(!0,!0),e.gridApi.infiniteScroll.dataLoaded())},l.setSelectedItem=function(t){e.selectedNodeId=t.id},e.selectItem=function(t,o){l.setSelectedItem(o),e.taskEdit(o)},e.taskEdit=function(e){var t={id:"listTaskDetail",currentEntityId:e.id,title:"imageTools.blades.task-detail.title",subtitle:"imageTools.blades.task-detail.subtitle",controller:"virtoCommerce.imageToolsModule.taskDetailController",template:"Modules/$(VirtoCommerce.ImageTools)/Scripts/blades/task-detail.tpl.html"};o.showBlade(t,l)},e.selectNode=function(t,i){e.selectedNodeId=t.id;var n={id:"listTaskDetail",controller:"virtoCommerce.imageToolsModule.taskDetailController",template:"Modules/$(VirtoCommerce.ImageTools)/Scripts/blades/task-detail.tpl.html"};i?angular.extend(n,{title:"imageTools.blades.task-detail.title",isNew:!0,saveCallback:function(e){n.isNew=!1,l.refresh(!0).then((function(){n.currentEntityId=e.id,o.showBlade(n,l)}))}}):angular.extend(n,{currentEntityId:t.id,title:t.name,subtitle:"imageTools.blades.task-detail.subtitle"}),o.showBlade(n,l)},e.taskRun=function(t){var i={id:"confirmTaskRun",isFirstRun:_.some(t,(function(e){return!e.lastRun})),callback:function(i){var n={taskIds:angular.isArray(t)?_.pluck(t,"id"):[t.id],regenerate:i};r.taskRun(n,(function(t){var i={id:"thumbnailProgress",notification:t,controller:"virtoCommerce.imageToolsModule.taskRunController",template:"Modules/$(VirtoCommerce.ImageTools)/Scripts/blades/task-progress.tpl.html"};e.$on("new-notification-event",(function(e,t){t&&t.id==i.notification.id&&(l.canImport=null!=t.finished)})),o.showBlade(i,l.parentBlade||l)}),(function(e){o.setError("Error "+e.status,l)}))}};a.showDialog(i,"Modules/$(VirtoCommerce.ImageTools)/Scripts/dialogs/run-dialog.tpl.html","platformWebApp.confirmDialogController")},l.headIcon="fa fa-picture-o",l.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:l.refresh,canExecuteMethod:function(){return!0}},{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){e.selectNode({},!0)},canExecuteMethod:function(){return!0}},{name:"imageTools.commands.run",icon:"fa fa-exclamation",canExecuteMethod:m,executeMethod:function(){e.taskRun(d())}},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){var e,t;e=d(),t={id:"confirmDelete",title:"imageTools.dialogs.task-delete.title",message:"imageTools.dialogs.task-delete.message",callback:function(t){if(t){l.isLoading=!0,o.closeChildrenBlades(l);var i=_.map(e,(function(e){return e.id}));r.delete({ids:i},(function(){l.refresh()}))}}},a.showConfirmationDialog(t)},canExecuteMethod:m}],e.taskDelete=function(e){var t={id:"confirmDelete",title:"imageTools.dialogs.task-delete.title",message:"imageTools.dialogs.task-delete.message",callback:function(t){t&&(l.isLoading=!0,r.delete({ids:e.id},(function(){o.closeChildrenBlades(l),l.refresh()})))}};a.showConfirmationDialog(t)},e.setGridOptions=function(t){i.initializePagination(e,!0),e.pageSettings.itemsPerPageCount=50,n.initialize(e,t,(function(t){e.gridApi=t,n.bindRefreshOnSortChanged(e),e.gridApi.infiniteScroll.on.needLoadMoreData(e,s)})),l.refresh()}}])},function(e,t){angular.module("virtoCommerce.imageToolsModule").controller("virtoCommerce.imageToolsModule.taskRunController",["$scope","virtoCommerce.imageToolsModule.taskApi",function(e,t){var o=e.blade;e.$on("new-notification-event",(function(e,t){o.notification&&t.id==o.notification.id&&angular.copy(t,o.notification)})),o.toolbarCommands=[{name:"platform.commands.cancel",icon:"fa fa-times",canExecuteMethod:function(){return o.notification&&!o.notification.finished},executeMethod:function(){t.taskCancel({jobId:o.notification.jobId},null,(function(e){}))}}],o.title=o.notification.title,o.headIcon="fa fa-search",o.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.imageToolsModule").factory("virtoCommerce.imageToolsModule.resizeMethod",(function(){return{get:function(){return[{value:"FixedSize",title:"imageTools.blades.setting-detail.resize-method.fixed-size"},{value:"FixedWidth",title:"imageTools.blades.setting-detail.resize-method.fixed-width"},{value:"FixedHeight",title:"imageTools.blades.setting-detail.resize-method.fixed-height"},{value:"Crop",title:"imageTools.blades.setting-detail.resize-method.crop"}]}}})).factory("virtoCommerce.imageToolsModule.anchorPosition",(function(){return{get:function(){return[{value:"TopLeft",title:"imageTools.blades.setting-detail.anchor-position.top-left"},{value:"TopCenter",title:"imageTools.blades.setting-detail.anchor-position.top-center"},{value:"TopRight",title:"imageTools.blades.setting-detail.anchor-position.top-right"},{value:"CenterLeft",title:"imageTools.blades.setting-detail.anchor-position.center-left"},{value:"Center",title:"imageTools.blades.setting-detail.anchor-position.center"},{value:"CenterRight",title:"imageTools.blades.setting-detail.anchor-position.center-right"},{value:"BottomLeft",title:"imageTools.blades.setting-detail.anchor-position.bottom-left"},{value:"BottomCenter",title:"imageTools.blades.setting-detail.anchor-position.bottom-center"},{value:"BottomRight",title:"imageTools.blades.setting-detail.anchor-position.bottom-right"}]}}})).factory("virtoCommerce.imageToolsModule.jpegQuality",(function(){return{get:function(){return[{value:"Low",title:"imageTools.blades.setting-detail.jpeg-quality.low"},{value:"Medium",title:"imageTools.blades.setting-detail.jpeg-quality.medium"},{value:"High",title:"imageTools.blades.setting-detail.jpeg-quality.high"},{value:"VeryHigh",title:"imageTools.blades.setting-detail.jpeg-quality.very-high"}]}}}))},function(e,t){angular.module("virtoCommerce.imageToolsModule").factory("virtoCommerce.imageToolsModule.taskApi",["$resource",function(e){return e("api/image/thumbnails/tasks/:id",{id:"@id"},{search:{method:"POST",url:"api/image/thumbnails/tasks/search"},update:{method:"PUT",url:"api/image/thumbnails/tasks"},taskRun:{method:"POST",url:"api/image/thumbnails/tasks/run"},taskCancel:{method:"POST",url:"api/image/thumbnails/tasks/:jobId/cancel"}})}]).factory("virtoCommerce.imageToolsModule.optionApi",["$resource",function(e){return e("api/image/thumbnails/options/:id",{id:"@id"},{search:{method:"POST",url:"api/image/thumbnails/options/search"},update:{method:"PUT",url:"api/image/thumbnails/options"}})}])},function(e,t,o){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,