!function(t){var e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(n,o,function(e){return t[e]}.bind(null,o));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){i(1),i(2),i(3),i(4),i(5),i(6),i(7),i(8),i(9),i(10),i(11),i(12),i(13),i(14),i(15),i(16),t.exports=i(17)},function(t,e){void 0!==AppDependencies&&AppDependencies.push("virtoCommerce.notificationsModule"),angular.module("virtoCommerce.notificationsModule",["textAngular"]).config(["$stateProvider","$urlRouterProvider",function(t,e){t.state("workspace.notificationsModule",{url:"/notifications?objectId&objectTypeId",templateUrl:"$(Platform)/Scripts/common/templates/home.tpl.html",controller:["$scope","platformWebApp.bladeNavigationService",function(t,e){e.showBlade({id:"notifications",title:"platform.menu.notifications",subtitle:"platform.blades.notifications-menu.subtitle",controller:"virtoCommerce.notificationsModule.notificationsMenuController",template:"Modules/$(virtoCommerce.Notifications)/Scripts/blades/notifications-menu.tpl.html",isClosingDisabled:!0})}]})}]).factory("virtoCommerce.notificationsModule.predefinedSearchFilters",["$localStorage",function(t){return t.notificationsJournalSearchFilters=t.notificationsJournalSearchFilters||[],{register:function(e,i,n){_.each(n,(function(n){var o=_.find(t.notificationsJournalSearchFilters,(function(t){return t.id==n.id}));o?o&&(!o.lastUpdateTime||o.lastUpdateTime<e)&&angular.copy(n,o):(!t[i]||t[i]<e)&&t.notificationsJournalSearchFilters.splice(0,0,n)})),t[i]=e}}}]).run(["platformWebApp.mainMenuService","platformWebApp.widgetService","$state","virtoCommerce.notificationsModule.notificationTypesResolverService","virtoCommerce.notificationsModule.notificationTemplatesResolverService","$http","$compile","virtoCommerce.notificationsModule.predefinedSearchFilters",function(t,e,i,n,o,a,r,l){var c={path:"browse/notificationsModule",icon:"fa fa-envelope",title:"Notifications",priority:7,action:function(){i.go("workspace.notificationsModule")},permission:"notifications:access"};t.addMenuItem(c),e.registerWidget({controller:"virtoCommerce.notificationsModule.notificationsTemplatesWidgetController",template:"Modules/$(VirtoCommerce.Notifications)/Scripts/widgets/notificationsTemplatesWidget.tpl.html"},"notificationsDetail"),e.registerWidget({controller:"virtoCommerce.notificationsModule.notificationsLogWidgetController",template:"Modules/$(VirtoCommerce.Notifications)/Scripts/widgets/notificationsLogWidget.tpl.html"},"notificationsDetail"),e.registerWidget({controller:"virtoCommerce.notificationsModule.notificationsAttachmentsWidgetController",template:"Modules/$(VirtoCommerce.Notifications)/Scripts/widgets/notificationsAttachmentsWidget.tpl.html"},"notificationsDetail"),n.registerType({type:"EmailNotification",icon:"fa fa-envelope",detailBlade:{template:"Modules/$(VirtoCommerce.Notifications)/Scripts/blades/notification-details.tpl.html",controller:"virtoCommerce.notificationsModule.notificationsEditController"},knownChildrenTypes:["Email","Sms"]}),n.registerType({type:"SmsNotification",icon:"fa fa-comment",detailBlade:{template:"Modules/$(VirtoCommerce.Notifications)/Scripts/blades/notification-sms-details.tpl.html",controller:"virtoCommerce.notificationsModule.notificationsEditController"},knownChildrenTypes:["Email","Sms"]}),o.registerTemplate({type:"EmailNotification",icon:"fa fa-envelope",detailBlade:{template:"Modules/$(VirtoCommerce.Notifications)/Scripts/blades/notifications-edit-template.tpl.html"},knownChildrenTypes:["Email","Sms"]}),o.registerTemplate({type:"SmsNotification",icon:"fa fa-comment",detailBlade:{template:"Modules/$(VirtoCommerce.Notifications)/Scripts/blades/notifications-edit-template.tpl.html"},knownChildrenTypes:["Email","Sms"]}),l.register(1485892981,"notificationsJournalSearchFiltersDate",[{name:"notifications.blades.notifications-journal.labels.filter-new"},{keyword:"isActive:true, isSuccessSend:false",id:2,name:"notifications.blades.notifications-journal.labels.filter-only-pending"},{keyword:"isActive:false, isSuccessSend:false",id:1,name:"notifications.blades.notifications-journal.labels.filter-with-errors"}]),a.get("Modules/$(VirtoCommerce.Notifications)/Scripts/directives/itemSearch.tpl.html").then((function(t){r(t.data)}))}])},function(t,e){angular.module("virtoCommerce.notificationsModule").controller("virtoCommerce.notificationsModule.filterJournalDetailController",["$scope","$localStorage","$translate",function(t,e,i){var n,o=t.blade;function a(t){o.currentEntity=angular.copy(t),o.origEntity=t,o.isLoading=!1,o.title=o.isNew?"notifications.blades.filter-detail.new-title":t.name,o.subtitle=o.isNew?"notifications.blades.filter-detail.new-subtitle":"notifications.blades.filter-detail.subtitle"}t.setForm=function(t){n=t},t.saveChanges=function(){o.currentEntity.lastUpdateTime=(new Date).getTime(),angular.copy(o.currentEntity,o.origEntity),o.isNew&&(e.notificationsJournalSearchFilters.splice(0,0,o.origEntity),e.notificationsJournalSearchFilterId=o.origEntity.id,o.parentBlade.filter.current=o.origEntity,o.isNew=!1),a(o.origEntity),o.parentBlade.filter.change(!0)},o.headIcon="fa fa-filter",o.toolbarCommands=[{name:"core.commands.apply-filter",icon:"fa fa-filter",executeMethod:function(){t.saveChanges()},canExecuteMethod:function(){return n&&n.$valid}},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(o.origEntity,o.currentEntity)},canExecuteMethod:function(){return!angular.equals(o.currentEntity,o.origEntity)}},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){o.parentBlade.filter.current=null,e.notificationsJournalSearchFilters.splice(e.notificationsJournalSearchFilters.indexOf(o.origEntity),1),delete e.notificationsJournalSearchFilterId,o.parentBlade.filter.change()},canExecuteMethod:function(){return!o.isNew}}],o.isNew?i("notifications.blades.notifications-journal.labels.unnamed-filter").then((function(t){a({id:(new Date).getTime(),name:t})})):a(o.data)}])},function(t,e){angular.module("virtoCommerce.notificationsModule").controller("virtoCommerce.notificationsModule.notificationsEditController",["$scope","$filter","virtoCommerce.notificationsModule.notificationsModuleApi","platformWebApp.bladeNavigationService",function(t,e,i,n){t.setForm=function(e){t.formScope=e};var o=t.blade;function a(t){return _.map(t,(function(t){return{value:t}}))}function r(t){return t?_(t).pluck("value"):t}function l(){return(!angular.equals(o.origEntity,o.currentEntity)||o.isNew)&&o.hasUpdatePermission()}function c(){return l()&&t.isValid}o.updatePermission="notifications:update",o.parametersForTemplate=[],t.isValid=!1,o.initialize=function(){o.isLoading=!0,i.getNotificationByType({type:o.type,tenantId:o.tenantId,tenantType:o.tenantType},(function(i){o.isLoading=!1,function(i){o.currentEntity=angular.copy(i),function(t){return t.tenantIdentity.isEmpty&&o.tenantId&&o.tenantType}(o.currentEntity)&&(o.currentEntity.tenantIdentity={id:o.tenantId,type:o.tenantType});o.currentEntity.cc=a(o.currentEntity.cc),o.currentEntity.bcc=a(o.currentEntity.bcc),_.map(o.currentEntity.templates,(function(t){return t.createdDateAsString=e("date")(t.createdDate,"yyyy-MM-dd"),t.modifiedDateAsString=e("date")(t.modifiedDate,"yyyy-MM-dd"),t})),o.currentEntity.templates||(o.currentEntity.templates=[]);o.origEntity=angular.copy(o.currentEntity),t.isValid=!1}(i)}))},o.updateNotification=function(){o.isLoading=!0,o.currentEntity.cc=r(o.currentEntity.cc),o.currentEntity.bcc=r(o.currentEntity.bcc);var t=angular.copy(o.currentEntity);t.templates=_.filter(o.currentEntity.templates,{isReadonly:!1}),t.templates.forEach(t=>{t.isEdited&&t.isPredefined&&(t.isPredefined=!1)}),i.updateNotification({type:o.type},t,(function(){o.isLoading=!1,o.origEntity=angular.copy(o.currentEntity),o.parentBlade.refresh(),n.closeBlade(o)}))},t.blade.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:o.updateNotification,canExecuteMethod:c,permission:o.updatePermission},{name:"platform.commands.undo",icon:"fa fa-undo",executeMethod:function(){o.currentEntity=angular.copy(o.origEntity)},canExecuteMethod:l,permission:o.updatePermission}],t.editorOptions={lineWrapping:!0,lineNumbers:!0,parserfile:"liquid.js",extraKeys:{"Ctrl-Q":function(t){t.foldCode(t.getCursor())}},foldGutter:!0,gutters:["CodeMirror-linenumbers","CodeMirror-foldgutter"],onLoad:function(t){t},mode:"liquid-html"},t.$watch("blade.currentEntity",(function(){t.isValid=t.formScope&&t.formScope.$valid}),!0),o.onClose=function(t){n.showConfirmationIfNeeded(l(),c(),o,o.updateNotification,t,"notifications.dialogs.notification-details-save.title","notifications.dialogs.notification-details-save.message")},o.headIcon="fa fa-envelope",o.initialize()}])},function(t,e){angular.module("virtoCommerce.notificationsModule").controller("virtoCommerce.notificationsModule.notificationJournalDetailsController",["$scope","virtoCommerce.notificationsModule.notificationsModuleApi","platformWebApp.bladeNavigationService",function(t,e,i){var n=t.blade;n.initialize=function(){e.getNotificationJournalDetails({id:n.currentNotificationId},(function(t){n.currentEntity=t,n.isLoading=!1}),(function(e){i.setError("Error "+e.status,t.blade)}))},n.initialize()}])},function(t,e){angular.module("virtoCommerce.notificationsModule").controller("virtoCommerce.notificationsModule.notificationTemplatesListController",["$scope","$translate","virtoCommerce.notificationsModule.notificationTemplatesResolverService","platformWebApp.bladeNavigationService","platformWebApp.dialogService","platformWebApp.settings","platformWebApp.uiGridHelper","platformWebApp.bladeUtils",function(t,e,i,n,o,a,r,l){t.uiGridConstants=r.uiGridConstants;var c=t.blade;function s(t){var e=i.resolve(t);if(e&&e.knownChildrenTypes&&e.knownChildrenTypes.length)return e;o.showNotificationDialog({id:"error",title:"notifications.dialogs.unknown-kind.title",message:"notifications.dialogs.unknown-kind.message",messageValues:{kind:t}})}c.selectedLanguage=null,c.languages||a.getValues({id:"VirtoCommerce.Notifications.General.Languages"},(function(t){c.languages=t})),c.initialize=function(){var t,e,i;c.currentEntities=(t=c.currentEntity.templates,e=_.groupBy(t,(function(t){return t.languageCode||null})),i=_.each(e,(function(t,e,i){_.any(t,(function(t){return t.isPredefined}))&&_.each(t,(function(t){t.isPredefined||(t.isPredefined=!0,t.isEdited=!0)}));var n=_.sortBy(t,(function(t){return!t.isEdited}))[0];i[e]=n})),_.toArray(i)),c.isLoading=!1},c.openTemplate=function(t){var i=s(c.currentEntity.kind);if(i){var o={id:i.detailBlade.id,title:"notifications.blades.notifications-edit-template.title",titleValues:{displayName:e.instant("notificationTypes."+c.currentEntity.type+".displayName")},notification:c.currentEntity,languageCode:t.languageCode,editedTemplate:t,isNew:!1,isFirst:!1,languages:c.languages,tenantId:c.tenantId,tenantType:c.tenantType,controller:i.detailBlade.controller,template:i.detailBlade.template,kind:c.currentEntity.kind};n.showBlade(o,c)}},c.setSelectedNode=function(e){t.selectedNodeId=e.id},t.selectNode=function(t){c.setSelectedNode(t),c.selectedType=t,c.openTemplate(t)},c.toolbarCommands=[{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){var t=s(c.currentEntity.kind);if(t){var i={id:t.detailBlade.id,title:"notifications.blades.notifications-edit-template.title-new",titleValues:{displayName:e.instant("notificationTypes."+c.currentEntity.type+".displayName")},notification:c.currentEntity,tenantId:c.tenantId,tenantType:c.tenantType,isNew:!0,isFirst:!1,languages:c.languages,controller:t.detailBlade.controller,template:t.detailBlade.template};n.showBlade(i,c)}},canExecuteMethod:function(){return!0},permission:"notifications:template:create"},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){!function(t){if(_.any(t,(function(t){return!t.languageCode||t.isPredefined})))o.showNotificationDialog({id:"error",title:"notifications.dialogs.notification-template-delete-notification.title",message:"notifications.dialogs.notification-template-delete-notification.message"});else{var e={id:"confirmDeleteItem",title:"notifications.dialogs.notification-template-delete.title",message:"notifications.dialogs.notification-template-delete.message",callback:function(e){e&&n.closeChildrenBlades(c,(function(){_.each(t,(function(t){var e=c.currentEntity.templates.findIndex((function(e){return e.languageCode===t.languageCode}));e>-1&&c.currentEntity.templates.splice(e,1)})),c.initialize()}))}};o.showConfirmationDialog(e)}}(t.gridApi.selection.getSelectedRows())},canExecuteMethod:function(){return t.gridApi&&_.any(t.gridApi.selection.getSelectedRows())},permission:"notifications:template:delete"}],t.setGridOptions=function(e){r.initialize(t,e,(function(e){t.gridApi=e,r.bindRefreshOnSortChanged(t)})),l.initializePagination(t)},c.initialize()}])},function(t,e){angular.module("virtoCommerce.notificationsModule").controller("virtoCommerce.notificationsModule.editTemplateController",["$rootScope","$scope","$timeout","$localStorage","virtoCommerce.notificationsModule.notificationsModuleApi","FileUploader","platformWebApp.bladeNavigationService","platformWebApp.dialogService",function(t,e,i,n,o,a,r,l){var c,s,d=e.blade;function u(t){var i={id:"confirmResetTemplates",template:t,callback:function(i){i&&function(t){var i=d.notification.templates.findIndex((function(e){return e.languageCode==t.languageCode&&e.isPredefined==t.isPredefined&&e.isEdited==t.isEdited}));i>-1&&d.notification.templates.splice(i,1);d.parentBlade.initialize(),e.bladeClose()}(t)}};l.showDialog(i,"Modules/$(VirtoCommerce.Notifications)/Scripts/blades/notification-templates-list-reset-dialog.tpl.html","platformWebApp.confirmDialogController")}e.isValid=!1,e.setForm=function(t){c=t},d.dynamicProperties="",e.saveChanges=function(){!function(){var t=new Date,e=t.getFullYear()+"-"+("0"+(t.getMonth()+1)).slice(-2)+"-"+("0"+t.getDate()).slice(-2);d.isNew?(d.currentEntity.createdDateAsString=e,d.currentEntity.isReadonly=!1,d.currentEntity.id=d.currentEntity.languageCode?null:d.currentEntity.id,d.origEntity=angular.copy(d.currentEntity)):(d.currentEntity.modifiedDateAsString=e,d.origEntity=angular.copy(d.currentEntity));var i=_.filter(d.notification.templates,(function(t){return t.languageCode==d.currentEntity.languageCode}));_.any(i,(function(t){return t.isPredefined}))?(d.currentEntity.isPredefined=!0,d.currentEntity.isEdited=!0):d.currentEntity.isPredefined=!1;var n=d.notification.templates.findIndex((function(t){return t.languageCode==d.currentEntity.languageCode&&t.isPredefined==d.currentEntity.isPredefined&&t.isEdited==d.currentEntity.isEdited}));n>=0?d.notification.templates[n]=d.currentEntity:d.notification.templates.push(d.currentEntity)}(),d.parentBlade.initialize(),e.bladeClose()};function f(){return(!angular.equals(d.origEntity,d.currentEntity)||d.isNew)&&d.hasUpdatePermission()}e.fileUploader=new a({url:"api/assets?folderUrl=cms-content/image/assets",headers:{Accept:"application/json"},autoUpload:!0,removeAfterUpload:!0,onBeforeUploadItem:function(t){d.isLoading=!0},onSuccessItem:function(t,i,n,o){e.$broadcast("filesUploaded",{items:i})},onErrorItem:function(t,e,i,n){r.setError(t._file.name+" failed: "+(e.message?e.message:i),d)},onCompleteAll:function(){d.isLoading=!1}}),d.initialize=function(){d.isLoading=!0;var t=d.editedTemplate||_.find(d.notification.templates,(function(t){return t.languageCode===d.languageCode}));t&&(d.currentEntity=angular.copy(t),d.origEntity=angular.copy(d.currentEntity),d.orightml=d.currentEntity.body),d.currentEntity||(d.currentEntity={kind:d.notification.kind}),d.isLoading=!1,d.currentEntity&&void 0===d.currentEntity.languageCode&&(d.currentEntity.languageCode=null),i((function(){s&&(s.refresh(),s.focus()),d.origEntity=angular.copy(d.currentEntity)}),1),e.isValid=!1},d.renderTemplate=function(){var t={id:"renderTemplate",title:"notifications.blades.notifications-template-render.title",subtitle:"notifications.blades.notifications-template-render.subtitle",subtitleValues:{type:d.notificationType},notification:d.notification,tenantId:d.tenantId,tenantType:d.tenantType,currentEntity:d.currentEntity,languageCode:d.currentEntity.languageCode,controller:"virtoCommerce.notificationsModule.templateRenderController",template:"Modules/$(VirtoCommerce.Notifications)/Scripts/blades/notifications-template-render.tpl.html"};r.showBlade(t,d)},e.blade.toolbarCommands=[{name:"platform.commands.preview",icon:"fa fa-eye",executeMethod:function(){d.renderTemplate()},canExecuteMethod:function(){return!f()},permission:"notifications:templates:read"},{name:"notifications.commands.restore",icon:"fa fa-history",executeMethod:function(){u(d.currentEntity)},canExecuteMethod:function(){return d.currentEntity.isPredefined&&d.currentEntity.isEdited},permission:"notifications:template:delete"}],e.$watch("blade.currentEntity",(function(){e.isValid=f()&&c&&c.$valid&&!d.origEntity.isReadonly}),!0),d.headIcon="fa fa-envelope",d.initialize()}])},function(t,e){angular.module("virtoCommerce.notificationsModule").controller("virtoCommerce.notificationsModule.notificationsJournalController",["$scope","$translate","platformWebApp.bladeNavigationService","virtoCommerce.notificationsModule.notificationsModuleApi","platformWebApp.bladeUtils","platformWebApp.dialogService","uiGridConstants","platformWebApp.uiGridHelper",function(t,e,i,n,o,a,r,l){var c=t.blade;t.uiGridConstants=r;var s=c.filter={keyword:c.filterKeyword};s.criteriaChanged=function(){s.keyword&&c.refresh()},c.refresh=function(){var e={objectIds:c.objectId?[c.objectId]:void 0,objectType:c.objectType,keyword:s.keyword?s.keyword:void 0,sort:l.getSortExpression(t),skip:(t.pageSettings.currentPage-1)*t.pageSettings.itemsPerPageCount,take:t.pageSettings.itemsPerPageCount,notificationType:c.notificationType};n.getNotificationJournalList(e,(function(e){c.currentEntities=e.results,t.pageSettings.totalItems=e.totalCount,c.isLoading=!1}))},t.selectNode=function(n){t.selectedNodeId=n.id;var o={id:"notificationDetails",title:n.subject,subtitle:"notifications.blades.notification-journal-details.subtitle",subtitleValues:{displayName:e.instant(n.displayName)},currentNotificationId:n.id,currentEntity:n,controller:"virtoCommerce.notificationsModule.notificationJournalDetailsController",template:"Modules/$(VirtoCommerce.Notifications)/Scripts/blades/notification-journal-details.tpl.html"};i.showBlade(o,c)},t.stopNotifications=function(t){c.isLoading=!0,n.stopSendingNotifications(_.pluck(t,"id"),c.refresh)},c.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:c.refresh,canExecuteMethod:function(){return!0}},{name:"notifications.blades.notifications-journal.labels.resend-messages",icon:"fa fa-repeat",executeMethod:function(){var t=c.$scope.gridApi.grid.rows.filter(t=>t.isSelected).map(t=>t.entity.id);n.resendNotifications(t,(function(){c.refresh()}))},canExecuteMethod:function(){return void 0!==c.$scope.gridApi&&c.$scope.gridApi.grid.rows.filter(t=>t.isSelected).length>0},permission:"notifications:update"}],t.setGridOptions=function(e){l.initialize(t,e,(function(e){t.gridApi=e,l.bindRefreshOnSortChanged(t)})),o.initializePagination(t)}}])},function(t,e){angular.module("virtoCommerce.notificationsModule").controller("virtoCommerce.notificationsModule.notificationsListController",["$scope","$translate","virtoCommerce.notificationsModule.notificationsModuleApi","virtoCommerce.notificationsModule.notificationTypesResolverService","platformWebApp.dialogService","platformWebApp.bladeUtils","platformWebApp.uiGridHelper","platformWebApp.ui-grid.extension","platformWebApp.settings","platformWebApp.i18n","platformWebApp.authService",function(t,e,i,n,o,a,r,l,c,s,d){t.uiGridConstants=r.uiGridConstants;var u=t.blade;u.title="Notifications",u.selectedType=null,u.currentLanguage=s.getLanguage();var f=a.bladeNavigationService,p=t.filter={};p.criteriaChanged=function(){null===p.keyword&&(u.name=void 0),t.pageSettings.currentPage>1?t.pageSettings.currentPage=1:u.refresh()},u.refresh=function(){var e={keyword:p.keyword?p.keyword:void 0,sort:r.getSortExpression(t),skip:(t.pageSettings.currentPage-1)*t.pageSettings.itemsPerPageCount,take:t.pageSettings.itemsPerPageCount,responseGroup:"Default"};i.getNotificationList(e,(function(e){u.isLoading=!1,t.pageSettings.totalItems=e.totalCount,t.listEntries=e.results?e.results:[],_.map(t.listEntries,(function(t){var e=n.resolve(t.kind);return e&&(t.icon=e.icon),t}))}))},d.checkPermission("notifications:access")&&(u.editNotification=function(t){var i=function(t){var e=n.resolve(t);if(e&&e.knownChildrenTypes&&e.knownChildrenTypes.length)return e;o.showNotificationDialog({id:"error",title:"notifications.dialogs.unknown-kind.title",message:"notifications.dialogs.unknown-kind.message",messageValues:{kind:t}})}(t.kind),a={id:"editNotification",title:"notifications.blades.notification-details.title",titleValues:{displayName:e.instant("notificationTypes."+t.type+".displayName")},type:t.type,tenantId:u.tenantId,tenantType:u.tenantType,controller:i.detailBlade.controller,template:i.detailBlade.template};f.showBlade(a,u)}),u.setSelectedNode=function(e){t.selectedNodeId=e.type},t.selectNode=function(t){u.setSelectedNode(t),u.selectedType=t,u.editNotification(t)},t.setGridOptions=function(e,i){t.gridOptions=i,l.tryExtendGridOptions(e,i),i.onRegisterApi=function(e){t.gridApi=e},a.initializePagination(t)},u.headIcon="fa fa-list"}])},function(t,e){angular.module("virtoCommerce.notificationsModule").controller("virtoCommerce.notificationsModule.notificationsMenuController",["$scope","$stateParams","platformWebApp.bladeNavigationService",function(t,e,i){var n=t.blade;n.updatePermission="notifications:read",n.openBlade=function(o){if(n.hasUpdatePermission()){t.selectedNodeId=o.id;var a=e.objectId,r=e.objectTypeId,l={id:"notificationsList",title:o.name,tenantId:a,tenantType:r,subtitle:o.subtitle,controller:"virtoCommerce.notificationsModule."+o.controllerName,template:"Modules/$(VirtoCommerce.Notifications)/Scripts/blades/"+o.templateName+".tpl.html"};i.showBlade(l,n)}},n.headIcon="fa fa-envelope",n.currentEntities=[{id:"1",name:"notifications.blades.notifications-list.title",templateName:"notifications-list",controllerName:"notificationsListController",icon:"fa fa-list",subtitle:"notifications.blades.notifications-list.subtitle"},{id:"2",name:"notifications.blades.notifications-journal.title",templateName:"notifications-journal",controllerName:"notificationsJournalController",icon:"fa fa-book",subtitle:"notifications.blades.notifications-journal.subtitle"}],n.isLoading=!1}])},function(t,e){angular.module("virtoCommerce.notificationsModule").controller("virtoCommerce.notificationsModule.templateRenderController",["$rootScope","$scope","$localStorage","platformWebApp.bladeNavigationService","platformWebApp.dialogService","virtoCommerce.notificationsModule.notificationsModuleApi",function(t,e,i,n,o,a){var r,l=e.blade;function c(t){return t?_(t).pluck("value"):t}l.dynamicProperties="",l.originHtml="",e.setForm=function(t){e.formScope=t},l.initialize=function(){l.isLoading=!0,l.isRender=!1;var t=l.languageCode?l.languageCode:"default",e=angular.copy(l.notification);e.cc=c(e.cc),e.bcc=c(e.bcc),r=l.tenantType+"."+l.notification.type+"."+t;var n=i[r];n&&(l.notification.context=n),a.renderTemplate({type:l.notification.type,language:t},{text:l.currentEntity.body,data:e},(function(t){l.originHtml=t.html})),l.isLoading=!1},l.headIcon="fa fa-eye",l.initialize()}])},function(t,e){angular.module("virtoCommerce.notificationsModule").directive("vcJournalSearch",["$localStorage","platformWebApp.bladeNavigationService","virtoCommerce.notificationsModule.predefinedSearchFilters",function(t,e,i){return{restrict:"E",templateUrl:function(t,e){return e.templateUrl||"notificationsJournal-itemSearch-default.html"},scope:{blade:"="},link:function(i){var n=i.blade;i.$localStorage=t;var o=i.filter=n.filter;function a(t){var i={id:"filterDetail",controller:"virtoCommerce.notificationsModule.filterJournalDetailController",template:"Modules/$(VirtoCommerce.Notifications)/Scripts/blades/filter-detail.tpl.html"};angular.extend(i,t),e.showBlade(i,n)}t.notificationsJournalSearchFilterId&&!o.keyword&&null!==o.keyword&&(o.current=_.findWhere(t.notificationsJournalSearchFilters,{id:t.notificationsJournalSearchFilterId}),o.keyword=o.current?o.current.keyword:""),o.change=function(i){t.notificationsJournalSearchFilterId=o.current?o.current.id:null,o.current&&!o.current.id?(o.current=null,a({isNew:!0})):(i||e.closeBlade({id:"filterJournalDetail"}),o.keyword=o.current?o.current.keyword:"",o.criteriaChanged())},o.edit=function(t,e){o.current=e,a({data:e})}}}}])},function(t,e){angular.module("virtoCommerce.notificationsModule").factory("virtoCommerce.notificationsModule.notificationsModuleApi",["$resource",function(t){return t("api/notifications/:id",{id:"@Id"},{getNotificationList:{method:"POST",url:"api/notifications"},getNotificationByType:{method:"GET",url:"api/notifications/:type"},updateNotification:{method:"PUT",url:"api/notifications/:type"},getTemplates:{method:"GET",url:"api/notifications/:type/templates",isArray:!0},getTemplateById:{method:"GET",url:"api/notifications/:type/templates/:id"},getTemplate:{method:"GET",url:"api/notifications/:type/:language/templates"},createTemplate:{method:"POST",url:"api/notifications/:type/templates"},updateTemplate:{method:"PUT",url:"api/notifications/:type/templates/:id"},renderTemplate:{method:"POST",url:"api/notifications/:type/templates/:language/rendercontent"},getNotificationJournalList:{method:"POST",url:"api/notifications/journal"},getNotificationJournalDetails:{method:"GET",url:"api/notifications/journal/:id"},resendNotifications:{method:"POST",url:"api/notifications/scheduleresend"}})}])},function(t,e){angular.module("virtoCommerce.notificationsModule").factory("virtoCommerce.notificationsModule.notificationTypesResolverService",(function(){return{objects:[],registerType:function(t){t.detailBlade=angular.extend({id:"editNotification",metaFields:[],controller:t.detailBlade.controller,notificationTypeDefinition:t},t.detailBlade),t.knownChildrenTypes=t.knownChildrenTypes||[],this.objects.push(t)},resolve:function(t){return _.findWhere(this.objects,{type:t})}}})).factory("virtoCommerce.notificationsModule.notificationTemplatesResolverService",(function(){return{objects:[],registerTemplate:function(t){t.detailBlade=angular.extend({id:"editTemplate",metaFields:[],controller:"virtoCommerce.notificationsModule.editTemplateController",notificationTypeDefinition:t},t.detailBlade),t.knownChildrenTypes=t.knownChildrenTypes||[],this.objects.push(t)},resolve:function(t){return _.findWhere(this.objects,{type:t})}}}))},function(t,e){angular.module("virtoCommerce.notificationsModule").controller("virtoCommerce.notificationsModule.notificationsAttachmentsWidgetController",["$scope","platformWebApp.bladeNavigationService",function(t,e){t.widget.blade.showAttachments=function(){}}])},function(t,e){angular.module("virtoCommerce.notificationsModule").controller("virtoCommerce.notificationsModule.notificationsLogWidgetController",["$scope","platformWebApp.bladeNavigationService",function(t,e){var i=t.widget.blade;i.showLog=function(){var t={id:"notificationAttachmentsWidgetChild",title:"notifications.widgets.notificationsLogWidget.blade-title",titleValues:{id:i.currentEntity.id},notificationType:i.currentEntity.type,languages:i.currentEntity.languages,subtitle:"notifications.widgets.notificationsLogWidget.blade-subtitle",controller:"virtoCommerce.notificationsModule.notificationsJournalController",template:"Modules/$(VirtoCommerce.Notifications)/Scripts/blades/notifications-journal.tpl.html"};e.showBlade(t,i)}}])},function(t,e){angular.module("virtoCommerce.notificationsModule").controller("virtoCommerce.notificationsModule.notificationsTemplatesWidgetController",["$scope","$translate","platformWebApp.bladeNavigationService",function(t,e,i){var n=t.widget.blade;t.templatesCount="...",t.$watchCollection("blade.currentEntity.templates",(function(e){e&&(t.templatesCount=_.uniq(e,(function(t){return t.languageCode||null})).length)})),n.showTemplates=function(){var t={id:"notificationTemplatesWidgetChild",title:"notifications.widgets.notificationsTemplatesWidget.blade-title",titleValues:{displayName:e.instant("notificationTypes."+n.currentEntity.type+".displayName")},tenantId:n.currentEntity.tenantId,tenantType:n.currentEntity.tenantType,currentEntity:n.currentEntity,subtitle:"notifications.widgets.notificationsTemplatesWidget.blade-subtitle",controller:"virtoCommerce.notificationsModule.notificationTemplatesListController",template:"Modules/$(VirtoCommerce.Notifications)/Scripts/blades/notification-templates-list.tpl.html"};i.showBlade(t,n)}}])},function(t,e,i){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,