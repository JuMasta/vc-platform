!function(e){var t={};function o(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,a){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(o.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(a,r,function(t){return e[t]}.bind(null,r));return a},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){o(1),o(2),o(3),o(4),o(5),o(6),o(7),o(8),o(9),o(10),o(11),o(12),o(13),o(14),o(15),o(16),o(17),o(18),o(19),o(20),o(21),o(22),o(23),o(24),o(25),o(26),o(27),o(28),o(29),o(30),o(31),o(32),o(33),o(34),o(35),o(36),o(37),o(38),o(39),o(40),o(41),o(42),o(43),o(44),o(45),o(46),o(47),o(48),o(49),o(50),o(51),o(52),o(53),o(54),o(55),o(56),o(57),o(58),o(59),o(60),o(61),o(62),o(63),o(64),o(65),o(66),o(67),o(68),o(69),o(70),o(71),o(72),o(73),o(74),o(75),o(76),o(77),o(78),o(79),o(80),o(81),o(82),o(83),o(84),o(85),o(86),o(87),o(88),o(89),o(90),o(91),o(92),o(93),o(94),o(95),o(96),o(97),o(98),o(99),o(100),e.exports=o(101)},function(e,t){null!=AppDependencies&&AppDependencies.push("virtoCommerce.catalogModule"),angular.module("virtoCommerce.catalogModule",["ui.grid.validate","ui.grid.infiniteScroll"]).config(["$stateProvider",function(e){e.state("workspace.catalog",{url:"/catalog",templateUrl:"$(Platform)/Scripts/common/templates/home.tpl.html",controller:["$scope","platformWebApp.bladeNavigationService",function(e,t){t.showBlade({id:"categories",title:"catalog.blades.catalogs-list.title",breadcrumbs:[],subtitle:"catalog.blades.catalogs-list.subtitle",controller:"virtoCommerce.catalogModule.catalogsListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/catalogs-list.tpl.html",isClosingDisabled:!0}),e.moduleName="vc-catalog"}]})}]).factory("virtoCommerce.catalogModule.predefinedSearchFilters",["$localStorage",function(e){return e.catalogSearchFilters=e.catalogSearchFilters||[],{register:function(t,o,a){_.each(a,(function(a){var r=_.find(e.catalogSearchFilters,(function(e){return e.id===a.id}));r?(!r.lastUpdateTime||r.lastUpdateTime<t)&&angular.copy(a,r):(!e[o]||e[o]<t)&&e.catalogSearchFilters.splice(0,0,a)})),e[o]=t}}}]).factory("virtoCommerce.catalogModule.itemTypesResolverService",(function(){return{objects:[],registerType:function(e){this.objects.push(e)},resolve:function(e){return _.findWhere(this.objects,{productType:e})}}})).factory("virtoCommerce.catalogModule.catalogImagesFolderPathHelper",[function(){return{getImagesFolderPath:function(e,t){return(e.length>5?e.substring(0,5):e)+"/"+t}}}]).run(["platformWebApp.mainMenuService","platformWebApp.widgetService","$state","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.catalogExportService","platformWebApp.permissionScopeResolver","virtoCommerce.catalogModule.catalogs","virtoCommerce.catalogModule.predefinedSearchFilters","platformWebApp.metaFormsService","virtoCommerce.catalogModule.itemTypesResolverService","$http","$compile","virtoCommerce.exportModule.genericViewerItemService","platformWebApp.toolbarService","platformWebApp.breadcrumbHistoryService",function(e,t,o,a,r,i,l,n,c,s,d,u,g,m,p){var f={path:"browse/catalog",icon:"fa fa-folder",title:"catalog.main-menu-title",priority:20,action:function(){o.go("workspace.catalog")},permission:"catalog:access"};e.addMenuItem(f),m.register(p.getBackButtonInstance(),"virtoCommerce.catalogModule.categoriesItemsListController"),m.register(p.getBackButtonInstance(),"virtoCommerce.catalogModule.catalogItemSelectController");var y={controller:"virtoCommerce.catalogModule.catalogEntryImageWidgetController",size:[2,2],template:"Modules/$(VirtoCommerce.Catalog)/Scripts/widgets/catalogEntryImageWidget.tpl.html"};t.registerWidget(y,"itemDetail");t.registerWidget({controller:"virtoCommerce.catalogModule.videoWidgetController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/widgets/videoWidget.tpl.html"},"itemDetail");t.registerWidget({controller:"virtoCommerce.catalogModule.itemPropertyWidgetController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/widgets/itemPropertyWidget.tpl.html"},"itemDetail");t.registerWidget({controller:"virtoCommerce.catalogModule.itemAssociationsWidgetController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/widgets/itemAssociationsWidget.tpl.html"},"itemDetail");var C={controller:"virtoCommerce.coreModule.seo.seoWidgetController",template:"Modules/$(VirtoCommerce.Core)/Scripts/SEO/widgets/seoWidget.tpl.html",objectType:"CatalogProduct",getDefaultContainerId:function(e){},getLanguages:function(e){return _.pluck(e.catalog.languages,"languageCode")}};t.registerWidget(C,"itemDetail");t.registerWidget({controller:"virtoCommerce.catalogModule.itemDimensionWidgetController",isVisible:function(e){return"Physical"===e.productType},size:[2,1],template:"Modules/$(VirtoCommerce.Catalog)/Scripts/widgets/itemDimensionWidget.tpl.html"},"itemDetail");t.registerWidget({controller:"virtoCommerce.catalogModule.editorialReviewWidgetController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/widgets/editorialReviewWidget.tpl.html"},"itemDetail");t.registerWidget({controller:"virtoCommerce.catalogModule.itemVariationWidgetController",isVisible:function(e){return"variationDetail"!==e.id},size:[1,1],template:"Modules/$(VirtoCommerce.Catalog)/Scripts/widgets/itemVariationWidget.tpl.html"},"itemDetail");t.registerWidget({controller:"virtoCommerce.catalogModule.itemAssetWidgetController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/widgets/itemAssetWidget.tpl.html"},"itemDetail");t.registerWidget({controller:"virtoCommerce.catalogModule.billOfMaterialsWidgetController",isVisible:function(e){return"BillOfMaterials"===e.productType},template:"Modules/$(VirtoCommerce.Catalog)/Scripts/widgets/billOfMaterialsWidget.tpl.html"},"itemDetail"),t.registerWidget(y,"categoryDetail");t.registerWidget({controller:"virtoCommerce.catalogModule.categoryPropertyWidgetController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/widgets/categoryPropertyWidget.tpl.html"},"categoryDetail");var v={controller:"virtoCommerce.coreModule.seo.seoWidgetController",template:"Modules/$(VirtoCommerce.Core)/Scripts/SEO/widgets/seoWidget.tpl.html",objectType:"Category",getDefaultContainerId:function(e){},getLanguages:function(e){return _.pluck(e.catalog.languages,"languageCode")}};t.registerWidget(v,"categoryDetail");t.registerWidget({controller:"virtoCommerce.catalogModule.categoryDescriptionWidgetController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/widgets/categoryDescriptionWidget.tpl.html"},"categoryDetail");t.registerWidget({controller:"virtoCommerce.catalogModule.catalogLanguagesWidgetController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/widgets/catalogLanguagesWidget.tpl.html"},"catalogDetail");t.registerWidget({isVisible:function(e){return!e.isNew},controller:"virtoCommerce.catalogModule.catalogPropertyWidgetController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/widgets/catalogPropertyWidget.tpl.html"},"catalogDetail");t.registerWidget({controller:"virtoCommerce.catalogModule.linksWidgetController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/widgets/linksWidget.tpl.html"},"categoryDetail");t.registerWidget({controller:"virtoCommerce.catalogModule.linksWidgetController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/widgets/linksWidget.tpl.html"},"itemDetail");var h={type:"SelectedCatalogScope",title:"catalog.permissions.catalog-scope.title",selectFn:function(e,t){var o={id:"catalog-pick",title:this.title,subtitle:"catalog.permissions.catalog-scope.blade.subtitle",currentEntity:this,onChangesConfirmedFn:t,dataService:l,controller:"platformWebApp.security.scopeValuePickFromSimpleListController",template:"$(Platform)/Scripts/app/security/blades/common/scope-value-pick-from-simple-list.tpl.html"};a.showBlade(o,e)}};i.register(h);var b={type:"CatalogSelectedCategoryScope",title:"catalog.permissions.category-scope.title",selectFn:function(e,t){var o=_.map(this.assignedScopes,(function(e){return{id:e.scope,name:e.label}})),r={showCheckingMultiple:!1,allowCheckingItem:!1,allowCheckingCategory:!0,selectedItemIds:_.map(this.assignedScopes,(function(e){return e.scope})),checkItemFn:function(e,t){t?_.all(o,(function(t){return t.id!==e.id}))&&o.push(e):o=_.reject(o,(function(t){return t.id===e.id}))}},i=this.scopeOriginal,l={id:"CatalogItemsSelect",title:"catalog.blades.catalog-items-select.title",controller:"virtoCommerce.catalogModule.catalogItemSelectController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/common/catalog-items-select.tpl.html",options:r,breadcrumbs:[],toolbarCommands:[{name:"platform.commands.confirm",icon:"fas fa-plus",executeMethod:function(e){var r=_.map(o,(function(e){return angular.extend({scope:e.id,label:e.name},i)}));t(r),a.closeBlade(e)},canExecuteMethod:function(){return o.length>0}}]};a.showBlade(l,e)}};i.register(b);var M={controller:"virtoCommerce.searchModule.indexWidgetController",template:"Modules/$(VirtoCommerce.Search)/Scripts/widgets/index-widget.tpl.html"},E=angular.extend({},M,{documentType:"Product"});t.registerWidget(E,"itemDetail"),E=angular.extend({},M,{documentType:"Category"}),t.registerWidget(E,"categoryDetail"),t.registerWidget({controller:"virtoCommerce.catalogModule.aggregationPropertiesWidgetController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/widgets/aggregationPropertiesWidget.tpl.html"},"storeDetail"),n.register(1477584e6,"catalogSearchFiltersDate",[{name:"catalog.blades.categories-items-list.labels.filter-new"},{keyword:"",searchInVariations:!0,id:5,name:"catalog.blades.categories-items-list.labels.filter-display-variations"},{keyword:"is:hidden",id:4,name:"catalog.blades.categories-items-list.labels.filter-notActive"},{keyword:"price_usd:[100 TO 200]",id:3,name:"catalog.blades.categories-items-list.labels.filter-priceRange"},{keyword:"is:priced",id:2,name:"catalog.blades.categories-items-list.labels.filter-withPrice"},{keyword:"is:unpriced",id:1,name:"catalog.blades.categories-items-list.labels.filter-priceless"}]),s.registerType({itemType:"catalog.blades.categories-items-add.menu.physical-product.title",description:"catalog.blades.categories-items-add.menu.physical-product.description",productType:"Physical",icon:"fas fa-box"}),s.registerType({itemType:"catalog.blades.categories-items-add.menu.digital-product.title",description:"catalog.blades.categories-items-add.menu.digital-product.description",productType:"Digital",icon:"fas fa-file-download"}),s.registerType({itemType:"catalog.blades.categories-items-add.menu.bill-of-materials-product.title",description:"catalog.blades.categories-items-add.menu.bill-of-materials-product.description",productType:"BillOfMaterials",icon:"far fa-list-alt"}),c.registerMetaFields("catalogDetail",[{name:"name",title:"catalog.blades.catalog-detail.labels.catalog-name",placeholder:"catalog.blades.catalog-detail.placeholders.enter-name",colSpan:2,isRequired:!0,valueType:"ShortText"}]),c.registerMetaFields("categoryDetail",[{name:"isActive",title:"catalog.blades.category-detail.labels.is-active",colSpan:2,valueType:"Boolean"},{name:"name",title:"catalog.blades.category-detail.labels.name",placeholder:"catalog.blades.category-detail.placeholders.name",colSpan:2,isRequired:!0,valueType:"ShortText"},{title:"catalog.blades.category-detail.labels.code",templateUrl:"code.html"},{colSpan:1,spanAllColumns:!0,templateUrl:"taxType.html"},{name:"priority",title:"catalog.blades.category-detail.labels.priority",placeholder:"catalog.blades.category-detail.placeholders.priority",colSpan:2,valueType:"Integer"}]),c.registerMetaFields("productDetail",[{title:"catalog.blades.item-detail.labels.name",colSpan:6,templateUrl:"name.html"}]),c.registerMetaFields("productDetail1",[{name:"id",title:"catalog.blades.item-detail.labels.id",colSpan:3,isReadOnly:!0,valueType:"ShortText"},{name:"outerId",title:"catalog.blades.item-detail.labels.outer-id",colSpan:3,placeholder:" ",isReadOnly:!0,valueType:"ShortText"},{title:"catalog.blades.item-detail.labels.sku",colSpan:3,templateUrl:"sku.html"},{name:"_priority",title:"catalog.blades.item-detail.labels.priority",placeholder:"catalog.blades.item-detail.placeholders.priority",colSpan:3,valueType:"Integer"},{title:"catalog.blades.item-detail.labels.gtin",colSpan:6,templateUrl:"gtin.html"}]),c.registerMetaFields("productDetail2",[{title:"catalog.blades.item-detail.labels.start-date",colSpan:3,templateUrl:"startDate.html"},{title:"catalog.blades.item-detail.labels.end-date",colSpan:3,templateUrl:"endDate.html"},{name:"isBuyable",title:"catalog.blades.item-detail.labels.can-be-purchased",colSpan:2,valueType:"Boolean"},{name:"isActive",title:"catalog.blades.item-detail.labels.store-visible",colSpan:2,valueType:"Boolean"},{name:"trackInventory",title:"catalog.blades.item-detail.labels.track-inventory",isVisibleFn:e=>"Digital"!==e.item.productType,colSpan:2,valueType:"Boolean"},{name:"hasUserAgreement",title:"catalog.blades.item-detail.labels.has-user-agreement",isVisibleFn:e=>"Digital"===e.item.productType,colSpan:2,valueType:"Boolean"},{name:"minQuantity",title:"catalog.blades.item-detail.labels.min-quantity",isVisibleFn:e=>"Digital"!==e.item.productType,colSpan:3,valueType:"Integer"},{name:"maxQuantity",title:"catalog.blades.item-detail.labels.max-quantity",isVisibleFn:e=>"Digital"!==e.item.productType,colSpan:3,valueType:"Integer"},{colSpan:2,title:"catalog.blades.item-detail.labels.download-type",isVisibleFn:e=>"Digital"===e.item.productType,templateUrl:"downloadType.html"},{name:"maxNumberOfDownload",title:"catalog.blades.item-detail.labels.max-downloads",isVisibleFn:e=>"Digital"===e.item.productType,colSpan:2,valueType:"Integer"},{name:"downloadExpiration",title:"catalog.blades.item-detail.labels.expiration-date",placeholder:"catalog.blades.item-detail.placeholders.expiration-date",isVisibleFn:e=>"Digital"===e.item.productType,colSpan:2,valueType:"DateTime"},{colSpan:3,spanAllColumns:!0,templateUrl:"vendor.html"},{colSpan:3,spanAllColumns:!0,templateUrl:"taxType.html"}]),c.registerMetaFields("VirtoCommerce.CatalogModule.Core.Model.Export.ExportableProductExportFilter",[{name:"catalogSelector",title:"catalog.selectors.titles.catalogs",templateUrl:"Modules/$(VirtoCommerce.Catalog)/Scripts/selectors/catalog-selector.tpl.html"},{name:"categorySelector",title:"catalog.selectors.titles.categories",templateUrl:"Modules/$(VirtoCommerce.Catalog)/Scripts/selectors/category-selector.tpl.html"},{name:"searchInVariations",title:"catalog.selectors.titles.search-in-variations",valueType:"Boolean"},{name:"searchInChildren",title:"catalog.selectors.titles.search-in-children",valueType:"Boolean"}]),c.registerMetaFields("VirtoCommerce.CatalogModule.Core.Model.Export.ExportableCatalogFullExportFilter",[{name:"catalogSelector",title:"catalog.selectors.titles.catalogs",templateUrl:"Modules/$(VirtoCommerce.Catalog)/Scripts/selectors/catalog-selector.tpl.html"}]),g.registerViewer("CatalogProduct",(function(e){var t=angular.copy(e);return{id:"itemmDetail",itemId:t.id,productType:t.productType,title:t.name,controller:"virtoCommerce.catalogModule.itemDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/item-detail.tpl.html"}})),d.get("Modules/$(VirtoCommerce.Catalog)/Scripts/directives/itemSearch.tpl.html").then((function(e){u(e.data)})),r.register({name:"Generic Export",description:"Export products filtered by catalogs or categories to JSON or CSV",icon:"fa-fw fa fa-database",controller:"virtoCommerce.exportModule.exportSettingsController",template:"Modules/$(VirtoCommerce.Export)/Scripts/blades/export-settings.tpl.html",id:"catalogGenericExport",title:"catalog.blades.exporter.productTitle",subtitle:"catalog.blades.exporter.productSubtitle",onInitialize:function(e){var t={exportTypeName:"VirtoCommerce.CatalogModule.Core.Model.Export.ExportableProduct",dataQuery:{exportTypeName:"ProductExportDataQuery",categoryIds:_.pluck(e.selectedCategories,"id"),objectIds:_.pluck(e.selectedProducts,"id"),catalogIds:[e.catalog.id],searchInChildren:!0,isAllSelected:!0}};e.exportDataRequest=t,e.totalItemsCount=(e.selectedProducts||[]).length}})}])},function(e,t){var o="virtoCommerce.catalogBulkActionsModule";void 0!==AppDependencies&&AppDependencies.push(o),angular.module(o,[]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("workspace.virtoCommerceCatalogBulkActionsModuleState",{url:"/virtoCommerce.catalogBulkActionsModule",templateUrl:"$(Platform)/Scripts/common/templates/home.tpl.html",controller:["$scope","platformWebApp.bladeNavigationService",function(e,t){t.showBlade({id:"blade1",controller:"virtoCommerce.catalogBulkActionsModule.helloWorldController",template:"Modules/$(virtoCommerce.catalog)/Scripts/blades/hello-world.html",isClosingDisabled:!0})}]})}]).run(["$rootScope","platformWebApp.mainMenuService","platformWebApp.widgetService","$state","platformWebApp.toolbarService","platformWebApp.bladeUtils","virtoCommerce.catalogModule.catalogBulkActionService","platformWebApp.bladeNavigationService",function(e,t,o,a,r,i,l,n){l.register({name:"CategoryChangeBulkAction",controller:"virtoCommerce.catalogModule.changeCategoryActionStepsController",template:"Modules/$(virtoCommerce.catalog)/Scripts/blades/action-change-category.tpl.html"}),l.register({name:"PropertiesUpdateBulkAction",controller:"virtoCommerce.catalogModule.editPropertiesActionController",template:"Modules/$(virtoCommerce.catalog)/Scripts/blades/action-edit-properties.tpl.html"}),r.register({name:"Bulk Actions",icon:"fa fa-cubes",executeMethod:function(e){var t=e.$scope.gridApi,o=e.filter,a={id:"catalogBulkActions",title:"catalogBulkActions.blades.exporter-list.title",subtitle:"catalogBulkActions.blades.exporter-list.subtitle",catalog:e.catalog,controller:"virtoCommerce.catalogModule.actionListController",template:"Modules/$(virtoCommerce.catalog)/Scripts/blades/action-list.tpl.html",selectedProducts:_.filter(t.selection.getSelectedRows(),(function(e){return"product"===e.type})),selectedCategories:_.filter(t.selection.getSelectedRows(),(function(e){return"category"===e.type})),dataQuery:{}};if(t.selection.getSelectAllState()){var r={searchCriteria:{catalogId:e.catalogId,categoryId:e.categoryId,keyword:o.keyword?o.keyword:void 0,searchInVariations:!!o.searchInVariations&&o.searchInVariations,responseGroup:"withCategories, withProducts",skip:void 0,take:void 0}};angular.extend(a.dataQuery,r)}else{var i={listEntries:t.selection.getSelectedRows()};angular.extend(a.dataQuery,i)}n.showBlade(a)},canExecuteMethod:function(e){var t=e.$scope.gridApi;return t&&_.any(t.selection.getSelectedRows())},index:20},"virtoCommerce.catalogModule.categoriesItemsListController")}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.changeCategoryActionStepsController",["$scope","$translate","platformWebApp.bladeNavigationService","$localStorage",function(e,t,o,a){var r=e.blade;r.canStartProcess=!1,r.isLoading=!0,r.selectedCategory=null,r.actionDataContext=angular.extend({categoryId:null,catalogId:null},r.actionDataContext),e.startAction=function(){var e={id:"actionProgress",title:"virtoCommerce.catalogBulkActionsModule.blades.action-progress.title",controller:"virtoCommerce.catalogModule.bulkActionProgressController",template:"Modules/$(virtoCommerce.catalog)/Scripts/blades/bulk-action-progress.tpl.html",actionDataContext:r.actionDataContext,onCompleted:function(){r.isProcessing=!1}};o.showBlade(e,r)},e.selectCategory=function(){var t=[r.actionDataContext.categoryId],a={id:"CatalogItemsSelect",controller:"virtoCommerce.catalogModule.catalogItemSelectController",template:"Modules/$(virtoCommerce.catalog)/Scripts/blades/common/catalog-items-select.tpl.html",title:"catalog.selectors.blades.titles.select-categories",options:{showCheckingMultiple:!1,allowCheckingCategory:!0,allowCheckingItem:!1,selectedItemIds:t,checkItemFn:function(e,o){o?_.find(t,(function(t){return t===e.id}))||(t.push(e.id),r.selectedCategory=e,r.actionDataContext.categoryId=e.id,r.actionDataContext.catalogId=e.catalogId):t=_.reject(t,(function(t){return t===e.id}))}},breadcrumbs:[],toolbarCommands:[{name:"platform.commands.confirm",icon:"fa fa-check",executeMethod:function(e){r.canStartProcess=!0,o.closeBlade(e)},canExecuteMethod:function(){return _.any(t)}},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(a){t=[],r.categoryId="",e.selectedCount=0,o.closeBlade(a)},canExecuteMethod:function(){return _.any(t)}}]};o.showBlade(a,r)},e.validateActionParameters=function(){return!0},e.blade.headIcon="fa fa-upload",r.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.editPropertiesActionController",["$scope","$translate","platformWebApp.bladeNavigationService","$localStorage","virtoCommerce.catalogBulkActionsModule.webApi",function(e,t,o,a,r){var i=e.blade;i.canStartProcess=!1,i.isLoading=!0,i.isPropertiesSelected=!1,i.properties=[],i.includedProperties=[],i.propertySelected=0,i.actionDataContext=angular.extend({editedProperties:{}},i.actionDataContext),e.startAction=function(){var e={id:"actionProgress",title:"virtoCommerce.catalogBulkActionsModule.blades.action-progress.title",controller:"virtoCommerce.catalogModule.bulkActionProgressController",template:"Modules/$(virtoCommerce.catalog)/Scripts/blades/bulk-action-progress.tpl.html",actionDataContext:i.actionDataContext,onCompleted:function(){i.isProcessing=!1}};o.showBlade(e,i)},e.selectProperties=function(){var t={id:"propertiesSelector",controller:"virtoCommerce.catalogModule.propertiesSelectorController",template:"Modules/$(virtoCommerce.catalog)/Scripts/blades/step-select-properties.tpl.html",properties:i.properties,includedProperties:i.includedProperties,onSelected:function(t){i.includedProperties=t,i.propertySelected=t.length,i.isPropertiesSelected=!0,e.editProperties()}};o.showBlade(t,i)},e.editProperties=function(){var e={id:"propertiesEditor",controller:"virtoCommerce.catalogModule.editPropertiesActionStepController",template:"Modules/$(virtoCommerce.catalog)/Scripts/blades/step-edit-properties.tpl.html",properties:i.includedProperties,propGroups:[{title:"catalog.properties.product",type:"Product"},{title:"catalog.properties.variation",type:"Variation"}],onSelected:function(e){i.canStartProcess=!0,i.actionDataContext.properties=e}};o.showBlade(e,i)},e.validateActionParameters=function(){return!0},e.blade.headIcon="fa fa-upload",r.getActionData(i.actionDataContext,(function(e){i.properties=e.properties,i.propertyTotal=e.properties.length,_.each(i.properties,(function(e){e.id||"Vendor"!==e.name&&"TaxType"!==e.name&&"MeasureUnit"!==e.name&&"PackageType"!==e.name&&"WeightUnit"!==e.name?e.UseDefaultUIForEdit=!0:e.UseDefaultUIForEdit=!1,e.values=[],"Native properties"===e.ownerName?e.group="Native product properties":e.group="Extended properties"})),i.isLoading=!1}))}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.actionListController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.catalogBulkActionService","virtoCommerce.catalogBulkActionsModule.webApi",function(e,t,o,a){var r=e.blade;e.selectedNodeId=null,e.openBlade=function(e){var a={};angular.copy(e,a);var i=o.getByName(e.name);i?(a.controller=i.controller,a.template=i.template,t.showBlade(a,r)):t.setError("Can't find controller for action "+e.name,r)},e.blade.headIcon="fa fa-upload",e.blade.title="Bulk action list",e.blade.subtitle="Select action for bulk operation",r.initializeAction=function(e){e.title="virtoCommerce.catalogBulkActionsModule.actions.types."+e.name+".title",e.subtitle="virtoCommerce.catalogBulkActionsModule.actions.types."+e.name+".subtitle",e.id=e.name,e.icon="fa fa-cogs",e.actionDataContext={actionName:e.name,contextTypeName:e.contextTypeName,dataQuery:r.dataQuery}},a.getActions((function(e){e&&(r.actions=_.each(e,(function(e){r.initializeAction(e)})))})),r.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.advancedSearchResultsController",["$rootScope","$scope","$filter","virtoCommerce.catalogModule.categories","virtoCommerce.catalogModule.items","virtoCommerce.catalogModule.listEntries","platformWebApp.bladeNavigationService","platformWebApp.dialogService",function(e,t,o,a,r,i,l,n){t.blade.refresh=function(){t.blade.isLoading=!0;var e=(t.pageSettings.currentPage-1)*t.pageSettings.itemsPerPageCount;i.listitemssearch({catalogId:t.blade.catalogId,categoryId:t.blade.categoryId,responseGroup:"withProducts",skip:e,take:t.pageSettings.itemsPerPageCount},(function(e,o){t.blade.isLoading=!1,t.pageSettings.totalItems=e.totalCount,t.items=e.listEntries}),(function(e){l.setError("Error "+e.status,t.blade)}))},t.selectItem=function(e){t.selectedItem=e},t.blade.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:blade.refresh,canExecuteMethod:function(){return!0}}]}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.advancedSearchController",["$scope","$filter","virtoCommerce.catalogModule.listEntries","platformWebApp.bladeNavigationService",function(e,t,o,a){var r=void 0;function i(e){var t=[];return angular.forEach(e,(function(e){e.isChecked&&t.push(e)})),t}e.filter={searchKeyword:void 0},e.blade.refresh=function(){e.blade.isLoading=!0;var l=o.listitemssearch({categoryId:e.filter.categoryId,catalogId:e.filter.catalogId,keyword:e.filter.searchKeyword,propertyValues:e.filter.propValues,responseGroup:"withCatalogs, withCategories, withProperties",skip:0,take:0},(function(){e.blade.isLoading=!1;var o,a,n,c,s={children:l.treeNodes};e.tree=[s],e.propertyValueGroups=(o=r,a=l.propertyValues,n={},c=i(o),angular.forEach(a,(function(e){angular.isUndefined(n[e.propertyName])&&(n[e.propertyName]={propValues:[],showAll:!1}),n[e.propertyName].propValues.push(e),e.isChecked=t("filter")(c,(function(t){return t.propertyName==e.propertyName&&t.value==e.value})).length>0})),n),r=l.propertyValues,e.checkedPropValues=i(r)}),(function(t){a.setError("Error "+t.status,e.blade)}))},e.refreshItems=function(){var t={id:"searchResults",title:"catalog.blades.advanced-search-results.title",subtitle:"",filter:e.filter,controller:"virtoCommerce.catalogModule.advancedSearchResultsController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/advanced-search-results.tpl.html"};a.showBlade(t,e.blade)},e.uncheckAllProp=function(){angular.forEach(e.checkedPropValues,(function(e){e.isChecked=!1})),e.updateSelectedPropValues(),e.refreshItems()},e.updateSelectedPropValues=function(){e.checkedPropValues=i(r)},e.blade.refresh(),e.refreshItems()}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.aggregationPropertyDetailsController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.aggregationProperties",function(e,t,o){var a=e.blade;a.updatePermission="store:update",a.headIcon="fa fa-gear";a.propertyTypes=["Attribute","Range"],a.isRange=function(){return"Attribute"!==a.property.type},a.canChangeType=function(){return"PriceRange"!==a.property.type},a.canChangeSize=function(){return!a.isRange()},a.getValues=function(e){var t;return a.isRange()?(t=[],e&&!isNaN(e)&&angular.isNumber(+e)&&t.unshift(e)):(t=a.values,e&&-1===t.indexOf(e)&&(t=a.values.slice()).unshift(e)),t},a.onClose=function(o){t.showConfirmationIfNeeded(!angular.equals(a.property,a.originalProperty)&&a.hasUpdatePermission(),!0,a,e.saveChanges,o,"Save changes","The property settings have been modified. Do you want to save changes?")},e.saveChanges=function(){angular.copy(a.property,a.originalProperty),e.bladeClose()},e.isValid=!0,a.originalProperty=a.property,a.property=angular.copy(a.property),a.values=[],o.getValues({storeId:a.storeId,propertyName:a.originalProperty.name},(function(e){a.values=e,a.isLoading=!1}),(function(e){t.setError("Error: "+e.status,a)})),a.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.aggregationPropertiesController",["$scope","platformWebApp.dialogService","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.aggregationProperties",function(e,t,o,a){var r=e.blade;function i(){return!angular.equals(r.selectedEntities,r.origSelected)&&r.hasUpdatePermission()}r.updatePermission="store:update",r.edit=function(e){var t={id:"aggregationPropertyDetails",controller:"virtoCommerce.catalogModule.aggregationPropertyDetailsController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/aggregation-properties-details.tpl.html",title:e.name,storeId:r.storeId,property:e};o.showBlade(t,r)},r.select=function(e){e.isSelected=!0,r.selectedEntities.push(e)},r.unselect=function(e){e.isSelected=!1,r.selectedEntities.splice(r.selectedEntities.indexOf(e),1)},r.onClose=function(t){o.showConfirmationIfNeeded(i(),!0,r,e.saveChanges,t,"Save changes","The properties selection has been modified. Do you want to confirm changes?")},e.saveChanges=function(){r.isLoading=!0,a.setProperties({storeId:r.storeId},r.selectedEntities,(function(e){angular.copy(r.currentEntities,r.origEntity),angular.copy(r.selectedEntities,r.origSelected),r.isLoading=!1,r.parentBlade.refresh()}),(function(e){o.setError("Error: "+e.status,r)}))},r.toolbarCommands=[{name:"Save",icon:"fas fa-save",executeMethod:e.saveChanges,canExecuteMethod:i},{name:"Reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(r.origEntity,r.currentEntities),r.selectedEntities=_.where(r.currentEntities,{isSelected:!0}),angular.copy(r.selectedEntities,r.origSelected)},canExecuteMethod:i}],e.sortableOptions={axis:"y",cursor:"move"},r.headIcon="fa fa-gear",a.getProperties({storeId:r.storeId},(function(e){r.currentEntities=angular.copy(e),r.origEntity=e,r.selectedEntities=_.where(r.currentEntities,{isSelected:!0}),r.origSelected=angular.copy(r.selectedEntities),r.isLoading=!1}),(function(e){o.setError("Error "+e.status,r)}))}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.billOfMaterialsListController",["$scope","$timeout","platformWebApp.bladeNavigationService","platformWebApp.uiGridHelper","platformWebApp.bladeUtils","platformWebApp.dialogService","virtoCommerce.catalogModule.items","virtoCommerce.catalogModule.categories","virtoCommerce.catalogModule.associations",function(e,t,o,a,r,i,l,n,c){e.uiGridConstants=a.uiGridConstants,e.hasMore=!0;var s=null,d=e.blade;function u(){e.hasMore&&(d.isLoading=!0,++e.pageSettings.currentPage,e.gridApi.infiniteScroll.saveScrollPercentage(),c.search(g(),(function(t){d.isLoading=!1,m(t.results),d.currentEntities=d.currentEntities.concat(t.results),e.pageSettings.totalItems=t.totalCount,e.hasMore=t.results.length===e.pageSettings.itemsPerPageCount,e.gridApi.infiniteScroll.dataLoaded()})))}function g(){return{keyword:d.filter.keyword,skip:(e.pageSettings.currentPage-1)*e.pageSettings.itemsPerPageCount,take:e.pageSettings.itemsPerPageCount,objectIds:[d.item.id],group:d.associationType}}function m(e){if(_.some(e)){d.isLoading=!0;var t=_.pluck(e,"associatedObjectId");l.plenty({respGroup:"WithImages"},t,(function(t){var o=_.uniq(_.pluck(t,"categoryId"));n.plenty({respGroup:"Info"},o,(function(o){!function(e,t,o){_.each(e,(function(e){e.$$quantity=e.quantity,e.associatedObjectType=d.associatedObjectType;var a=_.find(t,(function(t){return t.id===e.associatedObjectId}));a&&(e.$$productName=a.name,e.$$categoryId=a.categoryId,e.$$category=_.find(o,(function(t){return t.id===e.$$categoryId})),a.images&&a.images.length&&(e.$$imageUrl=a.images[0].url),"product"===e.associatedObjectType&&(e.$$productType=a.productType))}))}(e,t,o),d.isLoading=!1}))}))}}d.headIcon="far fa-list-alt",d.title="catalog.blades.bill-of-materials-list.title",d.subtitle="catalog.blades.bill-of-materials-list.subtitle",d.cupImage="Modules/$(VirtoCommerce.Catalog)/Content/images/cup.svg",d.associationType="BillOfMaterials",d.associatedObjectType="product",d.currentEntities=[],d.filter={},d.filter.criteriaChanged=function(){d.refresh()},d.refresh=function(){e.pageSettings.currentPage>1&&(e.pageSettings.currentPage=1),d.isLoading=!0,c.search(g(),(function(t){d.isLoading=!1,m(t.results),d.currentEntities=t.results,e.pageSettings.totalItems=t.totalCount,e.hasMore=t.results.length===e.pageSettings.itemsPerPageCount,s&&(s=_.findWhere(t.results,{id:s.id}))})),e.gridApi&&(d.currentEntities=[],e.gridApi.infiniteScroll.resetScroll(!0,!0),e.gridApi.infiniteScroll.dataLoaded())},e.openProduct=function(t){e.selectedNodeId=t.associatedObjectId;var a={id:"billOfMaterialsDetail",itemId:t.associatedObjectId,productType:t.$$productType,catalog:d.catalog,controller:"virtoCommerce.catalogModule.itemDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/item-detail.tpl.html"};o.showBlade(a,d)},e.isValidQuantity=function(e){return e.quantity&&e.quantity>0},e.updateQuantity=function(t){t.$$quantity!==t.quantity&&e.isValidQuantity(t)&&(d.isLoading=!0,c.update([t],(function(){t.$$quantity=t.quantity,d.isLoading=!1})))},e.deleteList=function(e){o.closeChildrenBlades(d,(function(){var t={id:"confirmDeleteBomAssociaitonItem",title:"catalog.dialogs.bill-or-materials-associations-delete.title",message:"catalog.dialogs.bill-or-materials-associations-delete.message",callback:function(t){t&&o.closeChildrenBlades(d,(function(){d.isLoading=!0;var t=_.pluck(e,"id");c.delete({ids:t},(function(){d.refresh()}))}))}};i.showConfirmationDialog(t)}))},e.openAddItemBlade=function(){var e=[],t={id:"CatalogItemsSelect",controller:"virtoCommerce.catalogModule.catalogItemSelectController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/common/catalog-items-select.tpl.html",options:{allowCheckingCategory:!1,selectedItemIds:[],excludeProductType:"BillOfMaterials",checkItemFn:function(t,o){o?_.find(e,(function(e){return e.id==t.id}))||e.push(t):e=_.reject(e,(function(e){return e.id==t.id}))}},breadcrumbs:[],toolbarCommands:[{name:"platform.commands.confirm",icon:"fa fa-check",executeMethod:function(t){d.isLoading=!0,o.closeBlade(t);var a=_.pluck(e,"id"),r={take:a.length,objectIds:[d.item.id],group:d.associationType,associatedObjectIds:a};c.search(r,(function(e){if(e.totalCount&&(a=_.filter(a,(function(t){return!_.some(e.results,(function(e){return t===e.associatedObjectId}))}))),a.length){var t=_.map(a,(function(e){return{associatedObjectId:e,associatedObjectType:d.associatedObjectType,itemId:d.item.id,quantity:1,type:d.associationType}}));d.isLoading=!0,c.update(t,(function(){d.refresh()}))}d.isLoading=!1}))},canExecuteMethod:function(){return _.any(e)}}]};o.showBlade(t,d)},d.toolbarCommands=[{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){e.openAddItemBlade()},canExecuteMethod:function(){return!0}},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){e.deleteList(e.gridApi.selection.getSelectedRows())},canExecuteMethod:function(){return e.gridApi&&_.any(e.gridApi.selection.getSelectedRows())}}],e.setGridOptions=function(o){r.initializePagination(e,!0),e.pageSettings.itemsPerPageCount=20,a.initialize(e,o,(function(t){e.gridApi=t,a.bindRefreshOnSortChanged(e),e.gridApi.infiniteScroll.on.needLoadMoreData(e,u)})),t((function(){d.refresh()}))}}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.bulkActionProgressController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.catalogBulkActionsModule.webApi",function(e,t,o){var a=e.blade;a.isLoading=!0,e.blade.headIcon="fa fa-upload",e.$on("new-notification-event",(function(e,o){a.notification&&o.id===a.notification.id&&(angular.copy(o,a.notification),o.errorCount>0&&t.setError("Action error",a),a.notification.finished&&a.onCompleted&&a.onCompleted())}));var r={name:"platform.commands.cancel",icon:"fa fa-times",canExecuteMethod:function(){return a.notification&&!a.notification.finished},executeMethod:function(){o.cancel({jobId:a.notification.jobId},(function(e){}))}};a.toolbarCommands=[r],a.isLoading=!1,o.runBulkAction(a.actionDataContext,(function(e){a.notification=e}))}])},function(e,t){angular.module("virtoCommerce.catalogModule").factory("virtoCommerce.catalogModule.catalogBulkActionService",(function(){var e=[];return{getByName:function(t){return _.find(e,(function(e){return e.name===t}))},register:function(t){var o=_.findIndex(e,(function(e){return e.name===t.name}));o>=0?e[o]=t:e.push(t)}}}))},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.catalogAddController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.catalogs",function(e,t,o){e.addCatalog=function(){o.newCatalog({},(function(o){var a={id:"catalogEdit",isNew:!0,currentEntity:o,title:"catalog.blades.catalog-detail.title-new",subtitle:"catalog.blades.catalog-detail.subtitle-new",controller:"virtoCommerce.catalogModule.catalogDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/catalog-detail.tpl.html"};t.showBlade(a,e.blade.parentBlade)}),(function(o){t.setError("Error "+o.status,e.blade)}))},e.addVirtualCatalog=function(){o.newVirtualCatalog({},(function(o){var a={id:"catalogEdit",isNew:!0,currentEntity:o,title:"catalog.blades.catalog-detail.title-new-virtual",subtitle:"catalog.blades.catalog-detail.subtitle-virtual",controller:"virtoCommerce.catalogModule.virtualCatalogDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/catalog-detail.tpl.html"};t.showBlade(a,e.blade.parentBlade)}),(function(o){t.setError("Error "+o.status,e.blade)}))},e.blade.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.catalogDetailController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.catalogs","platformWebApp.metaFormsService",function(e,t,o,a){var r,i=e.blade;function l(e){i.isNew||(i.title=e.name),i.currentEntity=angular.copy(e),i.origEntity=e,i.isLoading=!1,i.securityScopes=e.securityScopes}function n(){return!angular.equals(i.currentEntity,i.origEntity)&&i.hasUpdatePermission()}function c(){return n()&&r&&r.$valid}function s(){i.isNew||(i.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:function(){e.saveChanges()},canExecuteMethod:c,permission:i.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(i.origEntity,i.currentEntity)},canExecuteMethod:n,permission:i.updatePermission}])}i.updatePermission="catalog:update",i.metaFields=a.getMetaFields("catalogDetail"),i.refresh=function(e){i.isNew?l(i.currentEntity):o.get({id:i.currentEntityId},(function(t){l(t),i.childrenBlades&&_.each(i.childrenBlades,(function(e){e.refresh&&e.refresh(i.currentEntity)})),e&&i.parentBlade.refresh()}),(function(e){t.setError("Error "+e.status,i)}))},e.setForm=function(e){r=e},e.cancelChanges=function(){angular.copy(i.origEntity,i.currentEntity),e.bladeClose()},e.saveChanges=function(){i.isLoading=!0,i.isNew?o.save({},i.currentEntity,(function(t){i.isNew=void 0,i.currentEntityId=t.id,l(t),s(),e.gridsterOpts.maxRows=3,i.refresh(!0)}),(function(e){t.setError("Error "+e.status,i)})):o.update({},i.currentEntity,(function(){i.refresh(!0)}),(function(e){t.setError("Error "+e.status,i)}))},i.onClose=function(o){t.showConfirmationIfNeeded(n(),c(),i,e.saveChanges,o,"catalog.dialogs.catalog-save.title","catalog.dialogs.catalog-save.message")},e.gridsterOpts={columns:3},s(),i.refresh(!1)}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.catalogLanguagesController",["$scope","platformWebApp.settings","platformWebApp.bladeNavigationService",function(e,t,o){var a=e.blade;a.updatePermission="catalog:update";var r=t.getValues({id:"VirtoCommerce.Core.General.Languages"}).$promise;e.languages=[],a.onClose=function(t){o.showConfirmationIfNeeded(!angular.equals(a.currentEntity,a.origEntity)&&a.hasUpdatePermission(),!0,a,e.saveChanges,t,"catalog.dialogs.language-save.title","catalog.dialogs.language-save.message")},e.cancelChanges=function(){a.currentEntity=a.origEntity,e.bladeClose()},e.saveChanges=function(){if(a.hasUpdatePermission()){var t=_.map(a.currentEntity.selectedValues,(function(e){return{languageCode:e}})),o=_.find(t,(function(e){return e.languageCode.toLowerCase()===a.currentEntity.defaultValue.toLowerCase()}));o?o.isDefault=!0:(o={languageCode:a.currentEntity.defaultValue,isDefault:!0},t.push(o)),a.data.defaultLanguage=o,a.data.languages=t,angular.copy(a.currentEntity,a.origEntity),e.bladeClose()}},a.headIcon="fa fa-language",e.openDictionarySettingManagement=function(){var t={id:"settingDetailChild",isApiSave:!0,currentEntityId:"VirtoCommerce.Core.General.Languages",parentRefresh:function(t){e.languages=t},controller:"platformWebApp.settingDictionaryController",template:"$(Platform)/Scripts/app/settings/blades/setting-dictionary.tpl.html"};o.showBlade(t,a)},e.$watch("blade.parentBlade.currentEntity",(function(t){a.data=t,r.then((function(o){e.languages=o;var r=_.find(o,(function(e){return e.toLowerCase()===t.defaultLanguage.languageCode.toLowerCase()})),i=_.pluck(t.languages,"languageCode"),l={defaultValue:r,selectedValues:_.without(i,r)};a.origEntity=l,a.currentEntity=angular.copy(l),a.isLoading=!1}))}))}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.catalogsListController",["$scope","virtoCommerce.catalogModule.catalogs","platformWebApp.bladeNavigationService","platformWebApp.dialogService","platformWebApp.authService","platformWebApp.uiGridHelper","platformWebApp.bladeUtils","$timeout",function(e,t,o,a,r,i,l,n){e.uiGridConstants=i.uiGridConstants;var c=e.blade;e.hasMore=!0,c.currentEntities=[];var s=null;function d(){e.hasMore&&(++e.pageSettings.currentPage,e.gridApi.infiniteScroll.saveScrollPercentage(),c.isLoading=!0,t.search(u(),(function(t){c.isLoading=!1,e.pageSettings.totalItems=t.totalCount,c.currentEntities=c.currentEntities.concat(t.results),e.hasMore=t.results.length===e.pageSettings.itemsPerPageCount,e.gridApi.infiniteScroll.dataLoaded()})))}function u(){return{sort:i.getSortExpression(e),skip:(e.pageSettings.currentPage-1)*e.pageSettings.itemsPerPageCount,take:e.pageSettings.itemsPerPageCount}}function g(e){var t={id:"itemsList1",level:1,breadcrumbs:c.breadcrumbs,title:"catalog.blades.categories-items-list.title",controller:"virtoCommerce.catalogModule.categoriesItemsListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/categories-items-list.tpl.html"};e.id?angular.extend(t,{subtitle:"catalog.blades.categories-items-list.subtitle",subtitleValues:{name:e.name},catalogId:e.id,catalog:e,securityScopes:e.securityScopes}):angular.extend(t,{filterKeyword:m.keyword,subtitle:"catalog.blades.categories-items-list.subtitle-search",subtitleValues:{keyword:m.keyword}}),o.showBlade(t,c)}c.refresh=function(){c.isLoading=!0,1!==e.pageSettings.currentPage&&(e.pageSettings.currentPage=1),t.search(u(),(function(t){c.isLoading=!1,e.pageSettings.totalItems=t.totalCount,c.currentEntities=t.results,e.hasMore=t.results.length===e.pageSettings.itemsPerPageCount,s&&(s=_.findWhere(t.results,{id:s.id}))})),e.gridApi&&(c.currentEntities=[],e.gridApi.infiniteScroll.resetScroll(!0,!0),e.gridApi.infiniteScroll.dataLoaded())},e.selectNode=function(t){s=t,e.selectedNodeId=s.id,g(t),o.catalogsSelectedCatalog=s,o.catalogsSelectedCategoryId=void 0},e.editCatalog=function(e){var t,a,r,i;e.isVirtual?(t=e.id,a=null,r=e.name,i={currentEntityId:t,currentEntity:a,title:r,subtitle:"catalog.blades.catalog-detail.subtitle-virtual",id:"catalogEdit",controller:"virtoCommerce.catalogModule.virtualCatalogDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/catalog-detail.tpl.html"},o.showBlade(i,c)):function(e,t,a){var r={currentEntityId:e,currentEntity:t,title:a,id:"catalogEdit",subtitle:"catalog.blades.catalog-detail.subtitle",controller:"virtoCommerce.catalogModule.catalogDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/catalog-detail.tpl.html"};o.showBlade(r,c)}(e.id,null,e.name)},e.deleteCatalog=function(r){var i={id:"confirmDelete",name:r.name,callback:function(a){a&&o.closeChildrenBlades(c,(function(){s=void 0,e.selectedNodeId=void 0,c.isLoading=!0,t.delete({id:r.id},c.refresh,(function(e){o.setError("Error "+e.status,c)}))}))}};a.showDialog(i,"Modules/$(VirtoCommerce.Catalog)/Scripts/dialogs/deleteCatalog-dialog.tpl.html","platformWebApp.confirmDialogController")},c.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:c.refresh,canExecuteMethod:function(){return!0}}],r.checkPermission("catalog:create")&&c.toolbarCommands.splice(1,0,{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){s=void 0,e.selectedNodeId=void 0;o.showBlade({id:"listItemChild",title:"catalog.blades.catalog-add.title",subtitle:"catalog.blades.catalog-add.subtitle",controller:"virtoCommerce.catalogModule.catalogAddController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/catalog-add.tpl.html"},c)},canExecuteMethod:function(){return!0}});var m=c.filter={keyword:null};m.criteriaChanged=function(){m.keyword?g({}):o.closeChildrenBlades(c),s=null,e.selectedNodeId=null,o.catalogsSelectedCatalog=void 0,o.catalogsSelectedCategoryId=void 0},e.setGridOptions=function(t){l.initializePagination(e,!0),e.pageSettings.itemsPerPageCount=20,i.initialize(e,t,(function(t){e.gridApi=t,i.bindRefreshOnSortChanged(e),e.gridApi.infiniteScroll.on.needLoadMoreData(e,d)})),n((function(){c.refresh()}))}}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.catalogsSelectController",["$scope","virtoCommerce.catalogModule.catalogs","platformWebApp.bladeNavigationService",function(e,t,o){var a=e.blade;a.refresh=function(){a.isLoading=!0,t.search({take:1e3},(function(t){a.doShowAllCatalogs?e.objects=t.results:e.objects=_.where(t.results,{isVirtual:!1}),a.isLoading=!1}),(function(e){o.setError("Error "+e.status,a)}))},e.selectNode=function(t){e.bladeClose((function(){a.parentBlade.onAfterCatalogSelected(t)}))},a.refresh()}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.categoriesItemsAddController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.categories","virtoCommerce.catalogModule.items","virtoCommerce.catalogModule.itemTypesResolverService",function(e,t,o,a,r){var i=e.blade,l=i.parentBlade;function n(e){e.properties=_.filter(e.properties,(function(e){return"Product"===e.type||"Variation"===e.type}));var o={id:"listItemDetail",item:e,catalog:i.catalog,title:"catalog.wizards.new-product.title",subtitle:"catalog.wizards.new-product.subtitle",controller:"virtoCommerce.catalogModule.newProductWizardController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/wizards/newProduct/new-product-wizard.tpl.html"};t.showBlade(o,l)}function c(e){"Digital"!==e.productType&&"BillOfMaterials"!==e.productType||(e.trackInventory=!1)}e.availableTypes=r.objects,e.addCategory=function(){o.newCategory({catalogId:l.catalogId,parentCategoryId:l.categoryId},(function(o){e.bladeClose((function(){var e={id:"newCategoryWizard",currentEntity:o,title:"catalog.wizards.category.title",subtitle:"catalog.wizards.category.subtitle",controller:"virtoCommerce.catalogModule.newCategoryWizardController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/wizards/newCategory/category-wizard.tpl.html"};t.showBlade(e,l)}))}),(function(o){t.setError("Error "+o.status,e.blade)}))},e.addLinkedCategory=function(){e.bladeClose((function(){t.showBlade({id:"selectCatalog",title:"catalog.blades.catalogs-select.title",subtitle:"catalog.blades.catalogs-select.subtitle",controller:"virtoCommerce.catalogModule.catalogsSelectController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/catalogs-select.tpl.html"},l)}))},e.addProduct=function(o){angular.isDefined(l.categoryId)?a.newItemInCategory({catalogId:l.catalogId,categoryId:l.categoryId},(function(t){t.productType=o,c(t),e.bladeClose((function(){n(t)}))}),(function(o){t.setError("Error "+o.status,e.blade)})):a.newItemInCatalog({catalogId:l.catalogId},(function(t){t.productType=o,c(t),e.bladeClose((function(){n(t)}))}),(function(o){t.setError("Error "+o.status,e.blade)}))},i.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.categoriesItemsListController",["$sessionStorage","$localStorage","$timeout","$scope","virtoCommerce.catalogModule.categories","virtoCommerce.catalogModule.items","virtoCommerce.catalogModule.listEntries","platformWebApp.bladeUtils","platformWebApp.dialogService","platformWebApp.authService","platformWebApp.uiGridHelper","virtoCommerce.catalogModule.catalogs",function(e,t,o,a,r,i,l,n,c,s,d,u){a.uiGridConstants=d.uiGridConstants,a.hasMore=!0,a.items=[];var g=a.blade,m=n.bladeNavigationService;function p(){if(a.hasMore){++a.pageSettings.currentPage,a.gridApi.infiniteScroll.saveScrollPercentage(),g.isLoading=!0;var e=f();l.listitemssearch(e,(function(e){M(e.listEntries),g.isLoading=!1,a.pageSettings.totalItems=e.totalCount,a.items=a.items.concat(e.listEntries),a.hasMore=e.listEntries.length===a.pageSettings.itemsPerPageCount,a.gridApi.infiniteScroll.dataLoaded(),o((function(){a.gridApi.selection.getSelectAllState()&&a.gridApi.selection.selectAllRows()}))}))}}function f(){return{catalogId:g.catalogId,categoryId:g.categoryId,keyword:b.keyword?b.keyword:void 0,searchInVariations:!!b.searchInVariations&&b.searchInVariations,responseGroup:"withCategories, withProducts",sort:d.getSortExpression(a),skip:(a.pageSettings.currentPage-1)*a.pageSettings.itemsPerPageCount,take:a.pageSettings.itemsPerPageCount}}function y(t){e.catalogClipboardContent=t}function C(){return a.gridApi&&_.any(a.gridApi.selection.getSelectedRows())}function v(e){var t=[],o=[],a=[];angular.forEach(e,(function(e){var r=!1;"category"===e.type?g.catalog&&g.catalog.isVirtual&&_.some(e.links,(function(e){return e.categoryId===g.categoryId}))?r=!0:o.push(e.id):g.catalog&&g.catalog.isVirtual?r=!0:a.push(e.id),r&&t.push({listEntryId:e.id,listEntryType:e.type,catalogId:g.catalogId,categoryId:g.categoryId})}));var r=_.where(t,{listEntryType:"category"}).length;let i=o.concat(a);var n={id:"confirmDeleteItem",categoryCount:o.length,itemCount:a.length,listCategoryLinkCount:r,listItemLinkCount:t.length-r,callback:function(e){e&&(m.closeChildrenBlades(g),g.isLoading=!0,t.length>0&&l.deletelinks(t,()=>{g.refresh(),"mappingSource"===g.mode&&g.parentBlade.refresh()}),i.length>0&&l.delete({objectIds:i},()=>g.refresh()))}};c.showDialog(n,"Modules/$(VirtoCommerce.Catalog)/Scripts/dialogs/deleteCategoryItem-dialog.tpl.html","platformWebApp.confirmDialogController")}if(g.catalogId&&(g.catalog=u.get({id:g.catalogId})),g.refresh=function(){g.isLoading=!0,1!==a.pageSettings.currentPage&&(a.pageSettings.currentPage=1);var e=f();l.listitemssearch(e,(function(e){M(e.listEntries),g.isLoading=!1,a.pageSettings.totalItems=e.totalCount,a.items=e.listEntries,a.hasMore=e.listEntries.length===a.pageSettings.itemsPerPageCount,function(){if(g.breadcrumbs=g.breadcrumbs.slice(0),!g.catalogId)return;var e={blade:g};angular.isDefined(g.category)?(e.id=g.categoryId,e.name=g.category.name):(e.id=g.catalogId,g.catalog.$promise.then(t=>{e.name=t.name}));_.some(g.breadcrumbs,(function(t){return t.id===e.id}))||g.breadcrumbs.push(e);e.navigate=function(){m.closeBlade(g,(function(){g.disableOpenAnimation=!0,m.showBlade(g,g.parentBlade)}))}}()})),a.gridApi&&(a.items=[],a.gridApi.selection.clearSelectedRows(),a.gridApi.infiniteScroll.resetScroll(!0,!0),a.gridApi.infiniteScroll.dataLoaded())},a.edit=function(e){"category"===e.type?(g.setSelectedItem(e),g.showCategoryBlade(e)):a.selectItem(null,e)},g.showCategoryBlade=function(e){var t={id:"listCategoryDetail",currentEntityId:e.id,catalog:g.catalog,title:e.name,subtitle:"catalog.blades.category-detail.subtitle",controller:"virtoCommerce.catalogModule.categoryDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/category-detail.tpl.html"};m.showBlade(t,g)},a.cut=function(e){y([e])},a.delete=function(e){v([e])},g.setSelectedItem=function(e){a.selectedNodeId=e.id},a.selectItem=function(e,t){var o;if(g.setSelectedItem(t),"category"===t.type){var r=e.ctrlKey||b.keyword;o={id:"itemsList"+(g.level+(r?1:0)),level:g.level+(r?1:0),mode:g.mode,isBrowsingLinkedCategory:g.isBrowsingLinkedCategory||a.hasLinks(t),breadcrumbs:g.breadcrumbs,title:"catalog.blades.categories-items-list.title",subtitle:"catalog.blades.categories-items-list.subtitle",subtitleValues:null!==t.name?{name:t.name}:"",catalogId:g.catalogId||t.catalogId,categoryId:t.id,category:t,catalog:g.catalog,disableOpenAnimation:!0,controller:"virtoCommerce.catalogModule.categoriesItemsListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/categories-items-list.tpl.html"},r?m.showBlade(o,g):m.closeBlade(g,(function(){m.showBlade(o,g.parentBlade)}))}else o={id:"listItemDetail"+g.mode,itemId:t.id,productType:t.productType,title:t.name,catalog:g.catalog,controller:"virtoCommerce.catalogModule.itemDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/item-detail.tpl.html"},m.showBlade(o,g),m.catalogsSelectedCategoryId=g.categoryId},a.hasLinks=function(e){return g.catalog&&g.catalog.isVirtual&&_.any(e.links,(function(e){return e.catalogId===g.catalogId&&(!g.categoryId||e.categoryId===g.categoryId)}))},g.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:g.refresh,canExecuteMethod:function(){return!0}},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){v(a.gridApi.selection.getSelectedRows())},canExecuteMethod:C,permission:"catalog:delete"},{name:"platform.commands.import",icon:"fa fa-download",executeMethod:function(){var e={id:"catalogImport",title:"catalog.blades.importers-list.title",subtitle:"catalog.blades.importers-list.subtitle",catalog:g.catalog,controller:"virtoCommerce.catalogModule.importerListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/import/importers-list.tpl.html"};m.showBlade(e,g)},canExecuteMethod:function(){return g.catalogId},permission:"catalog:import"},{name:"platform.commands.export",icon:"fa fa-upload",executeMethod:function(){var e={id:"catalogExport",title:"catalog.blades.exporter-list.title",subtitle:"catalog.blades.exporter-list.subtitle",catalog:g.catalog,controller:"virtoCommerce.catalogModule.exporterListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/export/exporter-list.tpl.html",selectedProducts:_.filter(a.gridApi.selection.getSelectedRows(),(function(e){return"product"===e.type})),selectedCategories:_.filter(a.gridApi.selection.getSelectedRows(),(function(e){return"category"===e.type})),isAllSelected:a.gridApi.selection.getSelectAllState()};m.showBlade(e,g)},canExecuteMethod:function(){return a.items.length&&g.catalogId},permission:"catalog:export"},{name:"platform.commands.cut",icon:"fas fa-cut",executeMethod:function(){y(a.gridApi.selection.getSelectedRows())},canExecuteMethod:C,permission:"catalog:create"},{name:"platform.commands.paste",icon:"fas fa-paste",executeMethod:function(){g.isLoading=!0,l.move({catalog:g.catalogId,category:g.categoryId,listEntries:e.catalogClipboardContent},(function(){delete e.catalogClipboardContent,g.refresh()}),(function(e){m.setError("Error "+e.status,g)}))},canExecuteMethod:function(){return e.catalogClipboardContent&&g.catalog&&!g.catalog.isVirtual},permission:"catalog:create"}],g.isBrowsingLinkedCategory&&g.toolbarCommands.splice(1,5),angular.isDefined(g.mode)){if("mappingSource"===g.mode){var h={name:"catalog.commands.map",icon:"fas fa-link",executeMethod:function(){!function(){if(m.closeChildrenBlades(g),g.isLoading=!0,a.gridApi&&a.gridApi.selection.getSelectAllState())l.bulkcreatelinks({SearchCriteria:f(),CatalogId:g.parentBlade.catalogId,CategoryId:g.parentBlade.categoryId},(function(){g.refresh(),g.parentBlade.refresh()}),(function(e){m.setError("Error "+e.status,g)}));else{var e=a.gridApi.selection.getSelectedRows(),t=[];angular.forEach(e,(function(e){t.push({listEntryId:e.id,listEntryType:e.type,catalogId:g.parentBlade.catalogId,categoryId:g.parentBlade.categoryId})})),l.createlinks(t,(function(){g.refresh(),g.parentBlade.refresh()}),(function(e){m.setError("Error "+e.status,g)}))}}()},canExecuteMethod:C};g.toolbarCommands.splice(1,5,h)}}else!g.isBrowsingLinkedCategory&&s.checkPermission("catalog:create")&&g.toolbarCommands.splice(1,0,{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){var e={id:"listItemChild",catalog:g.catalog,title:"catalog.blades.categories-items-add.title",subtitle:"catalog.blades.categories-items-add.subtitle",controller:"virtoCommerce.catalogModule.categoriesItemsAddController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/categories-items-add.tpl.html"};m.showBlade(e,g)},canExecuteMethod:function(){return g.catalogId}});g.onAfterCatalogSelected=function(e){var t={id:"itemsList"+(g.level+1),level:g.level+1,mode:"mappingSource",breadcrumbs:[],title:"catalog.blades.categories-items-list.title-mapping",subtitle:"catalog.blades.categories-items-list.subtitle-mapping",catalogId:e.id,catalog:e,disableOpenAnimation:!0,controller:"virtoCommerce.catalogModule.categoriesItemsListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/categories-items-list.tpl.html"};m.showBlade(t,g)};var b=g.filter={keyword:g.filterKeyword};function M(e){_.each(e,(function(e){e.$path=_.any(e.path)?e.path.join(" \\ "):"\\"}))}b.criteriaChanged=function(){g.catalogId||b.keyword?a.pageSettings.currentPage>1?a.pageSettings.currentPage=1:g.refresh():a.bladeClose()},a.setGridOptions=function(e){n.initializePagination(a,!0),a.pageSettings.itemsPerPageCount=50,d.initialize(a,e,(function(e){a.gridApi=e,d.bindRefreshOnSortChanged(a),a.gridApi.infiniteScroll.on.needLoadMoreData(a,p)}))}}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.categoryDetailController",["$scope","platformWebApp.bladeNavigationService","platformWebApp.settings","virtoCommerce.catalogModule.categories","virtoCommerce.catalogModule.catalogs","platformWebApp.metaFormsService",function(e,t,o,a,r,i){var l=e.blade;function n(){return!angular.equals(l.currentEntity,l.origEntity)&&l.hasUpdatePermission()}function c(){return n()&&l.formScope&&l.formScope.$valid}function s(){l.isLoading=!0,a.update({},l.currentEntity,(function(e,t){l.refresh(!0)}),(function(e){t.setError("Error "+e.status,l)}))}l.updatePermission="catalog:update",l.metaFields=i.getMetaFields("categoryDetail"),l.refresh=function(e){return a.get({id:l.currentEntityId},(function(t){l.catalog||(l.catalog=r.get({id:t.catalogId})),function(e){l.currentEntity=angular.copy(e),l.origEntity=e,l.title=e.name,l.isLoading=!1,l.securityScopes=e.securityScopes}(t),l.childrenBlades&&_.each(l.childrenBlades,(function(e){e.refresh&&e.refresh(l.currentEntity)})),e&&l.parentBlade.refresh()}),(function(e){t.setError("Error "+e.status,l)}))},l.codeValidator=function(e){return!/[$+;=%{}[\]|@~!^*&()?'<>,]/.test(e)},l.onClose=function(e){t.showConfirmationIfNeeded(n(),c(),l,s,e,"catalog.dialogs.category-save.title","catalog.dialogs.category-save.message")},l.formScope=null,e.setForm=function(e){l.formScope=e},l.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:s,canExecuteMethod:c,permission:l.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(l.origEntity,l.currentEntity)},canExecuteMethod:n,permission:l.updatePermission}],l.openDictionarySettingManagement=function(){var e={id:"settingDetailChild",isApiSave:!0,currentEntityId:"VirtoCommerce.Core.General.TaxTypes",parentRefresh:function(e){l.taxTypes=e},controller:"platformWebApp.settingDictionaryController",template:"$(Platform)/Scripts/app/settings/blades/setting-dictionary.tpl.html"};t.showBlade(e,l)},l.refresh(),l.taxTypes=o.getValues({id:"VirtoCommerce.Core.General.TaxTypes"})}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.categoryDescriptionDetailController",["$scope","platformWebApp.bladeNavigationService","FileUploader","platformWebApp.settings","$timeout",function(e,t,o,a,r){var i,l=e.blade;function n(){_.find(l.category.descriptions,(function(e){return e===l.origEntity}))||l.category.descriptions.push(l.origEntity),angular.copy(l.currentEntity,l.origEntity)}function c(){return!angular.equals(l.currentEntity,l.origEntity)}function s(){return c()&&i&&i.$valid}e.isValid=!0,e.saveChanges=function(){_.find(l.category.descriptions,(function(e){return e==l.origEntity}))||l.category.descriptions.push(l.origEntity),angular.copy(l.currentEntity,l.origEntity),e.bladeClose()},l.headIcon="fa fa-comments",l.title="catalog.blades.categoryDescription-detail.title",l.subtitle="catalog.blades.categoryDescription-detail.subtitle",l.editAsMarkdown=!0,l.hasAssetCreatePermission=t.checkPermission("platform:asset:create"),l.hasAssetCreatePermission&&(e.fileUploader=new o({url:"api/assets?folderUrl=catalog/"+l.category.code,headers:{Accept:"application/json"},autoUpload:!0,removeAfterUpload:!0,onBeforeUploadItem:function(e){l.isLoading=!0},onSuccessItem:function(t,o){e.$broadcast("filesUploaded",{items:o})},onErrorItem:function(e,o,a){t.setError(e._file.name+" failed: "+(o.message?o.message:a),l)},onCompleteAll:function(){l.isLoading=!1}})),a.getValues({id:"Catalog.CategoryDescriptionTypes"},(function(t){e.types=t,l.currentEntity.descriptionType||(l.currentEntity.descriptionType=e.types[0])})),e.openDictionarySettingManagement=function(){var o={id:"settingDetailChild",isApiSave:!0,currentEntityId:"Catalog.CategoryDescriptionTypes",parentRefresh:function(t){e.types=t},controller:"platformWebApp.settingDictionaryController",template:"$(Platform)/Scripts/app/settings/blades/setting-dictionary.tpl.html"};t.showBlade(o,l)},e.setForm=function(e){i=e},l.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:n,canExecuteMethod:s},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(l.origEntity,l.currentEntity),e.$broadcast("resetContent",{body:l.currentEntity.content})},canExecuteMethod:c}],l.onClose=function(e){t.showConfirmationIfNeeded(c(),s(),l,n,e,"catalog.dialogs.review-save.title","catalog.dialogs.review-save.message")},l.category.descriptions||(l.category.descriptions=[]),l.currentEntity||(l.currentEntity={languageCode:l.catalog.defaultLanguage.languageCode}),l.origEntity=l.currentEntity,l.currentEntity=angular.copy(l.currentEntity),r((function(){e.$broadcast("resetContent",{body:l.currentEntity.content}),l.isLoading=!1}))}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.categoryDescriptionsListController",["$timeout","$scope","platformWebApp.bladeNavigationService","platformWebApp.uiGridHelper","platformWebApp.dialogService",function(e,t,o,a,r){var i=t.blade;function l(e){i.headIcon="fa fa-comments",i.category=e,i.title=i.category.name,i.subtitle="catalog.blades.categoryDescriptions-list.subtitle",i.selectNode=t.openBlade}function n(e){var t={id:"confirmDelete",title:"catalog.dialogs.review-delete.title",message:"catalog.dialogs.review-delete.message",callback:function(t){t&&o.closeChildrenBlades(i,(function(){_.each(e,(function(e){i.category.descriptions.splice(i.category.descriptions.indexOf(e),1)}))}))}};r.showConfirmationDialog(t)}t.selectedNodeId=null,i.isLoading=!1,i.refresh=function(e){l(e)},t.openBlade=function(e){e&&(t.selectedNodeId=e.id);var a={id:"categoryDescription",currentEntity:e,category:i.category,catalog:i.catalog,languages:i.catalog.languages,controller:"virtoCommerce.catalogModule.categoryDescriptionDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/categoryDescription-detail.tpl.html"};o.showBlade(a,t.blade)},t.delete=function(e){n([e])},i.toolbarCommands=[{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){t.openBlade()},canExecuteMethod:function(){return!0}},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){n(t.gridApi.selection.getSelectedRows())},canExecuteMethod:function(){return t.gridApi&&_.any(t.gridApi.selection.getSelectedRows())}}],t.setGridOptions=function(e){a.initialize(t,e)},_.some(i.category.descriptions)||e(t.openBlade,60,!1),l(i.category)}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.editorialReviewDetailController",["$scope","platformWebApp.bladeNavigationService","FileUploader","platformWebApp.settings","$timeout",function(e,t,o,a,r){var i,l=e.blade;function n(){_.find(l.item.reviews,(function(e){return e===l.origEntity}))||l.item.reviews.push(l.origEntity),angular.copy(l.currentEntity,l.origEntity)}function c(){return!angular.equals(l.currentEntity,l.origEntity)}function s(){return c()&&i&&i.$valid}e.isValid=!0,e.saveChanges=function(){_.find(l.item.reviews,(function(e){return e==l.origEntity}))||l.item.reviews.push(l.origEntity),angular.copy(l.currentEntity,l.origEntity),e.bladeClose()},l.headIcon="fa fa-comments",l.title="catalog.blades.editorialReview-detail.title",l.subtitle="catalog.blades.editorialReview-detail.subtitle",l.editAsMarkdown=!0,l.hasAssetCreatePermission=t.checkPermission("platform:asset:create"),l.hasAssetCreatePermission&&(e.fileUploader=new o({url:"api/assets?folderUrl=catalog/"+l.item.code,headers:{Accept:"application/json"},autoUpload:!0,removeAfterUpload:!0,onBeforeUploadItem:function(e){l.isLoading=!0},onSuccessItem:function(t,o){e.$broadcast("filesUploaded",{items:o})},onErrorItem:function(e,o,a){t.setError(e._file.name+" failed: "+(o.message?o.message:a),l)},onCompleteAll:function(){l.isLoading=!1}})),a.getValues({id:"Catalog.EditorialReviewTypes"},(function(t){e.types=t,l.currentEntity.reviewType||(l.currentEntity.reviewType=e.types[0])})),e.openDictionarySettingManagement=function(){var o={id:"settingDetailChild",isApiSave:!0,currentEntityId:"Catalog.EditorialReviewTypes",parentRefresh:function(t){e.types=t},controller:"platformWebApp.settingDictionaryController",template:"$(Platform)/Scripts/app/settings/blades/setting-dictionary.tpl.html"};t.showBlade(o,l)},e.setForm=function(e){i=e},l.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:n,canExecuteMethod:s},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(l.origEntity,l.currentEntity),e.$broadcast("resetContent",{body:l.currentEntity.content})},canExecuteMethod:c}],l.onClose=function(e){t.showConfirmationIfNeeded(c(),s(),l,n,e,"catalog.dialogs.review-save.title","catalog.dialogs.review-save.message")},l.item.reviews||(l.item.reviews=[]),l.currentEntity||(l.currentEntity={languageCode:l.catalog.defaultLanguage.languageCode}),l.origEntity=l.currentEntity,l.currentEntity=angular.copy(l.currentEntity),r((function(){e.$broadcast("resetContent",{body:l.currentEntity.content}),l.isLoading=!1}))}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.editorialReviewsListController",["$timeout","$scope","platformWebApp.bladeNavigationService","platformWebApp.uiGridHelper","platformWebApp.dialogService",function(e,t,o,a,r){var i=t.blade;function l(e){i.headIcon="fa fa-comments",i.item=e,i.title=i.item.name,i.subtitle="catalog.blades.editorialReviews-list.subtitle",i.selectNode=t.openBlade}function n(e){var t={id:"confirmDelete",title:"catalog.dialogs.review-delete.title",message:"catalog.dialogs.review-delete.message",callback:function(t){t&&o.closeChildrenBlades(i,(function(){_.each(e,(function(e){i.item.reviews.splice(i.item.reviews.indexOf(e),1)}))}))}};r.showConfirmationDialog(t)}t.selectedNodeId=null,i.isLoading=!1,i.refresh=function(e){l(e)},t.openBlade=function(e){e&&(t.selectedNodeId=e.id);var a={id:"editorialReview",currentEntity:e,item:i.item,catalog:i.catalog,languages:i.catalog.languages,controller:"virtoCommerce.catalogModule.editorialReviewDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/editorialReview-detail.tpl.html"};o.showBlade(a,t.blade)},t.delete=function(e){n([e])},i.toolbarCommands=[{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){t.openBlade()},canExecuteMethod:function(){return!0}},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){n(t.gridApi.selection.getSelectedRows())},canExecuteMethod:function(){return t.gridApi&&_.any(t.gridApi.selection.getSelectedRows())}}],t.setGridOptions=function(e){a.initialize(t,e)},_.some(i.item.reviews)||e(t.openBlade,60,!1),l(i.item)}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.filterDetailController",["$scope","$localStorage","$translate",function(e,t,o){var a,r=e.blade;function i(e){r.currentEntity=angular.copy(e),r.origEntity=e,r.isLoading=!1,r.title=r.isNew?"catalog.blades.filter-detail.new-title":e.name,r.subtitle=r.isNew?"catalog.blades.filter-detail.new-subtitle":"catalog.blades.filter-detail.subtitle"}e.saveChanges=function(){r.currentEntity.lastUpdateTime=(new Date).getTime(),angular.copy(r.currentEntity,r.origEntity),r.isNew&&(t.catalogSearchFilters.splice(0,0,r.origEntity),t.catalogSearchFilterId=r.origEntity.id,r.parentBlade.filter.current=r.origEntity,r.isNew=!1),i(r.origEntity),r.parentBlade.filter.change(!0)},e.setForm=function(e){a=e},r.headIcon="fa fa-filter",r.toolbarCommands=[{name:"core.commands.apply-filter",icon:"fa fa-filter",executeMethod:function(){e.saveChanges()},canExecuteMethod:function(){return a&&a.$valid}},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(r.origEntity,r.currentEntity)},canExecuteMethod:function(){return!angular.equals(r.currentEntity,r.origEntity)}},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){r.parentBlade.filter.current=null,t.catalogSearchFilters.splice(t.catalogSearchFilters.indexOf(r.origEntity),1),delete t.catalogSearchFilterId,r.parentBlade.filter.change()},canExecuteMethod:function(){return!r.isNew}}],r.isNew?o("catalog.blades.categories-items-list.labels.unnamed-filter").then((function(e){i({id:(new Date).getTime(),name:e})})):i(r.data)}])},function(e,t){angular.module("virtoCommerce.catalogBulkActionsModule").controller("virtoCommerce.catalogBulkActionsModule.helloWorldController",["$scope","virtoCommerce.catalogBulkActionsModule.webApi",function(e,t){var o=e.blade;o.title="VirtoCommerce.CatalogBulkActionsModule",o.refresh=function(){t.get((function(e){o.title="virtoCommerce.catalogBulkActionsModule.blades.hello-world.title",o.data=e.result,o.isLoading=!1}))},o.refresh()}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.imageDetailsController",["$scope","$filter","$translate","platformWebApp.bladeNavigationService","platformWebApp.assets.api","platformWebApp.settings",function(e,t,o,a,r,i){var l=e.blade;l.currentEntity=angular.copy(l.origEntity),l.title=l.currentEntity.name,l.isLoading=!1,e.isValid=!0;var n,c=i.getValues({id:"VirtoCommerce.Core.General.Languages"}).$promise;e.languages=[],e.setForm=function(e){n=e},e.$watch("blade.currentEntity",(function(t,o){t!==o&&(e.isValid=n&&n.$valid)}),!0),e.openDictionarySettingManagement=function(){var t={id:"settingDetailChild",isApiSave:!0,currentEntityId:"Catalog.ImageCategories",parentRefresh:function(t){e.imageTypes=t},controller:"platformWebApp.settingDictionaryController",template:"$(Platform)/Scripts/app/settings/blades/setting-dictionary.tpl.html"};a.showBlade(t,l)},e.saveChanges=function(){angular.copy(l.currentEntity,l.origEntity),e.bladeClose()},c.then((function(t){e.languages=t})),e.imageTypes=i.getValues({id:"Catalog.ImageCategories"})}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.imagesAddController",["$scope","$filter","$translate","FileUploader","platformWebApp.dialogService","platformWebApp.bladeNavigationService","platformWebApp.authService","platformWebApp.assets.api","platformWebApp.settings",function(e,t,o,a,r,i,l,n,c){var s=e.blade;s.hasAssetCreatePermission=i.checkPermission("platform:asset:create"),s.headIcon="fa fa-image",e.isValid=!0,s.isLoading=!1,s.useExternalUrl=!1,s.refresh=function(e){u(e)};var d=c.getValues({id:"VirtoCommerce.Core.General.Languages"}).$promise;function u(t){if(d.then((function(t){e.languages=t})),s.item=t,s.title="catalog.blades.image-upload.title",e.imageTypes=c.getValues({id:"Catalog.ImageCategories"}),!e.uploader&&s.hasAssetCreatePermission){var o=e.uploader=new a({scope:e,headers:{Accept:"application/json"},autoUpload:!0,removeAfterUpload:!0});o.url=g(s.folderPath,s.imageType).relative,o.onSuccessItem=function(e,t,o,a){angular.forEach(t,(function(e){e.isImage=!0,e.group=s.imageType,s.currentEntities.push(e)}))},o.onAfterAddingAll=function(e){i.setError(null,s)},o.onErrorItem=function(e,t,o,a){i.setError(e._file.name+" failed: "+(t.message?t.message:o),s)}}s.currentEntities=[]}function g(e,t){var o="catalog/"+e+(t?"/"+t:"");return{folderUrl:o,relative:"api/assets?folderUrl="+o}}e.languages=[],e.addImageFromUrlHandler=function(){s.useExternalUrl?e.addImageDirectlyFromUrl():e.addImageFromUrl()},e.addImageFromUrl=function(){s.newExternalImageUrl&&n.uploadFromUrl({folderUrl:g(s.folderPath,s.imageType).folderUrl,url:s.newExternalImageUrl},(function(e){_.each(e,(function(e){e.isImage=!0,e.group=s.imageType,s.currentEntities.push(e)})),s.newExternalImageUrl=void 0}))},e.addImageDirectlyFromUrl=function(){if(s.newExternalImageUrl){var e={isImage:!0,group:s.imageType,url:s.newExternalImageUrl,name:s.newExternalImageUrl.split("/").pop(),relativeUrl:s.newExternalImageUrl};s.currentEntities.push(e),s.newExternalImageUrl=void 0}},e.saveChanges=function(){s.onSelect&&(_.each(s.currentEntities,(function(e){e.languageCode=s.selectedLanguageCode})),s.onSelect(s.currentEntities)),e.bladeClose()},e.toggleImageSelect=function(e,t){1==e.ctrlKey?t.$selected=!t.$selected:t.$selected?t.$selected=!1:t.$selected=!0},e.copyUrl=function(e){o("catalog.blades.images.labels.copy-url-prompt").then((function(t){window.prompt(t,e.url)}))},e.openDictionarySettingManagement=function(){var t={id:"settingDetailChild",isApiSave:!0,currentEntityId:"Catalog.ImageCategories",parentRefresh:function(t){e.imageTypes=t},controller:"platformWebApp.settingDictionaryController",template:"$(Platform)/Scripts/app/settings/blades/setting-dictionary.tpl.html"};i.showBlade(t,s)},e.changeImageCategory=function(t,o){e.uploader.url=g(s.folderPath,s.imageType).relative},u(s.item)}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.imagesController",["$scope","$translate","platformWebApp.dialogService","platformWebApp.bladeNavigationService","platformWebApp.authService","platformWebApp.settings","platformWebApp.bladeUtils","platformWebApp.uiGridHelper","$timeout",function(e,t,o,a,r,i,l,n,c){var s=e.blade;s.headIcon="fa fa-image";var d=s.parentBlade.catalog.languages;function u(t){s.item=t,s.title=t.name,s.subtitle="catalog.widgets.itemImage.blade-subtitle",e.imageTypes=i.getValues({id:"Catalog.ImageCategories"}),s.currentEntities=t.images?angular.copy(t.images):[]}function g(e){var t=0;if(s.currentEntities.length){var o=_.max(s.currentEntities,(function(e){return e.sortOrder}));t=o.sortOrder}_.each(e,(function(e){if(e.isImage){t++;var o=angular.copy(e);o.sortOrder=t,o.group||(o.group="images"),s.currentEntities.push(o)}}),t)}function m(e,t){var o=-1;return t&&_.each(t.grid.renderContainers.body.visibleRowCache,(function(t,a){_.isEqual(t.entity,e)&&(o=a)})),o}s.hasAssetCreatePermission=a.checkPermission("platform:asset:create"),s.isLoading=!1,s.refresh=function(e){u(e)},e.saveChanges=function(){s.item.images=s.currentEntities,e.bladeClose()},e.toggleImageSelect=function(e,t){1===e.ctrlKey?t.$selected=!t.$selected:t.$selected?t.$selected=!1:t.$selected=!0},e.removeItem=function(e){var t=s.currentEntities.indexOf(e);t>=0&&s.currentEntities.splice(t,1)},e.copyUrl=function(e){t("catalog.blades.images.labels.copy-url-prompt").then((function(t){window.prompt(t,e.url)}))},e.downloadUrl=function(e){window.open(e.url,"_blank")},e.removeAction=function(t){void 0===t&&(t=e.gridApi.selection.getSelectedRows()),angular.forEach(t,(function(e){var t=s.currentEntities.indexOf(e);t>=0&&s.currentEntities.splice(t,1)}))},e.edit=function(e){var t={id:"imageDetailChild",origEntity:e,controller:"virtoCommerce.catalogModule.imageDetailsController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/image-detail.tpl.html"};a.showBlade(t,s)},s.toolbarCommands=[{name:"platform.commands.remove",icon:"fas fa-trash-alt",executeMethod:function(){e.removeAction()},canExecuteMethod:function(){var t=!1;return s.currentEntities&&e.gridApi&&(t=e.gridApi.selection.getSelectedRows().length>0),t}},{name:"catalog.commands.gallery",icon:"fas fa-image",executeMethod:function(){var e={images:s.currentEntities,currentImage:s.currentEntities[0]};o.showGalleryDialog(e)},canExecuteMethod:function(){return s.currentEntities&&_.any(s.currentEntities)}},{name:"Add",icon:"fas fa-plus",executeMethod:function(){var e={languages:d,item:s.item,folderPath:s.folderPath,onSelect:g,controller:"virtoCommerce.catalogModule.imagesAddController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/images-add.tpl.html"};a.showBlade(e,s)},canExecuteMethod:function(){return!0}},{name:"Link",icon:"fas fa-link",executeMethod:function(){var e={title:"catalog.blades.images-select.title",onSelect:g,controller:"virtoCommerce.assetsModule.assetSelectController"};a.showBlade(e,s)},canExecuteMethod:function(){return r.checkPermission("platform:asset:read")}}],e.openDictionarySettingManagement=function(){var t={id:"settingDetailChild",isApiSave:!0,currentEntityId:"Catalog.ImageCategories",parentRefresh:function(t){e.imageTypes=t},controller:"platformWebApp.settingDictionaryController",template:"$(Platform)/Scripts/app/settings/blades/setting-dictionary.tpl.html"};a.showBlade(t,s)};var p=function(e){m(e.rowEntity,e.gridApi)!==e.index&&e.gridApi.cellNav.scrollToFocus(e.rowEntity,e.colDef)};s.selectedImages=[],e.setGridOptions=function(t){t.enableCellEditOnFocus=!1,n.initialize(e,t,(function(t){t.edit.on.afterCellEdit(e,(function(e,o){var a=m(e,t);c(p,100,!0,{rowEntity:e,colDef:o,index:a,gridApi:t})}))}))},e.priorityValid=function(e){return!_.isUndefined(e.sortOrder)&&e.sortOrder>=0},e.isValid=!0,e.$watch("blade.currentEntities",(function(t){var o=_.all(s.currentEntities,e.priorityValid);return e.isValid=o}),!0),l.initializePagination(e,!0),u(s.item)}]).run(["platformWebApp.ui-grid.extension","uiGridValidateService",function(e,t){t.setValidator("minPriorityValidator",(function(){return function(e,t,o,a){return t>=0}}),(function(){return"Priority value should be equal or more than zero"}))}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.itemAssetAddController",["$scope","$translate","platformWebApp.bladeNavigationService","$filter","FileUploader",function(e,t,o,a,r){var i=e.blade;function l(t){if(i.item=t,!e.uploader&&i.hasUpdatePermission()){var a=e.uploader=new r({scope:e,headers:{Accept:"application/json"},method:"POST",autoUpload:!0,removeAfterUpload:!0});a.url="api/assets?folderUrl=catalog/"+t.code,a.onSuccessItem=function(e,t,o,a){angular.forEach(t,(function(t){t.itemId=i.item.id,e.file&&(t.size=e.file.size),i.currentEntities.push(t)}))},a.onAfterAddingAll=function(e){o.setError(null,i)},a.onErrorItem=function(e,t,a,r){o.setError(e._file.name+" failed: "+(t.message?t.message:a),i)}}i.currentEntities=[]}i.isLoading=!1,i.refresh=function(e){l(e)},e.isValid=!0,e.saveChanges=function(){i.onSelect&&i.onSelect(i.currentEntities),e.bladeClose()},e.toggleAssetSelect=function(e,t){1==e.ctrlKey?t.selected=!t.selected:t.selected?t.selected=!1:t.selected=!0},e.removeAction=function(e){var t=i.currentEntities.indexOf(e);t>=0&&i.currentEntities.splice(t,1)},e.copyUrl=function(e){t("catalog.blades.item-asset-detail.labels.copy-url-prompt").then((function(t){window.prompt(t,e.url)}))},i.headIcon="fa fa-plus",i.toolbarCommands=[],l(i.item)}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.itemAssetsDetailController",["$scope","$filter","$translate","platformWebApp.bladeNavigationService","platformWebApp.assets.api","platformWebApp.settings","virtoCommerce.catalogModule.catalogs",function(e,t,o,a,r,i,l){var n,c=e.blade;c.currentEntity=angular.copy(c.origEntity),c.title=c.currentEntity.name,c.isLoading=!1,e.isValid=!0,e.languages=[],e.setForm=function(e){n=e},e.$watch("blade.currentEntity",(function(t,o){t!==o&&(e.isValid=n&&n.$valid)}),!0),e.openDictionarySettingManagement=function(){var t={id:"settingDetailChild",isApiSave:!0,currentEntityId:"Catalog.ImageCategories",parentRefresh:function(t){e.imageTypes=t},controller:"platformWebApp.settingDictionaryController",template:"$(Platform)/Scripts/app/settings/blades/setting-dictionary.tpl.html"};a.showBlade(t,c)},e.saveChanges=function(){angular.copy(c.currentEntity,c.origEntity),e.bladeClose()},l.get({id:c.currentEntity.catalogId},(function(t){e.languages=_.pluck(t.languages,"languageCode")})),e.imageTypes=i.getValues({id:"Catalog.ImageCategories"})}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.itemAssetController",["$scope","$translate","platformWebApp.bladeNavigationService","$filter","platformWebApp.uiGridHelper","$timeout",function(e,t,o,a,r,i){var l=e.blade;function n(e){_.each(e,(function(e){var t=angular.copy(e);t.mimeType=e.contentType,l.currentEntities.push(t)}))}function c(e){l.item=e,l.title=e.name,l.subtitle="catalog.widgets.itemAsset.blade-subtitle",l.currentEntities=e.assets?angular.copy(e.assets):[]}function s(e,t){var o=-1;return t&&_.each(t.grid.renderContainers.body.visibleRowCache,(t,a)=>{_.isEqual(t.entity,e)&&(o=a)}),o}l.headIcon="fa fa-chain",l.toolbarCommands=[{name:"platform.commands.remove",icon:"fas fa-trash-alt",executeMethod:function(){e.removeAction()},canExecuteMethod:function(){var t=!1;return l.currentEntities&&e.gridApi&&(t=e.gridApi.selection.getSelectedRows().length>0),t}},{name:"Add",icon:"fas fa-plus",executeMethod:function(){var e={title:"catalog.blades.asset-upload.title",item:l.item,onSelect:n,controller:"virtoCommerce.catalogModule.itemAssetAddController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/item-asset-add.tpl.html"};o.showBlade(e,l)},canExecuteMethod:function(){return!0}},{name:"Link",icon:"fas fa-link",executeMethod:function(){var e={title:"catalog.blades.asset-select.title",onSelect:n,controller:"virtoCommerce.assetsModule.assetSelectController"};o.showBlade(e,l)},canExecuteMethod:function(){return!0}}],l.isLoading=!1,l.refresh=function(e){c(e)},e.isValid=!0,e.saveChanges=function(){l.item.assets=l.currentEntities,e.bladeClose()},e.toggleAssetSelect=function(e,t){1===e.ctrlKey?t.selected=!t.selected:t.selected?t.selected=!1:t.selected=!0},e.removeAction=function(e){var t=l.currentEntities.indexOf(e);t>=0&&l.currentEntities.splice(t,1)},e.copyUrl=function(e){t("catalog.blades.item-asset-list.labels.copy-url-prompt").then((function(t){window.prompt(t,e.url)}))};var d=function(e){s(e.rowEntity,e.gridApi)!==e.index&&e.gridApi.cellNav.scrollToFocus(e.rowEntity,e.colDef)};e.edit=function(e){e.catalogId||(e.catalogId=l.item.catalogId);var t={id:"itemDetailChild",origEntity:e,controller:"virtoCommerce.catalogModule.itemAssetsDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/item-asset-detail.tpl.html"};o.showBlade(t,l)},e.setGridOptions=function(t){t.enableCellEditOnFocus=!1,r.initialize(e,t,(function(t){t.edit.on.afterCellEdit(e,(function(e,o){var a=s(e,t);i(d,100,!0,{rowEntity:e,colDef:o,index:a,gridApi:t})}))}))},e.removeItem=function(e){var t=l.currentEntities.indexOf(e);t>=0&&l.currentEntities.splice(t,1)},e.downloadUrl=function(e){window.open(e.url,"_blank")},e.removeAction=function(t){null==t&&(t=e.gridApi.selection.getSelectedRows()),angular.forEach(t,(function(e){var t=l.currentEntities.indexOf(e);t>=0&&l.currentEntities.splice(t,1)}))},c(l.item)}]).run(["platformWebApp.ui-grid.extension","uiGridValidateService",function(e,t){t.setValidator("minPriorityValidator",()=>(e,t)=>t>=0,()=>"Priority value should be equal or more than zero")}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.itemAssociationDetailController",["$scope","platformWebApp.dialogService","platformWebApp.bladeNavigationService","platformWebApp.settings",function(e,t,o,a){var r,i=e.blade;e.isValid=!1,e.$watch("blade.currentEntity",(function(){e.isValid=e.formScope&&e.formScope.$valid}),!0),i.toolbarCommands=[{name:"catalog.commands.open-item",icon:"fa fa-edit",executeMethod:function(){!function(){var e={id:"associationDetail",itemId:i.currentEntity.associatedObjectId,catalog:i.catalog,currentEntityId:i.currentEntity.associatedObjectId};"product"===i.currentEntity.associatedObjectType?(e.controller="virtoCommerce.catalogModule.itemDetailController",e.template="Modules/$(VirtoCommerce.Catalog)/Scripts/blades/item-detail.tpl.html"):"category"===i.currentEntity.associatedObjectType&&(e.controller="virtoCommerce.catalogModule.categoryDetailController",e.template="Modules/$(VirtoCommerce.Catalog)/Scripts/blades/category-detail.tpl.html");o.showBlade(e,i)}()},canExecuteMethod:function(){return!0}}],e.openDictionarySettingManagement=function(){var t={id:"settingDetailChild",isApiSave:!0,currentEntityId:"Catalog.AssociationGroups",parentRefresh:function(t){e.associationGroups=t},controller:"platformWebApp.settingDictionaryController",template:"$(Platform)/Scripts/app/settings/blades/setting-dictionary.tpl.html"};o.showBlade(t,i)},e.setForm=function(t){e.formScope=t},e.saveChanges=function(){angular.copy(i.currentEntity,i.origEntity),_.any(i.currentEntity.tags)&&(i.origEntity.tags=_.map(i.currentEntity.tags,(function(e){return e.value}))),e.bladeClose()},r=i.origEntity,e.associationGroups=a.getValues({id:"Catalog.AssociationGroups"},(function(e){e&&e.length>0&&(i.groupName=e[0])})),i.currentEntity=angular.copy(r),i.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.itemAssociationsListController",["$scope","platformWebApp.bladeNavigationService","uiGridConstants","platformWebApp.uiGridHelper","virtoCommerce.catalogModule.catalogs","virtoCommerce.catalogModule.items","virtoCommerce.catalogModule.categories",function(e,t,o,a,r,i,l){e.uiGridConstants=o;var n=[],c=e.blade;function s(e){c.title=e.name,c.item=e,d(e.associations)}function d(e){_.some(e)&&(c.isLoading=!0,n=[],function(e){var t=_.filter(e,(function(e){return"product"===e.associatedObjectType})),o=_.pluck(t,"associatedObjectId");return i.plenty({respGroup:"ItemSmall"},o,(function(e){g(t,e)})).$promise}(e).then(function(e){var t=_.filter(e,(function(e){return"product"!==e.associatedObjectType})),o=_.pluck(t,"associatedObjectId");return l.plenty({respGroup:"Info"},o,(function(e){g(t,e)})).$promise}(e)).then(u))}function u(){var e=_.uniq(n);return r.search({skip:0,take:e.length,catalogIds:e},(function(e){_.each(c.item.associations,(function(t){t.$$catalog=_.find(e.results,(function(e){return e.id===t.$$catalogId}))})),c.isLoading=!1})).$promise}function g(e,t){_.each(e,(function(e){var o=_.find(t,(function(t){return t.id===e.associatedObjectId}));o&&(e.$$catalogId=o.catalogId,"product"===e.associatedObjectType&&(e.$$productType=o.productType))})),n.push.apply(n,_.pluck(e,"$$catalogId"))}c.subtitle="catalog.widgets.itemAssociations.blade-subtitle",c.isLoading=!1,c.refresh=function(e){s(e)},e.selectNode=function(o){e.selectedNodeId=o.associatedObjectId;var a={id:"associationDetail",itemId:o.associatedObjectId,catalog:c.catalog,controller:"virtoCommerce.catalogModule.itemDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/item-detail.tpl.html"};"category"===o.associatedObjectType&&(a.currentEntityId=o.associatedObjectId,a.controller="virtoCommerce.catalogModule.categoryDetailController",a.template="Modules/$(VirtoCommerce.Catalog)/Scripts/blades/category-detail.tpl.html"),"product"===o.associatedObjectType&&(a.productType=o.$$productType),t.showBlade(a,c)},e.deleteList=function(e){t.closeChildrenBlades(c,(function(){var t=_.difference(c.item.associations,e);c.item.associations=t}))},e.edit=function(e){var o={id:"associationEditDetail",title:e.associatedObjectName,subtitle:"catalog.blades.item-association-detail.subtitle",origEntity:e,catalog:c.catalog,controller:"virtoCommerce.catalogModule.itemAssociationDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/item-association-detail.tpl.html"};t.showBlade(o,c)},c.toolbarCommands=[{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){var e;e={id:"associationWizard",catalog:c.catalog,item:c.item,onSaveChanges:function(){d(c.item.associations)},controller:"virtoCommerce.catalogModule.associationWizardController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/wizards/newAssociation/association-wizard.tpl.html"},t.showBlade(e,c)},canExecuteMethod:function(){return!0}},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){e.deleteList(e.gridApi.selection.getSelectedRows())},canExecuteMethod:function(){return e.gridApi&&_.any(e.gridApi.selection.getSelectedRows())}}],e.setGridOptions=function(t){a.initialize(e,t,(function(t){e.gridApi=t,t.draggableRows.on.rowFinishDrag(e,(function(){for(var e=0;e<c.item.associations.length;e++)c.item.associations[e].priority=e+1}))}))},s(c.item)}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.itemDetailController",["$rootScope","$scope","$translate","platformWebApp.bladeNavigationService","platformWebApp.settings","virtoCommerce.catalogModule.items","virtoCommerce.customerModule.members","virtoCommerce.catalogModule.catalogs","platformWebApp.metaFormsService","virtoCommerce.catalogModule.categories",function(e,t,o,a,r,i,l,n,c,s){var d=t.blade;function u(e,t){d.itemId=e.id,d.title=e.code,d.securityScopes=e.securityScopes,e.productType||(e.productType="Physical"),d.subtitle="catalog.blades.item-detail.subtitle",d.subtitleValues={productTypeName:o.instant("catalog.product-types."+e.productType)};var a=f(e);e._priority=(a?a.priority:e.priority)||0,d.item=angular.copy(e),d.currentEntity=d.item,d.origItem=e,d.isLoading=!1,t&&d.parentBlade.refresh&&d.parentBlade.refresh(),d.childrenBlades&&_.each(d.childrenBlades,(function(e){e.refresh&&e.refresh(d.item)}))}function g(){return!angular.equals(d.item,d.origItem)&&d.hasUpdatePermission()}function m(){return g()&&d.formScope&&d.formScope.$valid}function p(){d.isLoading=!0;var e=f(d.item);e?e.priority=d.item._priority:d.item.priority=d.item._priority,i.update({},d.item,(function(){d.refresh(!0)}))}function f(e){var t;return a.catalogsSelectedCatalog&&a.catalogsSelectedCatalog.isVirtual&&(t=_.find(e.links,(function(e){return e.catalogId===a.catalogsSelectedCatalog.id&&(!a.catalogsSelectedCategoryId||e.categoryId===a.catalogsSelectedCategoryId)}))),t}function y(){d.vendors=l.search({memberType:"Vendor",sort:"name:asc",take:1e3})}d.updatePermission="catalog:update",d.currentEntityId=d.itemId,d.metaFields=c.getMetaFields("productDetail"),d.metaFields1=c.getMetaFields("productDetail1"),d.metaFields2=c.getMetaFields("productDetail2"),d.refresh=function(e){return d.isLoading=!0,i.get({id:d.itemId,respGroup:2015},(function(t){d.catalog?u(t,e):n.get({id:t.catalogId},(function(o){d.catalog=o,u(t,e)}))}),(function(e){a.setError("Error "+e.status,d)}))},d.codeValidator=function(e){return!/[$+;=%{}[\]|@~!^*&()?'<>,]/.test(e)},d.onClose=function(e){a.showConfirmationIfNeeded(g(),m(),d,p,e,"catalog.dialogs.item-save.title","catalog.dialogs.item-save.message")},d.formScope=null,t.setForm=function(e){d.formScope=e},d.headIcon="Digital"===d.productType?"fa fa-file-zip-o":"fa fa-dropbox",d.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:p,canExecuteMethod:m,permission:d.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(d.origItem,d.item)},canExecuteMethod:g,permission:d.updatePermission},{name:"platform.commands.clone",icon:"fas fa-clone",executeMethod:function(){d.isLoading=!0,i.cloneItem({itemId:d.itemId},(function(e){var t={id:d.id,item:e,catalog:d.catalog,title:"catalog.wizards.new-product.title",subtitle:"catalog.wizards.new-product.subtitle",controller:"virtoCommerce.catalogModule.newProductWizardController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/wizards/newProduct/new-product-wizard.tpl.html"};a.showBlade(t,d.parentBlade)}),(function(e){a.setError("Error "+e.status,d)}))},canExecuteMethod:function(){return!g()},permission:"catalog:create"}],d.datepickers={},d.open=function(e,t){e.preventDefault(),e.stopPropagation(),d.datepickers[t]=!0},d.openVendorsManagement=function(){var e={memberType:"Vendor",parentRefresh:y,id:"vendorList",currentEntity:{id:null},controller:"virtoCommerce.customerModule.memberListController",template:"Modules/$(VirtoCommerce.Customer)/Scripts/blades/member-list.tpl.html"};a.showBlade(e,d)},d.openDictionarySettingManagement=function(e){var t={id:"settingDetailChild",isApiSave:!0,controller:"platformWebApp.settingDictionaryController",template:"$(Platform)/Scripts/app/settings/blades/setting-dictionary.tpl.html"};switch(e){case"TaxTypes":_.extend(t,{currentEntityId:"VirtoCommerce.Core.General.TaxTypes",parentRefresh:function(e){d.taxTypes=e}})}a.showBlade(t,d)},t.$on("refresh-entity-by-id",(function(e,t){d.currentEntityId===t&&d.refresh()})),y(),d.taxTypes=r.getValues({id:"VirtoCommerce.Core.General.TaxTypes"}),d.refresh(!1)}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.itemDimensionController",["$scope","platformWebApp.bladeNavigationService","platformWebApp.settings","virtoCommerce.catalogModule.items","virtoCommerce.customerModule.members","virtoCommerce.coreModule.packageType.packageTypeUtils",function(e,t,o,a,r,i){var l,n,c=e.blade;c.title="catalog.blades.item-dimensions.title",c.subtitle="catalog.blades.item-dimensions.subtitle",c.isLoading=!1,e.isValid=!1,e.setForm=function(e){l=e},e.$watch("blade.currentEntity",(function(){e.isValid=l&&l.$valid}),!0),c.refresh=function(e){e&&initialize(e)},e.saveChanges=function(){angular.extend(c.item,c.currentEntity),c.item.usePackageType&&(delete c.item.measureUnit,delete c.item.height,delete c.item.width,delete c.item.length),e.bladeClose()},e.openDictionarySettingManagement=function(o){var a={id:"settingDetailChild",isApiSave:!0,controller:"platformWebApp.settingDictionaryController",template:"$(Platform)/Scripts/app/settings/blades/setting-dictionary.tpl.html"};switch(o){case"WeightUnits":_.extend(a,{currentEntityId:"VirtoCommerce.Core.General.WeightUnits",parentRefresh:function(t){e.weightUnits=t}});break;case"MeasureUnits":_.extend(a,{currentEntityId:"VirtoCommerce.Core.General.MeasureUnits",parentRefresh:function(t){e.measureUnits=t}})}t.showBlade(a,c)},e.$watch("blade.currentEntity.packageType",(function(e){e||(c.currentEntity.usePackageType=!1)})),e.$watch("blade.currentEntity.usePackageType",(function(t){if(!t&&!c.currentEntity.measureUnit){var o=_.find(e.packageTypes,(function(e){return e.id==c.currentEntity.packageType}));o&&(c.currentEntity.measureUnit=o.measureUnit)}})),n=c.item,e.packageTypeUtils=i,e.packageTypes=i.getPackageTypes(),c.item=n,c.currentEntity={weightUnit:n.weightUnit,packageType:n.packageType,weight:n.weight,measureUnit:n.measureUnit,height:n.height,width:n.width,length:n.length,usePackageType:n.packageType&&!(n.measureUnit&&n.height&&n.width&&n.length)},e.weightUnits=o.getValues({id:"VirtoCommerce.Core.General.WeightUnits"}),e.measureUnits=o.getValues({id:"VirtoCommerce.Core.General.MeasureUnits"})}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.itemPropertyDetailController",["$scope","$q","virtoCommerce.catalogModule.properties","platformWebApp.bladeNavigationService","platformWebApp.dialogService","virtoCommerce.catalogModule.valueTypes","virtoCommerce.catalogModule.propertyValidators",function(e,t,o,a,r,i,l){var n,c=e.blade;c.availableValueTypes=i.get(),e.isValid=!1,c.title="catalog.blades.item-property-detail.title",c.subtitle="catalog.blades.item-property-detail.subtitle",e.$watch("blade.currentEntity",(function(){e.isValid=e.formScope&&e.formScope.$valid}),!0),e.doValidateNameAsync=a=>a&&!l.isNameValid(a)?(e.errorData={errorMessage:"property-naming-error"},t.reject()):o.validateName({name:a,originalName:c.origEntity.name,productId:c.productId}).$promise.then(o=>o.isValid?(e.errorData=null,t.resolve()):(e.errorData=o.errors[0],t.reject())),e.openBlade=e=>{var t=angular.extend({id:"duplicateVariationDetail",title:e.code,catalog:c.catalog,controller:"virtoCommerce.catalogModule.itemDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/item-detail.tpl.html"},e);a.showBlade(t,c)},e.saveChanges=function(){angular.copy(c.currentEntity,c.origEntity),c.isNew&&c.properties&&c.properties.push(c.origEntity),e.bladeClose()},e.setForm=function(t){e.formScope=t},c.isNew||(c.headIcon="fa fa-gear",c.toolbarCommands=[{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){var t,o;t=c.origEntity,o={id:"confirmDelete",title:"platform.dialogs.delete.title",message:"catalog.dialogs.item-property-delete.message",messageValues:{name:t.name},callback:function(t){if(t){var o=c.properties.indexOf(c.origEntity);c.properties.splice(o,1),e.bladeClose()}}},r.showConfirmationDialog(o)},canExecuteMethod:function(){return!0}}]),"Number"===(n=c.origEntity).valueType&&n.dictionaryValues&&_.forEach(n.dictionaryValues,(function(e){e.value=parseFloat(e.value)})),c.currentEntity=angular.copy(n),c.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.itemVariationListController",["$scope","platformWebApp.bladeNavigationService","platformWebApp.dialogService","virtoCommerce.catalogModule.items","filterFilter","uiGridConstants","platformWebApp.uiGridHelper","virtoCommerce.catalogModule.search","platformWebApp.bladeUtils",function(e,t,o,a,r,i,l,n,c){e.uiGridConstants=i;var s=e.blade;s.title=s.item.name,s.subtitle="catalog.widgets.itemVariation.blade-subtitle",s.refresh=function(t){if(t){s.isLoading=!0;var o={mainProductId:s.item.id,responseGroup:"withProducts",objectType:"CatalogProduct",sort:l.getSortExpression(e),skip:(e.pageSettings.currentPage-1)*e.pageSettings.itemsPerPageCount,take:e.pageSettings.itemsPerPageCount,withHidden:!0};n.searchProducts(o,(function(t){s.isLoading=!1,e.pageSettings.totalItems=t.totalCount,s.variations=t.results,e.hasMore=t.results.length===e.pageSettings.itemsPerPageCount}))}else s.parentBlade.refresh()},s.setSelectedItem=function(t){e.selectedNodeId=t.id},e.selectVariation=function(e){s.setSelectedItem(e);var o={id:"variationDetail",itemId:e.id,productType:e.productType,title:e.code,catalog:s.catalog,subtitle:"catalog.blades.item-detail.subtitle-variation",controller:"virtoCommerce.catalogModule.itemDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/item-detail.tpl.html"};t.showBlade(o,s)},e.deleteList=function(e){t.closeChildrenBlades(s,(function(){var r={id:"confirmDeleteItem",title:"catalog.dialogs.variation-delete.title",message:"catalog.dialogs.variation-delete.message",callback:function(o){if(o){var r=_.pluck(e,"id");a.remove({ids:r},s.parentBlade.refresh,(function(e){t.setError("Error "+e.status,s)}))}}};o.showConfirmationDialog(r)}))},s.headIcon="fa fa-dropbox",s.toolbarCommandsAndEvents&&s.toolbarCommandsAndEvents.toolbarCommands?s.toolbarCommands=s.toolbarCommandsAndEvents.toolbarCommands:s.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:function(){s.parentBlade.refresh()},canExecuteMethod:function(){return!0}},{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){a.newVariation({itemId:s.item.id},(function(e){e.properties=_.where(e.properties,{type:"Variation"}),e.productType=s.item.productType,"Digital"!==e.productType&&"BillOfMaterials"!==e.productType||(e.trackInventory=!1);var o={id:"variationDetail",item:e,catalog:s.catalog,title:"catalog.wizards.new-variation.title",subtitle:"catalog.wizards.new-variation.subtitle",controller:"virtoCommerce.catalogModule.newProductWizardController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/wizards/newProduct/new-variation-wizard.tpl.html"};t.showBlade(o,s)}),(function(e){t.setError("Error "+e.status,s)}))},canExecuteMethod:function(){return!0},permission:"catalog:create"},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){e.deleteList(e.gridApi.selection.getSelectedRows())},canExecuteMethod:function(){return e.gridApi&&_.any(e.gridApi.selection.getSelectedRows())},permission:"catalog:delete"}],(e.filter={}).criteriaChanged=function(){e.pageSettings.currentPage>1?e.pageSettings.currentPage=1:s.refresh()},e.setGridOptions=function(t){l.initialize(e,t,(function(t){t.grid.registerRowsProcessor(e.singleFilter,90),l.bindRefreshOnSortChanged(e)})),c.initializePagination(e)},e.singleFilter=function(t){var o=0;return t.forEach((function(e){e.visible=_.any(r([e.entity],s.searchText)),e.visible&&o++})),e.filteredEntitiesCount=o,t}}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.propertyAttributesController",["$scope","$filter","platformWebApp.dialogService",function(e,t,o){var a,r=e.blade.parentBlade;function i(){e.newValue={name:null,value:null}}e.pb=r,e.attributeNameValidator=function(e){return _.all(r.currentEntity.attributes,(function(t){return t.name!==e}))},e.setForm=function(e){a=e},e.add=function(){a.$valid&&(r.currentEntity.attributes.push(e.newValue),i(),a.$setPristine())},e.delete=function(t){r.currentEntity.attributes.splice(t,1),e.selectedItem=void 0},e.selectItem=function(t){e.selectedItem=t},e.blade.headIcon="fa fa-gear",e.blade.toolbarCommands=[{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){var a;a={id:"confirmDeleteItem",title:"catalog.dialogs.attribut-delete.title",message:"catalog.dialogs.attribut-delete.message",callback:function(o){if(o){var a=t("filter")(r.currentEntity.attributes,{selected:!0},!0);angular.forEach(a,(function(t){e.delete(r.currentEntity.attributes.indexOf(t))}))}}},o.showConfirmationDialog(a)},canExecuteMethod:function(){return _.any(r.currentEntity.attributes,(function(e){return e.selected}))}}],e.checkAll=function(e){angular.forEach(r.currentEntity.attributes,(function(t){t.selected=e}))},i(),e.blade.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.propertyDetailController",["$scope","$q","virtoCommerce.catalogModule.properties","platformWebApp.bladeNavigationService","platformWebApp.dialogService","virtoCommerce.catalogModule.valueTypes","virtoCommerce.catalogModule.propertyValidators",function(e,t,o,a,r,i,l){var n,c=e.blade;function s(e){o.values({propertyId:e.id},(function(t){e.dictionaryValues=t,"Number"===e.valueType&&e.dictionaryValues&&_.forEach(e.dictionaryValues,(function(e){e.value=parseFloat(e.value)})),c.propertyType&&(e.type=c.propertyType),c.currentEntity=angular.copy(e),c.origEntity=e,c.isLoading=!1}))}function d(){return!angular.equals(c.currentEntity,c.origEntity)&&c.hasUpdatePermission()}function u(){return(c.origEntity.isNew||d())&&n&&n.$valid&&!(c.currentEntity&&e.duplicatedName===c.currentEntity.name)}function g(){c.isLoading=!0,e.doValidateNameAsync(c.currentEntity.name).then(()=>{a.closeChildrenBlades(c),delete c.currentEntity.validationRule,"ShortText"!==c.currentEntity.valueType&&"LongText"!==c.currentEntity.valueType&&delete c.currentEntity.validationRules,o.update(c.currentEntity,(function(e,t){c.currentEntityId=e.id,c.refresh(!0)}))},()=>{e.duplicatedName=angular.copy(c.currentEntity.name),c.isLoading=!1})}c.updatePermission="catalog:update",c.origEntity={},e.currentChild=void 0,c.title="catalog.blades.property-detail.title",c.subtitle="catalog.blades.property-detail.subtitle",c.availableValueTypes=i.get(),c.hasMultivalue=!0,c.hasDictionary=!0,c.hasMultilanguage=!0,c.availablePropertyTypes=c.catalogId?["Product","Variation","Category","Catalog"]:["Product","Variation","Category"],e.$watch("blade.currentEntity.valueType",(function(e,t){switch(c.hasMultivalue=!0,c.hasDictionary=!0,c.hasMultilanguage=!0,e){case"DateTime":case"Boolean":c.hasMultivalue=c.currentEntity.multivalue=!1,c.hasDictionary=c.currentEntity.dictionary=!1,c.hasMultilanguage=c.currentEntity.multilanguage=!1;break;case"Integer":case"GeoPoint":c.hasDictionary=c.currentEntity.dictionary=!1,c.hasMultilanguage=c.currentEntity.multilanguage=!1;break;case"LongText":c.hasDictionary=c.currentEntity.dictionary=!1}})),e.doValidateNameAsync=a=>a&&!l.isNameValid(a)?(e.errorData={errorMessage:"property-naming-error"},t.reject()):c.origEntity.isNew||a!==c.origEntity.name?o.validateCategoryPropertyName({propertyName:a,propertyType:c.origEntity.type,categoryId:c.origEntity.categoryId,catalogId:c.origEntity.catalogId}).$promise.then(o=>o.isValid?(e.errorData=null,t.resolve()):(e.errorData=o.errors[0],t.reject())):(e.errorData=null,t.resolve()),c.refresh=function(e){c.currentEntityId?o.get({propertyId:c.currentEntityId},(function(t){s(t),e&&c.parentBlade.refresh()}),(function(e){a.setError("Error "+e.status,c)})):c.categoryId?o.newCategoryProperty({categoryId:c.categoryId},(function(e){s(e)}),(function(e){a.setError("Error "+e.status,c)})):c.catalogId&&o.newCatalogProperty({catalogId:c.catalogId},(function(e){s(e)}),(function(e){a.setError("Error "+e.status,c)}))},e.openChild=function(t){var o={id:"propertyChild"};switch(o.property=c.currentEntity,o.languages=c.languages,o.defaultLanguage=c.defaultLanguage,t){case"attr":o.title="catalog.blades.property-attributes.title",o.titleValues={name:c.origEntity.name?c.origEntity.name:c.currentEntity.name},o.subtitle="catalog.blades.property-attributes.subtitle",o.controller="virtoCommerce.catalogModule.propertyAttributesController",o.template="Modules/$(VirtoCommerce.Catalog)/Scripts/blades/property-attributes.tpl.html";break;case"rules":o.title="catalog.blades.property-validationRule.title",o.titleValues={name:c.origEntity.name?c.origEntity.name:c.currentEntity.name},o.subtitle="catalog.blades.property-validationRule.subtitle",o.controller="virtoCommerce.catalogModule.propertyValidationRulesController",o.template="Modules/$(VirtoCommerce.Catalog)/Scripts/blades/property-validationRules.tpl.html";break;case"dict":o.title="catalog.blades.property-dictionary.title",o.titleValues={name:c.origEntity.name?c.origEntity.name:c.currentEntity.name},o.subtitle="catalog.blades.property-dictionary.subtitle",o.controller="virtoCommerce.catalogModule.propertyDictionaryListController",o.template="Modules/$(VirtoCommerce.Catalog)/Scripts/blades/property-dictionary-list.tpl.html"}a.showBlade(o,c),e.currentChild=t},c.onClose=function(e){a.showConfirmationIfNeeded(d(),u(),c,g,e,"catalog.dialogs.property-save.title","catalog.dialogs.property-save.message")},e.setForm=function(e){n=e},c.headIcon="fa fa-gear",c.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:g,canExecuteMethod:u},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(c.origEntity,c.currentEntity)},canExecuteMethod:d},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){var t,a;t=c.origEntity,a={id:"confirmDelete",messageValues:{name:t.name},callback:function(a){c.isLoading=!0,o.remove({id:t.id,doDeleteValues:a},(function(){e.bladeClose(),c.parentBlade.refresh()}))}},r.showDialog(a,"Modules/$(VirtoCommerce.Catalog)/Scripts/dialogs/deleteProperty-dialog.tpl.html","platformWebApp.confirmDialogController")},canExecuteMethod:function(){return c.origEntity.isManageable&&!c.origEntity.isNew}}],c.refresh()}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.propertyDictionaryDetailsController",["$scope","platformWebApp.dialogService","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.propDictItems",function(e,t,o,a){var r=e.blade;function i(){return!angular.equals(r.currentEntity,r.origEntity)&&r.hasUpdatePermission()}r.headIcon="fa fa-book",e.isValid=!0,e.blade.isLoading=!1,e.validationRules=r.property.validationRule,e.setForm=function(e){r.formScope=e},r.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:function(){r.currentEntity.localizedValues=[],r.languages.forEach((function(e){let t={};t.languageCode=r.property.multilanguage?e:void 0,t.value=r.currentEntity[e],r.currentEntity.localizedValues.push(t)})),a.save([r.currentEntity],(function(e){r.onSaveChanges(),angular.copy(r.currentEntity,r.origEntity)}))},canExecuteMethod:function(){return i()&&r.formScope&&r.formScope.$valid}}],r.onClose=function(t){o.showConfirmationIfNeeded(i(),e.isValid,r,e.saveChanges,t,"catalog.dialogs.property-save.title","catalog.dialogs.property-save.message")},r.currentEntity=angular.copy(r.dictionaryItem),r.origEntity=r.dictionaryItem,r.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.propertyDictionaryListController",["$scope","$filter","platformWebApp.dialogService","platformWebApp.settings","platformWebApp.bladeNavigationService","platformWebApp.uiGridHelper","virtoCommerce.catalogModule.propDictItems","platformWebApp.bladeUtils",function(e,t,o,a,r,i,l,n){var c=e.blade;e.blade.isLoading=!1,c.headIcon="fa fa-book",e.currentEntities=[],e.uiGridConstants=i.uiGridConstants;var s=c.filter=e.filter={};s.criteriaChanged=function(){e.pageSettings.currentPage>1?e.pageSettings.currentPage=1:c.refresh()},c.toolbarCommands=[{name:"platform.commands.add",icon:"fas fa-plus",executeMethod:function(){e.selectNode({values:[],isNew:!0,propertyId:c.property.id})},canExecuteMethod:function(){return!0}},{name:"platform.commands.delete",icon:"fas fa-trash-alt",executeMethod:function(){e.deleteList(e.gridApi.selection.getSelectedRows())},canExecuteMethod:function(){return e.gridApi&&_.any(e.gridApi.selection.getSelectedRows())}}],c.refresh=function(){c.languages=c.property.multilanguage?c.languages:[];var t={searchPhrase:s.keyword,propertyIds:[c.property.id],sort:i.getSortExpression(e),skip:(e.pageSettings.currentPage-1)*e.pageSettings.itemsPerPageCount,take:e.pageSettings.itemsPerPageCount};l.search(t,(function(t){e.pageSettings.totalItems=t.totalCount,e.currentEntities=t.results,e.currentEntities.forEach((function(e){c.languages.forEach((function(t){var o=_.find(e.localizedValues,(function(e){return e.languageCode===t||!e.languageCode&&t===c.defaultLanguage}));e[t]=o?o.value:void 0}))}))}))},e.setGridOptions=function(t){i.initialize(e,t,(function(t){t&&t.core&&i.bindRefreshOnSortChanged(e)})),n.initializePagination(e)},e.deleteList=function(e){var t={id:"confirmDeletePropertyValue",title:"catalog.dialogs.dictionary-values-delete.title",message:"catalog.dialogs.dictionary-values-delete.message",callback:function(t){t&&r.closeChildrenBlades(c,(function(){var t=_.pluck(e,"id");l.remove({ids:t},(function(e){c.refresh()}))}))}};o.showDialog(t,"Modules/$(VirtoCommerce.Catalog)/Scripts/dialogs/deletePropertyDictionaryItem-dialog.tpl.html","platformWebApp.confirmDialogController")},e.deleteDictItem=function(t){e.deleteList([t])},e.selectNode=function(t){t.alias&&(e.selectedNodeId=t.alias);var o={id:"propertyDictionaryDetails",title:"catalog.blades.property-dictionary.labels.dictionary-edit",controller:"virtoCommerce.catalogModule.propertyDictionaryDetailsController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/property-dictionary-details.tpl.html",dictionaryItem:t,property:c.property,languages:c.languages,defaultLanguage:c.defaultLanguage,onSaveChanges:function(e){c.refresh()}};r.showBlade(o,c)}}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.propertyListController",["$scope","virtoCommerce.catalogModule.properties","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.propDictItems","$localStorage","platformWebApp.authService",function(e,t,o,a,r,i){var l,n=e.blade;function c(e){n.title=e.name,n.subtitle="catalog.blades.property-list.subtitle",n.currentEntity=e,n.currentEntities=angular.copy(e.properties),n.propertiesForExclude=_.map(n.currentEntities,e=>({name:e.name})),n.filteredProperties=[],n.emptyProperties=[],r.propertyFilter&&s(r.propertyFilter[i.userName])}function s(e){e&&e.length>0&&(n.filteredProperties=e.map((function(e){return e.toLowerCase()})))}function d(e){var t={id:"editItemProperty"+n.currentEntity.id,properties:n.currentEntities,productId:n.currentEntity.id,catalog:n.catalog,controller:"virtoCommerce.catalogModule.itemPropertyDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/item-property-detail.tpl.html"};angular.extend(t,e),o.showBlade(t,n)}e.isValid=!1,n.refresh=function(e){e?c(e):n.parentBlade.refresh()},n.propertiesVisible=!0,n.propertyVisibleCommand={name:"catalog.blades.property-list.labels.hide-empty-values",icon:"fas fa-eye-slash",executeMethod:function(){e.switchPropertiesVisibility()},canExecuteMethod:function(){return!0}},e.isPropertyChanged=function(e){if(e){var t=_.find(n.currentEntity.properties,(function(t){return t.id===e.id}));if(t)return!angular.equals(e,t)}return!1},e.isPropertyVisible=function(e){return!(n.filteredProperties&&n.filteredProperties.length>0)||n.filteredProperties.includes(e.name.toLowerCase())},e.isPropertyHasValues=function(e){return!n.emptyProperties.includes(e)},e.resetFilter=function(){g([]),n.filteredProperties=[]},e.saveChanges=function(){n.currentEntity.properties=n.currentEntities,e.bladeClose()},e.getPropertyDisplayName=function(e){return _.first(_.map(_.filter(e.displayNames,(function(e){return e&&e.languageCode.startsWith(n.defaultLanguage)})),(function(e){return e.name})))},e.editProperty=function(e){if(e.isManageable){var t={id:"editCategoryProperty",currentEntityId:e?e.id:void 0,categoryId:n.categoryId,catalogId:n.catalogId,defaultLanguage:n.defaultLanguage,languages:n.languages,controller:"virtoCommerce.catalogModule.propertyDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/property-detail.tpl.html"};o.showBlade(t,n)}else d({title:"catalog.blades.item-property-detail.title",origEntity:e})},e.getPropValues=function(e,t,o,r){return a.search({propertyIds:[e],searchPhrase:t,skip:o,take:r}).$promise.then((function(e){return e}))},e.setForm=function(e){l=e};const u=()=>{e.isValid=l&&l.$valid};function g(e){var t={};t[i.userName]=e,r.propertyFilter?angular.extend(r.propertyFilter,t):r.propertyFilter=t}e.$watch("blade.currentEntities",u,!0),e.$watch("blade.currentEntity",u,!0),n.headIcon="fa fa-gear",n.addPropertyButtonNameKey=n.currentEntity.hasOwnProperty("productType")?n.currentEntity.mainProductId?"catalog.commands.add-variation-property":"catalog.commands.add-product-property":"catalog.commands.add-property",n.toolbarCommands=[{name:n.addPropertyButtonNameKey,icon:"fas fa-plus",executeMethod:function(){if("product"==n.entityType)d({isNew:!0,title:"catalog.blades.item-property-detail.title-new",origEntity:{type:"Product",valueType:"ShortText",values:[]}});else{var e={id:"propertyTypesList",currentEntityId:void 0,categoryId:n.categoryId,catalogId:n.catalogId,defaultLanguage:n.defaultLanguage,languages:n.languages,controller:"virtoCommerce.catalogModule.propertyTypeListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/property-type-list.tpl.html"};o.showBlade(e,n)}},canExecuteMethod:function(){return!0}},{name:"catalog.blades.property-list.labels.add-filter",icon:"fa fa-filter",executeMethod:function(){e.editPropertyFilter()},canExecuteMethod:function(){return!0}},{name:"catalog.blades.property-list.labels.reset-filter",icon:"fa fa-undo",executeMethod:function(){e.resetFilter()},canExecuteMethod:function(){return n.filteredProperties.length>0}},n.propertyVisibleCommand],e.editPropertyFilter=function(){var e={id:"propertySelector",entityType:"product",properties:n.currentEntities,selectedProperties:n.filteredProperties,controller:"virtoCommerce.catalogModule.propertySelectorController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/property-selector.tpl.html",onSelected:function(e){var t=e.map((function(e){return e.name}));g(t),s(t)}};o.showBlade(e,n)},e.switchPropertiesVisibility=function(){var e;n.propertiesVisible=!n.propertiesVisible,n.propertiesVisible?(n.propertyVisibleCommand.name="catalog.blades.property-list.labels.hide-empty-values",n.propertyVisibleCommand.icon="fas fa-eye-slash",_.each(n.currentEntities,(function(e){e.$$hiddenLanguages&&(e.$$hiddenLanguages=null)})),n.emptyProperties=[]):(n.propertyVisibleCommand.name="catalog.blades.property-list.labels.show-empty-values",n.propertyVisibleCommand.icon="fas fa-eye",e=_.filter(n.currentEntities,(function(e){return"product"===n.entityType.toLowerCase()&&"variation"===e.type.toLowerCase()||e.type.toLowerCase()===n.entityType.toLowerCase()})),_.each(e,(function(e){e.multilanguage&&(e.$$hiddenLanguages=[],_.each(n.languages,(function(t){_.some(e.values,(function(e){return e.value&&""!==e.value&&e.languageCode===t}))||e.$$hiddenLanguages.push(t)})))})),_.each(e,(function(e){var t;!e.required&&"Boolean"!==e.valueType&&(t=e.values,_.all(t,(function(e){return!e.value||""===e.value})))&&n.emptyProperties.push(e)})))},n.isLoading=!1,c(n.currentEntity)}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.propertySelectorController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var o=e.blade;o.existingFilteredProperties=[],o.isLoading=!0;const a=10;e.selectAllInGroup=function(e){o.selectedEntities[e]=o.allEntities[e]},e.clearAllInGroup=function(e){o.selectedEntities[e]=[]},e.sortSelected=function(e){o.selectedEntities[e]=_.sortBy(o.selectedEntities[e],"name")},e.cancelChanges=function(){t.closeBlade(o)},e.isValid=function(){return _.some(o.selectedEntities,(function(e){return e.length}))||e.hasChangedProperties(o.properties)},e.hasChangedProperties=function(e){return _.filter(e,(function(e){return e.isChanged})).length>0},e.saveChanges=function(){var e=_.flatten(_.map(o.selectedEntities,_.values));o.onSelected&&(o.onSelected(e),t.closeBlade(o))},function(){o.title="catalog.blades.property-selector.title",o.headIcon="fa fa-folder";var e=angular.copy(o.properties);e=_.sortBy(e,"group","name"),o.existingFilteredProperties=_.first(o.selectedProperties,a),o.existingFilteredProperties.length>=a&&o.existingFilteredProperties.push("...");var t=_.sortBy(_.filter(e,(function(e){return o.selectedProperties.includes(e.name.toLowerCase())})),"name");o.allEntities=_.groupBy(e,"group"),o.selectedEntities=_.groupBy(t,"group"),o.isLoading=!1}()}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.propertyTypeListController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var o=e.blade;o.title="catalog.blades.property-type-list.title",o.subtitle="catalog.blades.property-type-list.subtitle",o.selectedType=null,o.refresh=function(){o.parentBlade.refresh()},o.createProperty=function(e){o.selectedType=e;var a={id:"editCategoryProperty",currentEntityId:void 0,categoryId:o.categoryId,catalogId:o.catalogId,defaultLanguage:o.defaultLanguage,languages:o.languages,propertyType:e,controller:"virtoCommerce.catalogModule.propertyDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/property-detail.tpl.html"};t.showBlade(a,o)},o.toolbarCommands=[{name:"platform.commands.cancel",icon:"fas fa-ban",executeMethod:function(){t.closeBlade(o)},canExecuteMethod:function(){return!0}}],o.availablePropertyTypes=[{typeName:"Category",icon:"fas fa-folder"},{typeName:"Product",icon:"fas fa-sliders-h"},{typeName:"Variation",icon:"fas fa-box-open"}],o.catalogId&&o.availablePropertyTypes.unshift({typeName:"Catalog",icon:"fas fa-archive"}),o.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.propertyTypeController",["$scope",function(e){e.selectOption=function(t){e.blade.parentBlade.currentEntity.type=t,e.bladeClose()},e.blade.headIcon="fa fa-gear",e.blade.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.propertyValidationRulesController",["$scope",function(e){var t,o=e.blade,a=_.first(o.parentBlade.currentEntity.validationRules)||{};o.propertyValidationRule={id:a.id,required:o.parentBlade.currentEntity.required,isLimited:null!=a.charCountMin||null!=a.charCountMax,isSpecificPattern:null!=a.regExp,charCountMin:a.charCountMin,charCountMax:a.charCountMax,selectedLimit:"between",characterLimit:["between","at-least","not-more-than"],validationPatterns:[{name:"custom",pattern:""},{name:"email",pattern:"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$"},{name:"url",pattern:"https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)"},{name:"date",pattern:"(0[1-9]|[12][0-9]|3[01])[ .-](0[1-9]|1[012])[ .-](19|20|)dd"}],selectedPattern:{name:"custom",pattern:a.regExp},pattern:a.regExp},a.charCountMin&&!a.charCountMax?o.propertyValidationRule.selectedLimit="at-least":!a.charCountMin&&a.charCountMax?o.propertyValidationRule.selectedLimit="not-more-than":a.charCountMin&&a.charCountMax&&(o.propertyValidationRule.selectedLimit="between"),o.isLoading=!1,e.saveChanges=function(){o.parentBlade.currentEntity.required=o.propertyValidationRule.required,o.parentBlade.currentEntity.validationRules=[{id:o.propertyValidationRule.id,charCountMin:o.propertyValidationRule.isLimited&&"not-more-than"!==o.propertyValidationRule.selectedLimit?o.propertyValidationRule.charCountMin:null,charCountMax:o.propertyValidationRule.isLimited&&"at-least"!==o.propertyValidationRule.selectedLimit?o.propertyValidationRule.charCountMax:null,regExp:o.propertyValidationRule.isSpecificPattern?o.propertyValidationRule.selectedPattern.pattern:null}],o.parentBlade.currentEntity.validationRule=o.parentBlade.currentEntity.validationRules[0],e.bladeClose()},e.setForm=function(e){t=e},e.$watch("blade.propertyValidationRule",(function(){e.isValid=t&&t.$valid}),!0)}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.editPropertiesActionStepController",["$scope","virtoCommerce.catalogModule.properties","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.propDictItems","virtoCommerce.customerModule.members","platformWebApp.settings","virtoCommerce.coreModule.packageType.packageTypeUtils",function(e,t,o,a,r,i,l){var n,c=e.blade;e.isValid=!0,c.refresh=function(){c.parentBlade.refresh()},e.saveChanges=function(){c.onSelected&&c.onSelected(c.currentEntities),e.bladeClose()},e.getPropertyDisplayName=function(e){return _.first(_.map(_.filter(e.displayNames,(function(e){return e&&e.languageCode.startsWith(c.defaultLanguage)})),(function(e){return e.name})))},e.getPropValues=function(e,t,o,r){return a.search({propertyIds:[e],searchPhrase:t,skip:o,take:r}).$promise.then((function(e){return e}))},e.setForm=function(e){n=e},e.$watch("blade.currentEntities",(function(){e.isValid=n?n.$valid:e.isValid}),!0),e.$watch("blade.vendor",(function(t){if(e.isValid=n?n.$valid:e.isValid,c.currentEntities){var o=_.find(c.vendors,(function(e){return e.id===t})),a=_.find(c.currentEntities,(function(e){return"Vendor"===e.name}));a&&o&&(a.values=[{valueId:o.id,value:o.name}])}})),e.$watch("blade.taxType",(function(t){e.isValid=n?n.$valid:e.isValid,e.updatePropertyValue("TaxType",t)})),e.$watch("blade.weightUnit",(function(t){e.isValid=n?n.$valid:e.isValid,e.updatePropertyValue("WeightUnit",t)})),e.$watch("blade.packageType",(function(t){e.isValid=n?n.$valid:e.isValid,e.updatePropertyValue("PackageType",t)})),e.$watch("blade.measureUnit",(function(t){e.isValid=n?n.$valid:e.isValid,e.updatePropertyValue("MeasureUnit",t)})),e.updatePropertyValue=function(e,t){if(c.currentEntities){var o=_.find(c.currentEntities,(function(t){return t.name===e&&!t.id}));o&&(o.values=[{value:t}])}},c.headIcon="fa fa-gear",c.toolbarCommands=c.toolbarCommands||[],c.isLoading=!1,c.subtitle="catalog.blades.property-list.subtitle",c.currentEntities=angular.copy(c.properties),_.each(c.currentEntities,(function(t){t.required&&(e.isValid=!1)})),r.search({memberType:"Vendor",sort:"name:asc",take:1e3},(function(e){c.vendors=e.results})),c.taxTypes=i.getValues({id:"VirtoCommerce.Core.General.TaxTypes"}),c.weightUnits=i.getValues({id:"VirtoCommerce.Core.General.WeightUnits"}),c.measureUnits=i.getValues({id:"VirtoCommerce.Core.General.MeasureUnits"}),c.packageTypes=l.getPackageTypes()}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.propertiesSelectorController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var o=e.blade;o.isLoading=!0,e.selectAllInGroup=function(e){o.selectedEntities[e]=o.allEntities[e]},e.clearAllInGroup=function(e){o.selectedEntities[e]=[]},e.sortSelected=function(e){o.selectedEntities[e]=_.sortBy(o.selectedEntities[e],"name")},e.cancelChanges=function(){t.closeBlade(o)},e.isValid=function(){return _.some(o.selectedEntities,(function(e){return e.length}))},e.saveChanges=function(){var e=_.flatten(_.map(o.selectedEntities,_.values));o.onSelected&&(o.onSelected(e),t.closeBlade(o))},function(){o.title="Select properties for edit",o.headIcon="fa fa-folder";var e=angular.copy(o.properties);e=_.sortBy(e,"group","name");var t=angular.copy(o.includedProperties);t=_.sortBy(t,"name"),o.allEntities=_.groupBy(e,"group"),o.selectedEntities=_.groupBy(t,"group"),o.isLoading=!1}()}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.videoAddController",["$scope","$resource","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.videos",function(e,t,o,a){var r,i=e.blade,l=i.parentBlade;i.headIcon="fab fa-youtube",i.title="catalog.blades.video-add.title",i.subtitle="catalog.blades.video-add.subtitle",i.refresh=function(){i.isLoading=!1},e.setForm=function(e){r=e},i.toolbarCommands=[{name:"catalog.blades.video-add.create",icon:"fas fa-check",executeMethod:function(){i.isLoading=!0,a.create({contentUrl:i.currentEntity.contentUrl,languageCode:i.defaultLanguage.languageCode,ownerId:i.owner.id,ownerType:i.ownerType},(function(t){i.isLoading=!1,e.bladeClose((function(){var e={id:"videoDetail",isNew:!0,currentEntity:t,controller:"virtoCommerce.catalogModule.videoDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/video-detail.tpl.html"};o.showBlade(e,l)}))}),(function(e){i.isLoading=!1,!e.statusText&&e.data&&(e.statusText=e.data.message),o.setError(e,i)}))},canExecuteMethod:function(){return r&&r.$valid}}],i.refresh()}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.videoDetailController",["$scope","platformWebApp.bladeNavigationService","platformWebApp.dialogService","platformWebApp.settings","virtoCommerce.catalogModule.videos",function(e,t,o,a,r){var i=e.blade,l=i.parentBlade;i.updatePermission="catalog:update",i.headIcon="fab fa-youtube",i.title="catalog.blades.video-detail.title",i.subtitle="catalog.blades.video-detail.subtitle",e.languages=[];var n,c=a.getValues({id:"VirtoCommerce.Core.General.Languages"}).$promise;function s(){i.isLoading=!0,r.save([i.currentEntity],(function(e){i.isNew=!1,i.currentEntityId=e[0].id,i.currentEntity.Id=i.currentEntityId,i.refresh(!0)})).$promise.catch((function(e){t.setError(e,i)})).finally((function(){i.isLoading=!1}))}function d(){return(i.isNew||!angular.equals(i.currentEntity,i.origEntity))&&i.hasUpdatePermission()}function u(){return d()&&n&&n.$valid}i.refresh=function(t){var o;i.isLoading=!0,c.then((function(t){e.languages=t})),o=i.currentEntity,i.currentEntity=angular.copy(o),i.origEntity=o,i.isLoading=!1,t&&i.parentBlade&&i.parentBlade.refresh(t)},i.datepickers={},i.open=function(e,t){e.preventDefault(),e.stopPropagation(),i.datepickers[t]=!0},e.setForm=function(e){n=e},e.saveChanges=function(){t.setError(null,i),s()},i.onClose=function(o){t.showConfirmationIfNeeded(d(),u(),i,e.saveChanges,o,"catalog.dialogs.video-save.title","catalog.dialogs.video-save.message")},i.toolbarCommands=[{name:"platform.commands.save",icon:"fa fa-save",permission:i.updatePermission,executeMethod:function(){s()},canExecuteMethod:function(){return u()}},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(i.origEntity,i.currentEntity)},canExecuteMethod:d},{name:"platform.commands.delete",icon:"fa fa-trash-o",permission:i.updatePermission,executeMethod:function(){var e={id:"confirmDelete",title:"catalog.dialogs.video-delete.title",message:"catalog.dialogs.video-delete.message",callback:function(e){e&&(i.isLoading=!0,r.remove({ids:[i.currentEntityId]},(function(){t.closeBlade(i,(function(){l&&l.refresh(!0)}))})))}};o.showConfirmationDialog(e)},canExecuteMethod:function(){return!i.isNew}}],i.refresh()}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.videoListController",["$scope","$translate","$timeout","platformWebApp.bladeNavigationService","platformWebApp.bladeUtils","platformWebApp.dialogService","platformWebApp.uiGridHelper","virtoCommerce.catalogModule.videos",function(e,t,o,a,r,i,l,n){var c=e.blade;c.updatePermission="catalog:update",c.headIcon="fab fa-youtube",c.title="catalog.blades.video-list.title",c.subtitle="catalog.blades.video-list.subtitle",c.getSearchCriteria=function(){return angular.extend(s,{searchPhrase:s.keyword?s.keyword:void 0,sort:l.getSortExpression(e),skip:(e.pageSettings.currentPage-1)*e.pageSettings.itemsPerPageCount,take:e.pageSettings.itemsPerPageCount})},c.refresh=function(){c.isLoading=!0,n.options(null,(function(e){c.videoOptions=e}),(function(e){a.setError(e,c)})),n.search(c.getSearchCriteria(),(function(t){c.isLoading=!1,e.pageSettings.totalItems=t.totalCount,c.currentEntities=t.results}),(function(e){a.setError(e,c)}))};var s=e.filter=c.filter||{ownerIds:[c.owner.id],ownerType:c.ownerType};function d(e,t){var o={id:"confirmDelete",title:t?"catalog.dialogs.video-delete.title":"catalog.dialogs.video-list-delete.title",message:t?"catalog.dialogs.video-delete.message":"catalog.dialogs.video-list-delete.message",callback:function(t){t&&(c.isLoading=!0,n.remove({ids:e.map(e=>e.id)},(function(){c.refresh()}),(function(e){a.setError(e,c)})))}};i.showConfirmationDialog(o)}s.criteriaChanged=function(){e.pageSettings.currentPage>1?e.pageSettings.currentPage=1:c.refresh()},e.toggleImageSelect=function(e,t){1===e.ctrlKey?t.$selected=!t.$selected:t.$selected?t.$selected=!1:t.$selected=!0},e.edit=function(e){var t={id:"videoDetail",currentEntityId:e.id,currentEntity:e,controller:"virtoCommerce.catalogModule.videoDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/video-detail.tpl.html"};a.showBlade(t,c)},c.selectNode=function(t){e.selectedNodeId=t.id},e.delete=function(e){d([e],!0)},c.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:c.refresh,canExecuteMethod:function(){return!0}},{name:"platform.commands.add",icon:"fa fa-plus",permission:c.updatePermission,executeMethod:function(){var e;e={id:"videoAdd",owner:c.owner,ownerType:c.ownerType,videoOptions:c.videoOptions,defaultLanguage:c.catalog.defaultLanguage,controller:"virtoCommerce.catalogModule.videoAddController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/video-add.tpl.html"},a.showBlade(e,c)},canExecuteMethod:function(){return c.owner&&c.ownerType}},{name:"platform.commands.delete",icon:"fa fa-trash-o",permission:c.updatePermission,executeMethod:function(){d(e.gridApi.selection.getSelectedRows())},canExecuteMethod:function(){return c.currentEntities&&e.gridApi&&_.any(e.gridApi.selection.getSelectedRows())}}];var u=function(e){c.isLoading=!0,n.save([e.rowEntity],(function(e){c.refresh()}),(function(e){a.setError(e,c)}))};e.setGridOptions=function(t){l.initialize(e,t,(function(t){t.edit.on.afterCellEdit(e,(function(e,a,r,i){r!==i&&o(u,100,!0,{rowEntity:e,colDef:a,gridApi:t})})),l.bindRefreshOnSortChanged(e)})),r.initializePagination(e)},e.priorityValid=function(e){return!_.isUndefined(e.sortOrder)&&e.sortOrder>=0},e.isValid=!0,e.$watch("blade.currentEntities",(function(t){var o=_.all(c.currentEntities,e.priorityValid);return e.isValid=o}),!0)}]).run(["platformWebApp.ui-grid.extension","uiGridValidateService",function(e,t){t.setValidator("minPriorityValidator",()=>(e,t)=>t>=0,()=>"Priority value should be equal or more than zero")}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.virtualCatalogDetailController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.catalogs","platformWebApp.metaFormsService",function(e,t,o,a){var r,i=e.blade;function l(e){i.isNew||(i.title=e.name),i.currentEntity=angular.copy(e),i.origEntity=e,i.isLoading=!1,i.securityScopes=e.securityScopes}function n(){return!angular.equals(i.currentEntity,i.origEntity)&&i.hasUpdatePermission()}function c(){return n()&&r&&r.$valid}function s(){i.isNew||(i.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:function(){e.saveChanges()},canExecuteMethod:c,permission:i.updatePermission},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(){angular.copy(i.origEntity,i.currentEntity)},canExecuteMethod:n,permission:i.updatePermission}])}i.updatePermission="catalog:update",i.metaFields=a.getMetaFields("catalogDetail"),i.refresh=function(e){i.isNew?l(i.currentEntity):o.get({id:i.currentEntityId},(function(t){l(t),i.childrenBlades&&_.each(i.childrenBlades,(function(e){e.refresh&&e.refresh(i.currentEntity)})),e&&i.parentBlade.refresh()}))},e.setForm=function(e){r=e},e.cancelChanges=function(){angular.copy(i.origEntity,i.currentEntity),e.bladeClose()},e.saveChanges=function(){i.isLoading=!0,i.isNew?o.save({},i.currentEntity,(function(e){i.isNew=void 0,i.currentEntityId=e.id,l(e),s(),i.refresh(!0)}),(function(e){t.setError("Error "+e.status,i)})):o.update({},i.currentEntity,(function(e){i.refresh(!0)}),(function(e){t.setError("Error "+e.status,i)}))},i.onClose=function(o){t.showConfirmationIfNeeded(n(),c(),i,e.saveChanges,o,"catalog.dialogs.virtual-catalog-save.title","catalog.dialogs.virtual-catalog-save.message")},s(),i.refresh(!1)}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.catalogItemSelectController",["$scope","virtoCommerce.catalogModule.catalogs","virtoCommerce.catalogModule.listEntries","platformWebApp.bladeUtils","uiGridConstants","platformWebApp.uiGridHelper","platformWebApp.ui-grid.extension","$timeout",function(e,t,o,a,r,i,l,n){var c=e.blade,s=a.bladeNavigationService;function d(){c.breadcrumbs=c.breadcrumbs.slice(0);var t={id:c.catalogId?c.catalogId:"All",name:c.catalog?c.catalog.name:"catalog.blades.catalog-items-select.bread-crumb-top",blade:e.blade};c.category&&(t.id=c.categoryId,t.name=c.category.name),_.some(c.breadcrumbs,(function(e){return e.id===t.id}))||c.breadcrumbs.push(t),t.navigate=function(t){s.closeBlade(e.blade,(function(){"All"===t.id&&(c.catalogId=null,c.filter.keyword=null),s.showBlade(e.blade,c.parentBlade)}))}}c.title||(c.title="Select Catalog items..."),e.options=angular.extend({showCheckingMultiple:!0,allowCheckingItem:!0,allowCheckingCategory:!1,withProducts:!0,selectedItemIds:[],gridColumns:[]},c.options),c.refresh=function(){c.isLoading=!0,u.searchedKeyword=u.keyword,e.isCatalogSelectMode()?t.search({take:1e3},(function(t){c.isLoading=!1,void 0===e.options.isVirtual?e.items=t.results:e.items=_.where(t.results,{isVirtual:e.options.isVirtual}),e.pageSettings.totalItems=e.items.length,e.options.onCatalogsLoaded&&e.options.onCatalogsLoaded(e.items),d()})):o.listitemssearch(angular.extend({catalogId:c.catalogId,categoryId:c.categoryId,keyword:u.keyword,searchInVariations:!!u.searchInVariations&&u.searchInVariations,responseGroup:e.options.withProducts?"withCategories, withProducts":"withCategories",objectTypes:e.options.withProducts?void 0:["Category"],excludeProductType:e.options.excludeProductType,sort:i.getSortExpression(e),skip:(e.pageSettings.currentPage-1)*e.pageSettings.itemsPerPageCount,take:e.pageSettings.itemsPerPageCount},c.searchCriteria),(function(t,o){c.isLoading=!1,e.pageSettings.totalItems=t.totalCount,e.items=t.listEntries,e.options.onItemsLoaded&&e.options.onItemsLoaded(t.listEntries),d()}))},e.isCatalogSelectMode=function(){return!c.catalogId&&!u.searchedKeyword},e.selectItem=function(t,o){e.selectedNodeId=o.id,e.options.selectItemFn&&e.options.selectItemFn(o);var a={id:c.id,breadcrumbs:c.breadcrumbs,catalogId:c.catalogId,catalog:c.catalog,controller:c.controller,template:c.template,options:e.options,searchCriteria:c.searchCriteria,toolbarCommands:c.toolbarCommands};if(e.isCatalogSelectMode()){if(a.catalogId=o.id,a.catalog=o,e.options.getBladeForCategories){var r=e.options.getBladeForCategories(o,a);r&&(a=r)}s.closeBlade(c,(function(){s.showBlade(a,c.parentBlade)})),s.catalogsSelectedCatalog=o,s.catalogsSelectedCategoryId=void 0}else if("category"===o.type)a.categoryId=o.id,a.category=o,s.closeBlade(c,(function(){s.showBlade(a,c.parentBlade)}));else{if(a={id:"listItemDetail",itemId:o.id,productType:o.productType,title:o.name,catalog:c.catalog,variationsToolbarCommandsAndEvents:{toolbarCommands:c.toolbarCommands,externalRegisterApiCallback:g},controller:"virtoCommerce.catalogModule.itemDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/item-detail.tpl.html"},e.options.fnGetBladeForItem){var i=e.options.fnGetBladeForItem(o);i&&(a=i)}s.showBlade(a,c),s.catalogsSelectedCategoryId=c.categoryId}};var u=c.filter=c.filter||{keyword:""};function g(t){e.gridApi=t,t.grid.registerDataChangeCallback((function(o){n((function(){_.each(e.items,(function(o){_.some(e.options.selectedItemIds,(function(e){return e===o.id}))&&t.selection.selectRow(o)}))}))}),[r.dataChange.ROW]),t.selection.on.rowSelectionChanged(e,(function(t){e.options.checkItemFn&&e.options.checkItemFn(t.entity,t.isSelected),t.isSelected?_.contains(e.options.selectedItemIds,t.entity.id)||e.options.selectedItemIds.push(t.entity.id):e.options.selectedItemIds=_.without(e.options.selectedItemIds,t.entity.id)})),i.bindRefreshOnSortChanged(e)}u.criteriaChanged=function(){e.pageSettings.currentPage>1?e.pageSettings.currentPage=1:c.refresh()},e.setGridOptions=function(t,o){o.isRowSelectable=angular.isFunction(e.options.isItemSelectable)?function(t){return e.options.isItemSelectable(t.entity)}:function(t){return e.options.allowCheckingItem&&"category"!==t.entity.type||e.options.allowCheckingCategory&&"category"===t.entity.type},o.columnDefs=o.columnDefs.concat(e.options.gridColumns),l.tryExtendGridOptions(t,o),i.initialize(e,o,g),a.initializePagination(e)}}])},function(e,t){angular.module("virtoCommerce.catalogModule").factory("virtoCommerce.catalogModule.catalogExportService",(function(){return{registrationsList:[],register:function(e){this.registrationsList.push(e)}}}))},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.exporterListController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.catalogExportService",function(e,t,o){var a=e.blade;e.selectedNodeId=null,e.openBlade=function(e){var o={};angular.copy(e,o),o.selectedCategories=a.selectedCategories,o.selectedProducts=a.selectedProducts,o.catalog=a.catalog,angular.isFunction(e.onInitialize)&&e.onInitialize(o),t.showBlade(o,a.parentBlade)},e.blade.headIcon="fa fa-upload",e.registrationsList=o.registrationsList,a.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.catalogModule").factory("virtoCommerce.catalogModule.catalogImportService",(function(){return{registrationsList:[],register:function(e){this.registrationsList.push(e)}}}))},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.importerListController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.catalogImportService",function(e,t,o){var a=e.blade;e.selectedNodeId=null,e.openBlade=function(e){var o={};angular.copy(e,o),o.catalog=a.catalog,t.showBlade(o,a.parentBlade)},e.blade.headIcon="fa fa-download",e.registrationsList=o.registrationsList,a.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.linksListController",["$scope","$timeout","platformWebApp.bladeNavigationService","platformWebApp.dialogService","platformWebApp.bladeUtils","platformWebApp.uiGridHelper","virtoCommerce.catalogModule.listEntries",function(e,t,o,a,r,i,l){var n=e.blade;function c(){if(e.hasMore){++e.pageSettings.currentPage,e.gridApi.infiniteScroll.saveScrollPercentage(),n.isLoading=!0;var o=n.getSearchCriteria();l.searchlinks(o,(function(o){d(o.results),n.isLoading=!1,e.pageSettings.totalItems=o.totalCount,e.hasMore=o.results.length===e.pageSettings.itemsPerPageCount,e.links=e.links.concat(o.results),e.gridApi.infiniteScroll.dataLoaded(),t((function(){e.gridApi.selection.getSelectAllState()&&e.gridApi.selection.selectAllRows()}))}))}}n.updatePermission="catalog:update",n.headIcon="fas fa-link",n.title="catalog.blades.links-list.title",n.linkImage="Modules/$(VirtoCommerce.Catalog)/Content/images/link.svg",e.links=[],e.hasMore=!0,n.refresh=function(){n.isLoading=!0,1!==e.pageSettings.currentPage&&(e.pageSettings.currentPage=1);var t=n.getSearchCriteria();l.searchlinks(t,(function(t){d(t.results),n.isLoading=!1,e.pageSettings.totalItems=t.totalCount,e.hasMore=t.results.length===e.pageSettings.itemsPerPageCount,e.links=t.results})),e.gridApi&&(e.links=[],e.gridApi.selection.clearSelectedRows(),e.gridApi.infiniteScroll.resetScroll(!0,!0),e.gridApi.infiniteScroll.dataLoaded())};var s=e.filter=n.filter||{objectIds:[n.currentEntity.id],objectType:n.type};function d(e){_.each(e,(function(e){var t=[];if(e.category){var o=_.first(e.category.outlines);o&&(t=_.pluck(o.items,"name"))}e.$$path=_.any(t)?"/"+t.join("/"):"/"}))}s.criteriaChanged=function(){e.pageSettings.currentPage>1?e.pageSettings.currentPage=1:n.refresh()},n.getSearchCriteria=function(){return angular.extend(s,{skip:(e.pageSettings.currentPage-1)*e.pageSettings.itemsPerPageCount,take:e.pageSettings.itemsPerPageCount})},n.toolbarCommands=[{name:"platform.commands.add",icon:"fa fa-plus",permission:n.updatePermission,executeMethod:function(){e.openAddLinksBlade()},canExecuteMethod:function(){return!0}},{name:"platform.commands.delete",icon:"fa fa-trash-o",permission:n.updatePermission,executeMethod:function(){var t,r;t=e.gridApi.selection.getSelectedRows(),r={id:"confirmDelete",title:"catalog.dialogs.links-delete.title",message:"catalog.dialogs.links-delete.message",callback:function(e){if(e){n.isLoading=!0;var a=_.map(t,(function(e){return{listEntryId:n.currentEntity.id,catalogId:e.catalogId,categoryId:e.categoryId}}));l.deletelinks(a,(function(){n.refresh()}),(function(e){o.setError(e,n)}))}}},a.showConfirmationDialog(r)},canExecuteMethod:function(){return e.gridApi&&_.any(e.gridApi.selection.getSelectedRows())}}],e.openAddLinksBlade=function(){var e=[],t={id:"CatalogItemsSelect",controller:"virtoCommerce.catalogModule.catalogItemSelectController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/links-list/catalog-items-select-links.tpl.html",options:{selectedItemIds:[],allowCheckingCategory:!0,withProducts:!1,isVirtual:!0,getBladeForCategories:function(e,t){return t.template="Modules/$(VirtoCommerce.Catalog)/Scripts/blades/links-list/categories-items-select-links.tpl.html",t},checkItemFn:function(t,o){o?_.find(e,(function(e){return e.id==t.id}))||e.push(t):e=_.reject(e,(function(e){return e.id==t.id}))},isItemSelectable:function(e){var t="Category"===n.type&&e.id===n.currentEntity.id;return!(e.links&&e.links.length||e.marked||t)},onItemsLoaded:function(e){if(e.length){var t=_.pluck(e,"id"),o={objectIds:[n.currentEntity.id],objectType:n.type,categoryIds:t,take:e.length};l.searchlinks(o,(function(t){_.each(e,(function(e){e.marked=!!_.find(t.results,(function(t){return t.categoryId===e.id}))}))}))}},onCatalogsLoaded:function(e){if(e.length){var t=_.pluck(e,"id"),o={objectIds:[n.currentEntity.id],objectType:n.type,catalogIds:t,take:e.length};l.searchlinks(o,(function(t){_.each(e,(function(e){e.marked=!!_.find(t.results,(function(t){return t.catalogId===e.id}))}))}))}}},breadcrumbs:[],toolbarCommands:[{name:"platform.commands.confirm",icon:"fa fa-check",executeMethod:function(t){n.isLoading=!0,o.closeBlade(t);var a=[];angular.forEach(e,(function(e){var t={listEntryId:n.currentEntity.id,listEntryType:n.type};"category"===e.type?(t.categoryId=e.id,t.catalogId=e.catalogId):t.catalogId=e.id,a.push(t)})),l.createlinks(a,(function(){n.refresh()}),(function(e){o.setError("Error "+e.status,n)}))},canExecuteMethod:function(){return _.any(e)}},{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:function(e){e.refresh&&e.refresh()},canExecuteMethod:function(){return!0}}]};o.showBlade(t,n)},e.setGridOptions=function(o){r.initializePagination(e,!0),e.pageSettings.itemsPerPageCount=50,i.initialize(e,o,(function(t){e.gridApi=t,i.bindRefreshOnSortChanged(e),e.gridApi.infiniteScroll.on.needLoadMoreData(e,c),t.grid.options.enableGridMenu=!1})),t((function(){n.refresh()}))}}])},function(e,t){angular.module("virtoCommerce.catalogModule").directive("vaDictionaryValue",(function(){return{restrict:"E",templateUrl:"Modules/$(VirtoCommerce.Catalog)/Scripts/directives/dictionaryValue.tpl.html",require:["^form","ngModel"],scope:{ngModel:"=",name:"=",form:"=",validationRules:"=",required:"@"},replace:!0,transclude:!0}}))},function(e,t){angular.module("virtoCommerce.catalogModule").directive("vcItemSearch",["$localStorage","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.predefinedSearchFilters",function(e,t,o){return{restrict:"E",templateUrl:function(e,t){return t.templateUrl||"Modules/$(VirtoCommerce.Catalog)/Scripts/directives/itemSearch.tpl.html"},scope:{blade:"="},link:function(o){var a=o.blade;o.$localStorage=e;var r=o.filter=a.filter;function i(e){var o={id:"filterDetail",controller:"virtoCommerce.catalogModule.filterDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/filter-detail.tpl.html"};angular.extend(o,e),t.showBlade(o,a)}e.catalogSearchFilterId&&!r.keyword&&null!==r.keyword&&(r.current=_.findWhere(e.catalogSearchFilters,{id:e.catalogSearchFilterId}),r.keyword=r.current?r.current.keyword:"",r.searchInVariations=!!r.current&&r.current.searchInVariations),r.change=function(o){e.catalogSearchFilterId=r.current?r.current.id:null,r.current&&!r.current.id?(r.current=null,i({isNew:!0})):(o||t.closeBlade({id:"filterDetail"}),r.keyword=r.current?r.current.keyword:"",r.searchInVariations=!!r.current&&r.current.searchInVariations,r.criteriaChanged())},r.edit=function(e,t){r.current=t,i({data:t})},r.criteriaChanged()}}}])},function(e,t){angular.module("virtoCommerce.catalogModule").directive("vaProperty2",["$compile","$filter","$parse","$templateCache","$http",function(e,t,o,a,r){return{restrict:"E",require:["^form","ngModel"],replace:!0,transclude:!0,templateUrl:"Modules/$(VirtoCommerce.Catalog)/Scripts/directives/property2.tpl.html",scope:{languages:"=",hiddenLanguages:"=",defaultLanguage:"=",getPropValues:"&",pageSize:"@?"},link:function(t,o,i,l,n){var c=l[1];function s(e,t){return!e.multivalue&&!e.dictionary&&0==t.length}function d(e){var o=t.context.form;o[e].$setValidity("minlength",!0),o[e].$setValidity("maxlength",!0),o[e].$setValidity("pattern",!0)}t.currentEntity=c.$modelValue,t.context={},t.context.currentPropValues=[],t.context.allDictionaryValues=[],t.context.langValuesMap={},t.context.form=l[0],t.pageSize=angular.isDefined(t.pageSize)?t.pageSize:50,t.$watch("context.langValuesMap",(function(e,o){e==o||t.currentEntity.dictionary||(t.context.currentPropValues=[],angular.forEach(t.context.langValuesMap,(function(e,o){angular.forEach(e.currentPropValues,(function(e){e.languageCode=o,t.context.currentPropValues.push(e)}))})))}),!0),t.$watch("context.currentPropValues",(function(e){var o=angular.copy(t.currentEntity.values);t.currentEntity.dictionary&&(o=_.uniq(_.map(o,(function(e){return{id:e.id,alias:e.alias,valueId:e.valueId,value:e.alias}})),(function(e){return e.valueId}))),function(e,t){var o=e.length!=t.length,a=_.any(e,(function(e){return _.all(t,(function(t){return!(e&&t.value===e.value&&t.languageCode==e.languageCode)}))}));return(o||a)&&(_.any(t)||e[0]&&e[0].value)}(e,o)&&(void 0===e[0]?t.currentEntity.values=null:t.currentEntity.values=e,_.each(t.currentEntity.values,(function(e){e&&(e.isInherited=!1)})),c.$setViewValue(t.currentEntity)),void 0===e[0]&&(t.currentEntity.values=[])}),!0),c.$render=function(){var i,l,n;t.currentEntity=c.$modelValue,t.context.currentPropValues=angular.copy(t.currentEntity.values),t.currentEntity.dictionary&&(t.context.currentPropValues=_.uniq(_.map(t.context.currentPropValues,(function(e){return{id:e.id,alias:e.alias,valueId:e.valueId,value:e.alias,selected:!0}})),(function(e){return e.valueId}))),s(t.currentEntity,t.context.currentPropValues)&&t.context.currentPropValues.push({value:null}),t.currentEntity.multilanguage&&!t.currentEntity.dictionary&&angular.forEach(t.languages,(function(e){var o=_.where(t.context.currentPropValues,{languageCode:e});!_.any(o)&&_.any(t.context.currentPropValues)&&(o=angular.copy(_.filter(t.context.currentPropValues,(function(e){return!e.languageCode}))),_.each(o,(function(t){t.id=null,t.languageCode=e}))),s(t.currentEntity,o)&&o.push({value:null,languageCode:e});var a={allValues:_.where(t.context.allDictionaryValues,{languageCode:e}),currentPropValues:o};t.context.langValuesMap[e]=a})),t.currentEntity.valueType,i=t.currentEntity,l=i.valueType,i.dictionary&&(l+="-dictionary"),i.multivalue&&(l+="-multivalue"),i.multilanguage&&(l+="-multilang"),n=l+=".html",r.get(n,{cache:a}).then((function(a){var r=o.find("#valuePlaceHolder #innerContainer");r.length>0&&r.scope().$destroy();var i=o.find("#valuePlaceHolder").html(a.data.trim()),l=t.$new();e(i)(l)}))},t.isLanguageVisible=function(e){return!t.hiddenLanguages||!_.contains(t.hiddenLanguages,e)},t.loadDictionaryValues=function(e){return e.page=0,t.loadNextDictionaryValues(e)},t.loadNextDictionaryValues=function(e){var o=e.page*t.pageSize,a=t.pageSize;return t.getPropValues()(t.currentEntity.id,e.search,o,a).then((function(o){var a;return e.page||(t.context.allDictionaryValues=[]),a=o.results,angular.forEach(a,(function(e){var o=_.find(t.context.currentPropValues,(function(t){return t&&t.valueId==e.id}));o||(o={alias:e.alias,valueId:e.id,value:e.alias}),t.context.allDictionaryValues.push(o)})),e.page++,t.context.allDictionaryValues.length<o.totalCount&&t.$broadcast("scrollCompleted"),o}))},t.datepickers={DateTime:!1},t.open=function(e,o){e.preventDefault(),e.stopPropagation(),t.datepickers[o]=!0},t.dateOptions={datepickerMode:"day"},n((function(e){o.append(e)})),t.tagsDeleted=function(e,o,a){var r=t.context.form,i=t.context.currentPropValues;a&&0===i.length&&r[o].$setValidity("required",!1),d(o)},t.tagsAdded=function(e,o){var a=t.context.form;e.value&&a[o].$setValidity("required",!0),d(o)},t.addederror=function(e,o,a,r,i){var l=t.context.form;(a&&e.value.length<a&&l[o].$setValidity("minlength",!1),r&&e.value.length>r&&l[o].$setValidity("maxlength",!1),i)&&(new RegExp(i).test(e.value)||l[o].$setValidity("pattern",!1))}}}}])},function(e,t){angular.module("virtoCommerce.catalogModule").directive("vaPropertyMessages",(function(){return{restrict:"E",templateUrl:"Modules/$(VirtoCommerce.Catalog)/Scripts/directives/propertyMessages.tpl.html",scope:!1}}))},function(e,t){angular.module("virtoCommerce.catalogModule").filter("thumbnail",(function(){return function(e,t){return e=e.replace(/(\.[\w\d_-]+)$/i,t+"$1")}}))},function(e,t){angular.module("virtoCommerce.catalogModule").filter("trustUrl",["$sce",function(e){return function(t){return e.trustAsResourceUrl(t)}}])},function(e,t){angular.module("virtoCommerce.catalogModule").factory("virtoCommerce.catalogModule.aggregationProperties",["$resource",function(e){return e("",{},{getProperties:{url:"api/catalog/aggregationproperties/:storeId/properties",isArray:!0},setProperties:{url:"api/catalog/aggregationproperties/:storeId/properties",method:"PUT"},getValues:{url:"api/catalog/aggregationproperties/:storeId/properties/:propertyName/values",isArray:!0}})}])},function(e,t){angular.module("virtoCommerce.catalogModule").factory("virtoCommerce.catalogModule.associations",["$resource",function(e){return e("api/catalog/products/associations/:productId",null,{get:{method:"GET",isArray:!0},update:{method:"POST",url:"api/catalog/products/associations"},delete:{method:"DELETE",url:"api/catalog/products/associations"},search:{method:"POST",url:"api/catalog/products/associations/search"}})}])},function(e,t){angular.module("virtoCommerce.catalogModule").factory("virtoCommerce.catalogModule.catalogs",["$resource",function(e){return e("api/catalog/catalogs/:id",{id:"@Id"},{get:{method:"GET"},getCatalogs:{method:"GET",isArray:!0},search:{method:"POST",url:"api/catalog/catalogs/search"},newCatalog:{method:"GET",url:"api/catalog/catalogs/getnew"},newVirtualCatalog:{method:"GET",url:"api/catalog/catalogs/getnewvirtual"},update:{method:"PUT"}})}])},function(e,t){angular.module("virtoCommerce.catalogModule").factory("virtoCommerce.catalogModule.categories",["$resource",function(e){return e("api/catalog/categories/:id",{categoryId:"@Id"},{newCategory:{method:"GET",url:"api/catalog/:catalogId/categories/newcategory",params:{catalogId:"@catalogId"}},update:{method:"POST",url:"api/catalog/categories/"},remove:{method:"DELETE",url:"api/catalog/categories"},plenty:{method:"POST",url:"api/catalog/categories/plenty",isArray:!0},getByIds:{method:"GET",url:"api/catalog/categories",params:{ids:"@ids"},isArray:!0}})}])},function(e,t){angular.module("virtoCommerce.catalogModule").factory("virtoCommerce.catalogModule.import",["$resource",function(e){return e("api/catalog/import",{},{getMappingConfiguration:{method:"GET",url:"api/catalog/import/mappingconfiguration",isArray:!1},run:{method:"POST",url:"api/catalog/import",isArray:!1}})}])},function(e,t){angular.module("virtoCommerce.catalogModule").factory("virtoCommerce.catalogModule.items",["$resource",function(e){return e("api/catalog/products/:id",null,{remove:{method:"DELETE",url:"api/catalog/products"},newItemInCatalog:{method:"GET",url:"api/catalog/:catalogId/products/getnew"},newItemInCategory:{method:"GET",url:"api/catalog/:catalogId/categories/:categoryId/products/getnew"},newVariation:{method:"GET",url:"api/catalog/products/:itemId/getnewvariation"},cloneItem:{method:"GET",url:"api/catalog/products/:itemId/clone"},update:{method:"POST"},plenty:{method:"POST",url:"api/catalog/products/plenty",isArray:!0},getByIds:{method:"GET",url:"api/catalog/products/",params:{ids:"@ids"},isArray:!0}})}])},function(e,t){angular.module("virtoCommerce.catalogModule").factory("virtoCommerce.catalogModule.listEntries",["$resource",function(e){return e("api/catalog/listentries",{},{listitemssearch:{method:"POST",url:"api/catalog/listentries"},createlinks:{method:"POST",url:"api/catalog/listentrylinks"},bulkcreatelinks:{method:"POST",url:"api/catalog/listentrylinks/bulkcreate"},searchlinks:{method:"POST",url:"api/catalog/listentrylinks/search"},deletelinks:{method:"POST",url:"api/catalog/listentrylinks/delete"},move:{method:"POST",url:"api/catalog/listentries/move"},delete:{method:"POST",url:"api/catalog/listentries/delete"}})}])},function(e,t){angular.module("virtoCommerce.catalogModule").factory("virtoCommerce.catalogModule.propDictItems",["$resource",function(e){return e("api/catalog/dictionaryitems",{},{save:{method:"POST",url:"api/catalog/dictionaryitems"},search:{method:"POST",url:"api/catalog/dictionaryitems/search"},remove:{method:"DELETE",url:"api/catalog/dictionaryitems"}})}])},function(e,t){angular.module("virtoCommerce.catalogModule").factory("virtoCommerce.catalogModule.properties",["$resource",function(e){return e("api/catalog/properties/:id",{id:"@id"},{newCategoryProperty:{method:"GET",url:"api/catalog/categories/:categoryId/properties/getnew"},newCatalogProperty:{method:"GET",url:"api/catalog/:catalogId/properties/getnew"},get:{method:"GET",url:"api/catalog/properties/:propertyId"},update:{method:"POST",url:"api/catalog/properties"},validateName:{method:"POST",url:"api/catalog/properties/validate-name"},validateCategoryPropertyName:{method:"POST",url:"api/catalog/properties/validate-property-name"},values:{url:"api/catalog/properties/:propertyId/values",isArray:!0},remove:{method:"DELETE",url:"api/catalog/properties"}})}])},function(e,t){angular.module("virtoCommerce.catalogModule").factory("virtoCommerce.catalogModule.propertyValidators",(function(){var e=/^\b[0-9a-z]+(_[0-9a-z]+)*\b$/i,t=128;return{isNameValid:function(o){return o.length<=t&&e.test(o)}}}))},function(e,t){angular.module("virtoCommerce.catalogModule").factory("virtoCommerce.catalogModule.search",["$resource",function(e){return e("api/catalog/listentries",null,{searchProducts:{method:"POST"}})}])},function(e,t){angular.module("virtoCommerce.catalogModule").factory("virtoCommerce.catalogModule.valueTypes",(function(){return{get:function(){return[{valueType:"ShortText",title:"platform.properties.short-text.title",description:"platform.properties.short-text.description"},{valueType:"LongText",title:"platform.properties.long-text.title",description:"platform.properties.long-text.description"},{valueType:"Number",title:"platform.properties.decimal.title",description:"platform.properties.decimal.description"},{valueType:"DateTime",title:"platform.properties.date-time.title",description:"platform.properties.date-time.description"},{valueType:"Boolean",title:"platform.properties.boolean.title",description:"platform.properties.boolean.description"},{valueType:"Integer",title:"platform.properties.integer.title",description:"platform.properties.integer.description"},{valueType:"GeoPoint",title:"catalog.properties.geoPoint.title",description:"catalog.properties.geoPoint.description"}]}}}))},function(e,t){angular.module("virtoCommerce.catalogModule").factory("virtoCommerce.catalogModule.videos",["$resource",function(e){return e("api/catalog/videos",{},{options:{method:"GET",url:"api/catalog/videos/options"},create:{method:"POST",url:"api/catalog/videos/create"},search:{method:"POST",url:"api/catalog/videos/search"},save:{method:"POST",isArray:!0},remove:{method:"DELETE",isArray:!0}})}])},function(e,t){angular.module("virtoCommerce.catalogBulkActionsModule").factory("virtoCommerce.catalogBulkActionsModule.webApi",["$resource",function(e){var t="api/bulk/actions";return e("",null,{getActions:{method:"GET",isArray:!0,url:t},getActionData:{method:"POST",url:t+"/data"},runBulkAction:{method:"POST",url:t},cancel:{method:"DELETE",url:t}})}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.catalogSelectorController",["$scope","virtoCommerce.catalogModule.catalogs",function(e,t){t.search({take:1e3},(function(t){e.catalogs=angular.copy(t.results)}))}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.categorySelectorController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var o=e.blade;e.selectedCount=(o.currentEntity.categoryIds||[]).length,e.$watch("blade.currentEntity.categoryIds",(function(){e.selectedCount=(o.currentEntity.categoryIds||[]).length})),e.selectCategory=function(){var a=o.currentEntity.categoryIds||[],r={id:"CatalogItemsSelect",controller:"virtoCommerce.catalogModule.catalogItemSelectController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/common/catalog-items-select.tpl.html",title:"catalog.selectors.blades.titles.select-categories",options:{allowCheckingCategory:!0,allowCheckingItem:!1,selectedItemIds:a,checkItemFn:function(e,t){t?_.find(a,(function(t){return t===e.id}))||a.push(e.id):a=_.reject(a,(function(t){return t===e.id}))}},breadcrumbs:[],toolbarCommands:[{name:"platform.commands.confirm",icon:"fa fa-check",executeMethod:function(r){o.currentEntity.categoryIds=_.union(o.currentEntity.categoryIds,a),e.selectedCount=o.currentEntity.categoryIds.length,t.closeBlade(r)},canExecuteMethod:function(){return _.any(a)}},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:function(r){a=[],o.currentEntity.categoryIds=[],e.selectedCount=o.currentEntity.categoryIds.length,t.closeBlade(r)},canExecuteMethod:function(){return _.any(a)}}]};t.showBlade(r,o)}}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.aggregationPropertiesWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var o=e.blade;e.openBlade=function(){var e={id:"storeFilteringProperties",storeId:o.currentEntity.id,title:"Filtering properties",controller:"virtoCommerce.catalogModule.aggregationPropertiesController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/aggregation-properties-list.tpl.html"};t.showBlade(e,o)}}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.billOfMaterialsWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var o=e.blade;e.openBlade=function(){var e={id:"billOfMaterialsList",item:o.item,controller:"virtoCommerce.catalogModule.billOfMaterialsListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/bill-of-materials-list.tpl.html"};t.showBlade(e,o)}}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.catalogEntryImageWidgetController",["$scope","virtoCommerce.catalogModule.items","virtoCommerce.catalogModule.categories","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.catalogImagesFolderPathHelper",function(e,t,o,a,r){function i(t){t&&(e.currentEntities=t)}e.openBlade=function(){var t={id:"itemImage",item:e.blade.currentEntity,folderPath:r.getImagesFolderPath(e.blade.currentEntity.catalogId,e.blade.currentEntity.code),controller:"virtoCommerce.catalogModule.imagesController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/images.tpl.html"};a.showBlade(t,e.blade)},e.$watch("blade.item.images",i),e.$watch("blade.currentEntity.images",i)}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.catalogLanguagesWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var o=e.blade;e.openBlade=function(){var e={id:"catalogChildBlade",title:o.title,subtitle:"catalog.widgets.catalogLanguages.blade-subtitle",controller:"virtoCommerce.catalogModule.catalogLanguagesController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/catalog-languages.tpl.html"};t.showBlade(e,o)}}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.catalogPropertyWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var o=e.blade;e.openCatalogPropertyBlade=function(){var e={id:"catalogPropertyDetail",currentEntity:o.currentEntity,languages:_.pluck(o.currentEntity.languages,"languageCode"),defaultLanguage:o.currentEntity.defaultLanguage.languageCode,entityType:"catalog",catalogId:o.currentEntity.id,propGroups:[{title:"catalog.properties.catalog",type:"Catalog"},{title:"catalog.properties.category",type:"Category"},{title:"catalog.properties.product",type:"Product"},{title:"catalog.properties.variation",type:"Variation"}],controller:"virtoCommerce.catalogModule.propertyListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/property-list.tpl.html"};t.showBlade(e,o)}}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.categoryDescriptionWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){e.currentBlade=e.widget.blade,e.openBlade=function(){var o={id:"categoryDescriptionsList",category:e.currentBlade.currentEntity,catalog:e.currentBlade.catalog,controller:"virtoCommerce.catalogModule.categoryDescriptionsListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/categoryDescriptions-list.tpl.html"};t.showBlade(o,e.currentBlade)}}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.categoryPropertyWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var o=e.blade;e.propertiesCount="...",e.$watch("blade.currentEntity",(function(t){t&&(e.propertiesCount=_.filter(t.properties,(function(e){return"Category"==e.type||"Product"==e.type||"Variation"==e.type})).length)})),e.openPropertiesBlade=function(){var e={id:"categoryPropertyDetail",categoryId:o.currentEntity.id,entityType:"category",currentEntity:o.currentEntity,languages:_.pluck(o.catalog.languages,"languageCode"),defaultLanguage:o.catalog.defaultLanguage.languageCode,propGroups:[{title:"catalog.properties.category",type:"Category"},{title:"catalog.properties.product",type:"Product"},{title:"catalog.properties.variation",type:"Variation"}],controller:"virtoCommerce.catalogModule.propertyListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/property-list.tpl.html"};t.showBlade(e,o)}}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.dashboard.catalogsWidgetController",["$scope","$state","virtoCommerce.catalogModule.catalogs",function(e,t,o){e.data={count:"",descr:"Catalogs"},e.widgetAction=function(){t.go("workspace.catalog")},o.search({take:0},(function(t){e.data.count=t.totalCount}),(function(e){}))}]).controller("virtoCommerce.catalogModule.dashboard.productsWidgetController",["$scope","$state","virtoCommerce.catalogModule.listEntries",function(e,t,o){e.data={count:"",descr:"Products"},e.widgetAction=function(){t.go("workspace.catalog")},o.listitemssearch({take:0},(function(t){e.data.count=t.totalCount}),(function(e){}))}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.editorialReviewWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){e.currentBlade=e.widget.blade,e.openBlade=function(){var o={id:"editorialReviewsList",item:e.currentBlade.item,catalog:e.currentBlade.catalog,controller:"virtoCommerce.catalogModule.editorialReviewsListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/editorialReviews-list.tpl.html"};t.showBlade(o,e.currentBlade)}}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.itemAssetWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var o=e.widget.blade;e.openBlade=function(){var e={id:"itemAsset",item:o.currentEntity,controller:"virtoCommerce.catalogModule.itemAssetController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/item-asset-list.tpl.html"};t.showBlade(e,o)}}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.itemAssociationsWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var o=e.blade;e.openBlade=function(){if(o.item.associations)var e={id:"associationsList",item:o.item,controller:"virtoCommerce.catalogModule.itemAssociationsListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/item-associations-list.tpl.html"};t.showBlade(e,o)}}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.itemDimensionWidgetController",["$scope","virtoCommerce.catalogModule.items","platformWebApp.bladeNavigationService","virtoCommerce.coreModule.packageType.packageTypeApi",function(e,t,o,a){e.openBlade=function(){var t={id:"itemDimension",item:e.blade.item,controller:"virtoCommerce.catalogModule.itemDimensionController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/item-dimensions.tpl.html"};o.showBlade(t,e.blade)},e.$watch("blade.item.packageType",(function(t){t?a.query({},(function(o){e.blade.packageType=_.find(o,(function(e){return e.id==t}))})):delete e.blade.packageType}))}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.itemPropertyWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var o=e.blade;e.propertiesCount="...",e.$watch("blade.item",(function(t){t&&(e.propertiesCount=_.filter(t.properties,(function(e){return"Product"==e.type||"Variation"==e.type})).length)})),e.openItemPropertyBlade=function(){var e={id:"itemProperty"+o.currentEntity.id,productId:o.currentEntity.id,entityType:"product",catalog:o.catalog,currentEntity:o.currentEntity,languages:_.pluck(o.catalog.languages,"languageCode"),defaultLanguage:o.catalog.defaultLanguage.languageCode,propGroups:[{title:"catalog.properties.product",type:"Product"},{title:"catalog.properties.variation",type:"Variation"}],controller:"virtoCommerce.catalogModule.propertyListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/property-list.tpl.html"};t.showBlade(e,o)}}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.itemVariationWidgetController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.search",function(e,t,o){var a=e.blade;function r(){e.variartionCount="...";var t={mainProductId:a.currentEntityId,objectType:"CatalogProduct",responseGroup:"withProducts",take:0,withHidden:!0};o.searchProducts(t,(function(t){e.variartionCount=t.totalCount}))}e.openVariationListBlade=function(){var e={id:"itemVariationList",item:a.item,catalog:a.catalog,toolbarCommandsAndEvents:a.variationsToolbarCommandsAndEvents,controller:"virtoCommerce.catalogModule.itemVariationListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/item-variation-list.tpl.html"};t.showBlade(e,a)},e.$watch("widget.blade.currentEntity",(function(e){r()})),r()}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.linksWidgetController",["$scope","platformWebApp.bladeNavigationService","virtoCommerce.catalogModule.listEntries",function(e,t,o){var a=e.blade,r=a.productType?"CatalogProduct":"Category";e.openLinksBlade=function(){var e={id:"linksListBlade",currentEntity:a.currentEntity,type:r,controller:"virtoCommerce.catalogModule.linksListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/links-list/links-list.tpl.html"};t.showBlade(e,a)},function(){e.linksCount="...";var t={objectIds:[a.currentEntityId],objectType:r,take:0};o.searchlinks(t,(function(t){e.linksCount=t.totalCount}))}()}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.videoWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var o=e.blade;e.openBlade=function(){var e={id:"videosList",owner:o.currentEntity,ownerType:"Product",catalog:o.catalog,controller:"virtoCommerce.catalogModule.videoListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/video-list.tpl.html"};t.showBlade(e,o)}}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.associationWizardController",["$scope","platformWebApp.bladeNavigationService","platformWebApp.settings","virtoCommerce.catalogModule.items",function(e,t,o,a){var r=e.blade;r.title="catalog.wizards.association.title",r.isLoading=!1,e.selectedCount=function(e){return _.where(r.selection,{type:e}).length},e.isValid=!1,e.$watch("blade.selection",(function(){e.isValid=r.groupName&&r.selection.length>0}),!0),e.saveChanges=function(){r.item.associations=_.map(r.selection,(function(e){var t=e.association;return t||(t={type:r.groupName,associatedObjectType:e.type,associatedObjectId:e.id,associatedObjectName:e.name,associatedObjectImg:e.imageUrl,quantity:r.quantity},_.any(r.tags)&&(t.tags=_.map(r.tags,(function(e){return e.value})))),t})),angular.isFunction(r.onSaveChanges)&&r.onSaveChanges(),e.bladeClose()},e.openBlade=function(){var e=[],o={id:"CatalogItemsSelect",title:"catalog.blades.catalog-items-select.title-association",subtitle:"catalog.blades.catalog-items-select.subtitle-association",controller:"virtoCommerce.catalogModule.catalogItemSelectController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/common/catalog-items-select.tpl.html",options:{allowCheckingCategory:!0,selectedItemIds:[],checkItemFn:function(t,o){o?_.find(e,(function(e){return e.id==t.id}))||e.push(t):e=_.reject(e,(function(e){return e.id==t.id}))}},breadcrumbs:[],toolbarCommands:[{name:"platform.commands.confirm",icon:"fa fa-check",executeMethod:function(o){r.selection=_.uniq(_.union(r.selection,e),(function(e){return[e.type,e.id,e.association?e.association.type:r.groupName].join()})),t.closeBlade(o)},canExecuteMethod:function(){return _.any(e)}}]};t.showBlade(o,r)},e.openDictionarySettingManagement=function(){var o={id:"settingDetailChild",isApiSave:!0,currentEntityId:"Catalog.AssociationGroups",parentRefresh:function(t){e.associationGroups=t},controller:"platformWebApp.settingDictionaryController",template:"$(Platform)/Scripts/app/settings/blades/setting-dictionary.tpl.html"};t.showBlade(o,r)},r.item,e.associationGroups=o.getValues({id:"Catalog.AssociationGroups"},(function(e){e&&e.length>0&&(r.groupName=e[0])})),r.selection=_.map(r.item.associations,(function(e){return{id:e.associatedObjectId,type:e.associatedObjectType,association:e}}))}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.newCategoryWizardController",["$scope","platformWebApp.bladeNavigationService","platformWebApp.dialogService","virtoCommerce.catalogModule.categories",function(e,t,o,a){var r=e.blade;e.create=function(){r.isLoading=!0,r.currentEntity.$update(null,(function(t){e.bladeClose((function(){var e=r.parentBlade;e.setSelectedItem(t),e.showCategoryBlade(t),e.refresh()}))}),(function(e){t.setError("Error "+e.status,r)}))},e.openBlade=function(e){r.onClose((function(){var o=null;switch(e){case"properties":o={id:"categoryPropertyDetail",entityType:"product",currentEntity:r.currentEntity,propGroups:[{title:"catalog.properties.category",type:"Category"},{title:"catalog.properties.product",type:"Product"},{title:"catalog.properties.variation",type:"Variation"}],controller:"virtoCommerce.catalogModule.propertyListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/property-list.tpl.html"};break;case"seo":o={id:"seo",controller:"virtoCommerce.coreModule.seo.storeListController",template:"Modules/$(VirtoCommerce.Core)/Scripts/SEO/blades/seo-detail.tpl.html"}}null!=o&&t.showBlade(o,r)}))},e.codeValidator=function(e){return!/[$+;=%{}[\]|@~!^*&()?'<>,]/.test(e)},e.setForm=function(t){e.formScope=t},r.isLoading=!1}])},function(e,t){angular.module("virtoCommerce.catalogModule").controller("virtoCommerce.catalogModule.newProductWizardController",["$scope","platformWebApp.bladeNavigationService","$http","virtoCommerce.storeModule.stores","virtoCommerce.catalogModule.catalogImagesFolderPathHelper","virtoCommerce.catalogModule.itemTypesResolverService",function(e,t,o,a,r,i){var l=e.blade;if(l.item.productType){var n=i.resolve(l.item.productType);n&&(l.headIcon=n.icon)}var c=l.item.name?l.item.name:"",s=c,d=a.query().$promise;e.createItem=function(){l.isLoading=!0,l.item.$update(null,(function(e){l.parentBlade.setSelectedItem(e),l.parentBlade.refresh();var o={id:l.id,itemId:e.id,catalog:l.catalog,productType:e.productType,title:e.name,controller:"virtoCommerce.catalogModule.itemDetailController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/item-detail.tpl.html"};t.showBlade(o,l.parentBlade)}),(function(o){t.setError("Error "+o.status,e.blade)}))},e.openBlade=function(a){var i=null;switch(a){case"properties":i={id:"newProductProperties",entityType:"product",item:l.item,catalog:l.catalog,currentEntity:l.item,languages:_.pluck(l.catalog.languages,"languageCode"),defaultLanguage:l.catalog.defaultLanguage.languageCode,propGroups:[{title:"catalog.properties.product",type:"Product"},{title:"catalog.properties.variation",type:"Variation"}],controller:"virtoCommerce.catalogModule.propertyListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/property-list.tpl.html"};break;case"images":i={id:"newProductImages",item:l.item,folderPath:r.getImagesFolderPath(e.blade.item.catalogId,e.blade.item.code),catalog:l.catalog,controller:"virtoCommerce.catalogModule.imagesController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/images.tpl.html"};break;case"seo":!function(e,t){if(_.any(e.seoInfos))t(e.seoInfos[0]);else{var a={isActive:!0},r=e.name;_.each(e.properties,(function(e){_.each(e.values,(function(e){r+=" "+e.value}))})),r?o.get("api/catalog/getslug?text="+r).then((function(e){a.semanticUrl=e.data,t(a)})):t(a)}}(l.item,(function(e){d.then((function(o){i={id:"seoDetails",data:e,isNew:!_.any(l.item.seoInfos),seoContainerObject:l.item,stores:o,catalog:l.catalog,languages:_.pluck(l.catalog.languages,"languageCode"),updatePermission:"catalog:create",controller:"virtoCommerce.coreModule.seo.seoDetailController",template:"Modules/$(VirtoCommerce.Core)/Scripts/SEO/blades/seo-detail.tpl.html"},t.showBlade(i,l)}))}));break;case"review":i={id:"newProductEditorialReviewsList",item:l.item,catalog:l.catalog,controller:"virtoCommerce.catalogModule.editorialReviewsListController",template:"Modules/$(VirtoCommerce.Catalog)/Scripts/blades/editorialReviews-list.tpl.html"}}null!=i&&t.showBlade(i,l)},e.codeValidator=function(e){return!/[$+;=%{}[\]|@~!^*&()?'<>,]/.test(e)},e.setForm=function(t){e.formScope=t},e.getUnfilledProperties=function(){return _.filter(l.item.properties,(function(e){return e&&_.any(e.values)&&e.values[0].value}))},e.$watch("blade.item.properties",(function(e){s!=l.item.name&&(s||l.item.name)||!_.any(l.childrenBlades,(function(e){return"virtoCommerce.catalogModule.newProductWizardPropertiesController"===e.controller}))||(s=c,_.each(e,(function(e){if(_.any(e.values,(function(e){return e.value}))){var t=_.find(e.values,(function(e){return e.value}));t&&(s+=(s?", ":"")+t.value)}})),l.item.name=s)})),l.isLoading=!1}])},function(e,t,o){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,